INFO:root:log file created!
INFO:root:Start time: 2024-09-17 21:49:48.507465
INFO:root:Current run:temp_categorize_claude-3-haiku-20240307_2024-09-17-21-49-48_435440
INFO:root:Model: claude-3-haiku-20240307
INFO:root:Temperature: 0.5
INFO:root:Pass_k: 1
INFO:root:Self-correct: False
INFO:root:Correct round: 3
INFO:root:Do analyze: False
INFO:root:Do simulate: False
INFO:root:Eval coremark: False
INFO:root:Eval exebench: True
INFO:root:Use Mask: False
INFO:root:Mask stage: baseline
INFO:root:using LLM model: claude-3-haiku-20240307
INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 0: simple
c_src:



double linear_interp(double x,double lx,double ux,double ly,double uy) {
  return((x-lx)/(ux-lx)*(uy-ly)+ly);
}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 1: simple
c_src:

double QuinticEaseIn(double p)
{
    return p * p * p * p * p;
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 2: simple
c_src:
#include <stdio.h>

int dec_lv(char x, char c, int lv)
{
 if (x == c)
  --lv;

 return lv;
}
-------------

INFO:root:current LLM prompt size: 568
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 3: complex
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <unistd.h>

#include <limits.h>

#include <errno.h>

#include <stdarg.h>

#include <fcntl.h>

#include <time.h>

#include <signal.h>

#include <dirent.h>

#include <pwd.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <sys/wait.h>

int
prefix_of(char *special, char *s)
{
 for (; *special != '\0'; ++special)
  if (*special != *s++)
   return 0;
 return (*s == '=' || *s == '\0');
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 4: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <memory.h>

int* sub(int* a, int sizeA, int* b, int sizeB, int* resultSize){

}
-------------

INFO:root:current LLM prompt size: 488
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 5: medium
c_src:

void vec_mpy(int y[], const short x[], short scaler)
{
 int i;

 for (i = 0; i < 150; i++)
   y[i] += ((scaler * x[i]) >> 31);
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 6: complex
c_src:

int sign_int(int num)
{
  return (( ((((num))) <= (((0)))) ? ( ((((num))) < (((0)))) ? ((-1)) : ((0)) ) : ((1)) ));
}
-------------

INFO:root:current LLM prompt size: 488
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 7: simple
c_src:

int big_endian(
    void)
{
    union {
        long l;
        char c[sizeof(long)];
    } u;

    u.l = 1;

    return (u.c[sizeof(long) - 1] == 1);
}
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 8: simple
c_src:

int _isatty(int fd)
{
  (void)fd;
  return (1);
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 9: complex
c_src:

extern inline int
JKMarray_idx (const int J, const int K, const int M)
{
  return (((4 * J * J + 5) * J) / 3 + 2 * J * J + K * (2 * J + 1) + M);
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 10: complex
c_src:

long sign_long(long num)
{
  return (( ((((num))) <= (((0)))) ? ( ((((num))) < (((0)))) ? ((-1)) : ((0)) ) : ((1)) ));
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 11: simple
c_src:

int dmp_cm_edit_config(void)
{
 return 0;
}
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 12: simple
c_src:

int _cmp (int _a, int _b) {
 int a = _a;
 int b = _b;
 return (a > b ? (-1) : (1));
}
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 13: simple
c_src:

int safe(void) {
    extern int q;
    int lp;
    return 0;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 14: simple
c_src:

int HelpItem146( void )
{

 return 0;
}
-------------

INFO:root:current LLM prompt size: 448
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 15: simple
c_src:

int update_program_status(int aggregated_dump) {}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 16: medium
c_src:
#include <stdlib.h>

int printArray(int arr[], int n)
{
    int i=1;
    while(arr[i]==arr[0])
    {
        i++;
    }
    return i;
}
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 17: simple
c_src:

int
COLORS()
{

    return 256;
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 18: simple
c_src:

int bar( int x )
{
   return x+1;
}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 19: medium
c_src:
#include <stdio.h>

#include <time.h>

#include <string.h>

#include <stdlib.h>

#include <assert.h>

char *skipSpaces(char *pc)
{
 while((*pc == ' ' || *pc == '\n' || *pc == '\t' || *pc == '\r') &&
   *pc != '\0')
  pc++;

 return pc;
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 20: simple
c_src:

char *init_buffer(char *buffer)
{
 int i;

 i = 0;
 while (buffer[i])
  buffer[i++] = 0;
 return (buffer);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 21: simple
c_src:

int GetAnswer() {
  return 42;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 22: simple
c_src:

unsigned char padding(void)
{
  return 0xff;
}
-------------

INFO:root:current LLM prompt size: 511
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 23: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

int getPrec(char op) {

    switch(op) {
        case '+':
        case '-':
        return 1;

        case '*':
        case '/':
        return 2;


        case '(':
        case ')':
        return 3;

        default:
        return 0;
    }
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 24: simple
c_src:
#include <sys/stat.h>

#include <errno.h>

#include <sys/times.h>

int _isatty(int file)
{
  return 0;
}
-------------

INFO:root:current LLM prompt size: 489
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 25: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <string.h>

#include <errno.h>

char flip_bit (char bit_character) {
 if ('0' == bit_character)
  return '1';
 else
  return '0';
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 26: medium
c_src:

int
foo (int a, int b)
{
  int t;

  if (b)
    {
      if (a)
 t = 3;
      else
 t = 5;

      a = 0;
    }
  else
    t = 7;

  return t;
}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 27: simple
c_src:
#include <math.h>

#include <stddef.h>

double opTimes(double lhs, double rhs) { return lhs * rhs; }
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 28: simple
c_src:

float raw_linear_derivative_at( float y ) {
  return 1.0;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 29: simple
c_src:

int bitCount(int x) {
  return 2;
}
-------------

INFO:root:current LLM prompt size: 576
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 30: medium
c_src:



















int xtoi(char *p)
{
 int curr;
 int res = 0;

 while (*p)
 {
  curr = ((*p) >= '0' && (*p) <= '9' ? (*p) - '0' : (*p) >= 'A' && (*p) <= 'F' ? (*p) - 'A' + 10 : (*p) >= 'a' && (*p) <= 'f' ? (*p) - 'a' + 10 : -1);
  if (curr == -1) break;
  res = res * 0x10 + curr;
  p++;
 }

 return res;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 31: simple
c_src:
#include <string.h>

#include <stdlib.h>

#include <assert.h>

int DummyCDInit(__attribute ((unused)) const char *cdrom_name)
{



 return 0;
}
-------------

INFO:root:current LLM prompt size: 510
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 32: medium
c_src:
#include <stdio.h>

#include <time.h>

#include <stdlib.h>

#include <ctype.h>

int retPosVector(char letra, char alfabeto[]) {
 int i;

 for( i = 0; alfabeto[i]; i++) {
  if(alfabeto[i] == letra) {
   return i;
  }
 }
}
-------------

INFO:root:current LLM prompt size: 483
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 33: simple
c_src:

unsigned int CgosStrLen(const char *s)
  {
  const char *ss=s;
  if (!s) return 0;
  while (*s++);
  return s-ss-1;
  }
-------------

INFO:root:current LLM prompt size: 533
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 34: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <math.h>

#include <time.h>

#include <omp.h>

#include <unistd.h>

int checkExpDesignator(char *str, int len)
{
 int i,n=0;

 for (i=0; i<len; i++)
 {
  if (str[i]=='D')
  {
   n++;
   str[i] = 'E';
  }
 }

 return(n);
}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 35: simple
c_src:
#include <stddef.h>

#include <stdint.h>

int oc_storage_config(const char *store) {
    return -1;
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 36: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int inter_mercenary_sql_init(void)
{
 return 0;
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 37: simple
c_src:
#include <stdio.h>

int tester(int num){
 return num;
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 38: simple
c_src:
#include <stdio.h>

int logicOr(int x, int y) {
 if (x || y == 1) {
  return 1;
 }
 else {
  return 0;
 }
}
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 39: simple
c_src:

int f6(int c, int shamt) {




  return c << shamt;
}
-------------

INFO:root:current LLM prompt size: 516
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 40: medium
c_src:
#include <stdio.h>

#include <string.h>

char cipher (char c){
 if(c >= 65 && c<= 90){
  c = c - 65;
  c = 90 - c;
 }else if( c >= 97 && c<= 122){
  c = c-97;
  c = 122 - c;
 }
 return c;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 41: simple
c_src:

int
g(int a)
{
 return a;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 42: simple
c_src:

float obdConvert_44 (unsigned int A, unsigned int B, unsigned int C, unsigned int D) {
 return ((float)A*256.0f+(float)B)*0.0000305f;
}
-------------

INFO:root:current LLM prompt size: 449
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 43: simple
c_src:

double check_double() { return 0; }
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 44: simple
c_src:

int ft_tolower(int c)
{
 if (c <= 90 && c >= 65)
  return (c + 32);
 return (c);
}
-------------

INFO:root:current LLM prompt size: 511
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 45: medium
c_src:







int SwapLong(int num)
{
 return (((num >> 0) & 0xFF) << 24) + (((num >> 8) & 0xFF) << 16) + (((num >> 16) & 0xFF) << 8) + (((num >> 24) & 0xFF) << 0);
}
-------------

INFO:root:current LLM prompt size: 518
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 46: medium
c_src:
#include <inttypes.h>

#include <stdlib.h>

#include <limits.h>

#include <stdio.h>

#include <string.h>

#include <sqlite3.h>

int Bank_int_IsValidName(const char *Name)
{
 if( !Name ) return 0;
 while(*Name)
 {
  if( *Name == '\'' ) return 0;
  Name ++;
 }
 return 1;
}
-------------

INFO:root:current LLM prompt size: 543
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 47: complex
c_src:
#include <assert.h>

#include <errno.h>

#include <fcntl.h>

#include <poll.h>

#include <signal.h>

#include <stdarg.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <sys/mman.h>

#include <sys/time.h>

#include <sys/types.h>

#include <sys/wait.h>

#include <time.h>

#include <unistd.h>

int RIFSIGNALED(int status)
{
    return (status & 0xff) != 0;
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 48: simple
c_src:











void TextDisplaySetBarText(int barnum, const char *str)
{

}
-------------

INFO:root:current LLM prompt size: 545
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 49: medium
c_src:

char * getTokenTypeName(int type){
 switch(type){
  case 1:
   return "<LParen>";
  case 2:
   return "<RParen>";
  case 3:
   return "<Number>";
  case 8:
   return "<ID>";
  case 6:
   return "<Plus>";
  case 7:
   return "<Minus>";
  case -2:
   return "<EOF>";
  case -1:
   return "<Error!>";
  default:
   return "<Unknown token type!>";
 }
}
-------------

INFO:root:current LLM prompt size: 505
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 50: medium
c_src:
#include <math.h>

#include <stdio.h>

#include <errno.h>

#include <stdlib.h>

int mus_iclamp(int lo, int val, int hi)
{
    if (val > hi)
        return(hi);
    else
        if (val < lo)
            return(lo);
        else return(val);
}
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 51: simple
c_src:

float UI_ClampCvar( float min, float max, float value )
{
 if ( value < min ) return min;
 if ( value > max ) return max;
 return value;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 52: simple
c_src:

short USBSTK5505_GPIO_init()
{
    return 0;
}
-------------

INFO:root:current LLM prompt size: 495
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 53: medium
c_src:
#include <stdio.h>

#include <math.h>

#include <stdlib.h>

#include <unistd.h>

#include <stdarg.h>

#include <string.h>

double H (double x) {
   if (x >= 0) return 1.;
   else return 0.;
}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 54: simple
c_src:































int LZ4_versionNumber (void) { return (1 *100*100 + 6 *100 + 0); }
-------------

INFO:root:current LLM prompt size: 488
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 55: medium
c_src:

int foo(int time, int n) {
#pragma omp parallel for default(shared) schedule(dynamic, 1) reduction(+ : time)
  for (int i = 1; i < n; ++i);
  return 0;
}
-------------

INFO:root:current LLM prompt size: 560
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 56: medium
c_src:
#include <stdio.h>

int checkrange(char c1, char c2)
{

 if (('a' <= c1 && c1 <= 'z') && (c1 <= c2 && c2 <= 'z'))
  return 1;

 if (('A' <= c1 && c1 <= 'Z') && (c1 <= c2 && c2 <= 'Z'))
  return 1;

 if (('0' <= c1 && c1 <= '9') && (c1 <= c2 && c2 <= '9'))
  return 1;

 return 0;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 57: simple
c_src:
#include <math.h>

double
gsl_coerce_double (const double x)
{
  volatile double y;
  y = x;
  return y;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 58: simple
c_src:
#include <stdio.h>

int c059(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 59: simple
c_src:
#include <math.h>

#include <stdlib.h>

double mcdrag_rpm(double twist, double velocity)
{
  return (velocity/(twist/60.0)*12.0);
}
-------------

INFO:root:current LLM prompt size: 718
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 60: complex
c_src:
#include    <stdlib.h>  /* Include standard library header */

#include    <math.h>    /* Include math library header */

#include    <string.h>  /* Include string function header */

#include    <ctype.h>   /* Include character function header */

#include    <limits.h>  /* define LONG_MIN and LONG_MAX */

int valid_serial(char *carray)
{
int i, code, num[10], sumo=0, sume=0, sumss=0;

for(i=0;i<10;i++){
  code = carray[i];
  num[i] = code - 0x30;
  if((code<0x30)||(code>0x39)){
    return 0;
  }
}

sumo = num[0]+num[2]+num[4];
sumo = sumo - (sumo/10)*10;

sume = num[1]+num[3]+num[5];
sume = sume - (sume/10)*10;

sumss = num[0]+num[1]+num[2]+num[3]+num[4]+num[5]+sumo+sume;

if((sumo!=num[6])||(sume!=num[7])||(sumss!=(10*num[8]+num[9]))){
  return 0;
}

return 1;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 61: simple
c_src:

int f(int x) { return x - 5; }
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 62: simple
c_src:
#include <stdbool.h>

bool timeout_reached(void)
{
    return false;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 63: simple
c_src:
#include <string.h>

char* langRomTypeMicrosolFdc() { return "Microsol Disk Controller"; }
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 64: simple
c_src:

int do_386() { return 386; }
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 65: simple
c_src:

int function(int a, int b) { return a+b; }
-------------

INFO:root:current LLM prompt size: 495
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 66: simple
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

double
UC_11_1_11
(
    double F_g_s_rep,

    double F_g_u_d

)
{
        return (F_g_s_rep / F_g_u_d);
}
-------------

INFO:root:current LLM prompt size: 502
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 67: medium
c_src:
#include <stdio.h>

#include <string.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <signal.h>

#include <fcntl.h>

#include <unistd.h>

#include <stdlib.h>

#include <sys/wait.h>

int stop_process(int pid)
{
 return kill(pid, 15);
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 68: simple
c_src:
#include <string.h>

int vout_finish(void)
{
  return 0;
}
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 69: simple
c_src:

int alloc(int *p)
{
  int tmp = 5;



  return 0;
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 70: simple
c_src:
#include <stdio.h>

#include <stddef.h>

#include <string.h>

char* mote64_Name(void) {
 return "MOTE64";
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 71: simple
c_src:
#include <stdio.h>

char *hello(void) {
    return "hello";
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 72: simple
c_src:





int exists(const char *filename)
{
 return (0);
}
-------------

INFO:root:current LLM prompt size: 530
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 73: complex
c_src:
#include <math.h>

float fast_cbrtf(float x)
{
   union {int ix; float x;} v;
   v.x = x;
   v.ix = v.ix/4 + v.ix/16;
   v.ix = v.ix + v.ix/16;
   v.ix = v.ix + v.ix/256;
   v.ix = 0x2a511cd0 + v.ix;
   return v.x;
}
-------------

INFO:root:current LLM prompt size: 497
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 74: medium
c_src:
#include <stddef.h>

int GO_strcmp (char *d, char *s)
{
 while ('\0' != *d) {
  if (*d != *s)
   return *d - *s;
  d++;
  s++;
 }

 return *d - *s;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 75: simple
c_src:

int
test_01 (volatile short* x)
{
  return *x;
}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 76: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

int isspec(char c)
{
    return (((c >= '!') && (c <= '/')) || (c >= ':' && c <= '@') || ((c >= '[') && (c <= '`')) || ((c >= '{') && (c <= 'DEL')));
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 77: simple
c_src:

int hash_val (int key)
{
    return key;
}
-------------

INFO:root:current LLM prompt size: 535
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 78: medium
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <stdint.h>

#include <math.h>

int cat_nums(char *str_out, char *str){

 int i=0,j=0;
 while(str[i]!='\0'){
  if(str[i] >= '0' && str[i] <= '9'){
   str_out[j++] = str[i];
  }
  i++;
 }
 str_out[j] = '\0';
 return(j);
}
-------------

INFO:root:current LLM prompt size: 550
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 79: simple
c_src:
#include <stdio.h>

#include <stdarg.h>

#include <sys/types.h>

#include <sys/stat.h>

__attribute__ ((used))
int _write(int file, char *ptr, int len)
{
# 103 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/LCRS-UCC/STM32F4Discovery-expansion/refs/heads/Working/OtharSoft/syscalls/syscalls.c"
    return len;
}
-------------

INFO:root:current LLM prompt size: 572
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 80: simple
c_src:
#include <stdio.h>

int countVowels(char *str)
{
 int i,count=0;
 for(i=0;str[i]!='\0';++i)
  if('a' == str[i] ||
     'e' == str[i] ||
     'i' == str[i] ||
     'o' == str[i] ||
     'u' == str[i] ||
     'A' == str[i] ||
     'E' == str[i] ||
     'I' == str[i] ||
     'O' == str[i] ||
     'U' == str[i] )
   count++;
 return count;
}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 81: simple
c_src:
#include <string.h>

char* langRomTypeMirroredRam1k() { return "1kB Mirrored RAM"; }
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 82: simple
c_src:

unsigned long unsignedlong_id(unsigned long x){return x;}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 83: simple
c_src:
#include <stdlib.h>

void pointerExample1(int *ptr1, int *ptr2){
 ptr1 = ptr2;
}
-------------

INFO:root:current LLM prompt size: 569
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 84: medium
c_src:
#include <stdio.h>

int hcf_iterative(int a, int b){
 int q, r;
 if(a > 0 && b > 0){
  if(a < b)
   return hcf_iterative(b, a);

  q = a / b;
  r = a % b;
  while(r != 0 && r != 1){
   a = b;
   b = r;
   q = a / b;
   r = a % b;
  }

  if(r == 0)
   return b;
  else if(r == 1)
   return 1;
 }
 return -1;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 85: simple
c_src:

int soma3(int a, int b, int c)
{
 return a+b+c;
}
-------------

INFO:root:current LLM prompt size: 546
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 86: medium
c_src:

unsigned long int_sqrt(unsigned long x)
{
        unsigned long b, m, y = 0;

        if (x <= 1)
                return x;

        m = 1UL << ((sizeof(long) * 8) - 2);
        while (m != 0) {
                b = y + m;
                y >>= 1;

                if (x >= b) {
                        x -= b;
                        y += m;
                }
                m >>= 2;
        }

        return y;
}
-------------

INFO:root:current LLM prompt size: 511
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 87: medium
c_src:
#include <stdio.h> 

int comp(int num)
{
    int res = 0;
    int cnt = 0;

    while (num) {
        if (!(num & 1)) {
            res = res | (1 << cnt);
        }
        ++cnt;
        num = num >> 1;
    }

    return res;
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 88: complex
c_src:

int logicalShift(int x, int n) {
 int a=(x>>31&1)<<32+~n;
 return (x^a<<n)>>n^a;
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 89: simple
c_src:

double light_time(double distance) {
    double t = 0.0;



    return t;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 90: simple
c_src:

double business_sum(double in, double in2) {
    return in + in2;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 91: simple
c_src:

int do_961() { return 961; }
-------------

INFO:root:current LLM prompt size: 511
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 92: simple
c_src:





int chroma_sub_implemented(int mode)
{
  switch (mode) {
  case 0:
  case 1:
  case 3:
    return 1;
  case 2:
  case 4:
  case 5:
  case 7:
  case 6:
  default:
    return 0;
  }
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 93: simple
c_src:
#include <stdio.h>

int leapyear(int year) {
  if (year % 400 == 0)
    return 1;
  else if (year % 4 == 0 && year % 100 != 0)
    return 1;
  else
    return 0;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 94: simple
c_src:

int subtract(int x, int y) {
    return x - y;
}
-------------

INFO:root:current LLM prompt size: 542
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 95: complex
c_src:
#include <ctype.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <stdint.h>

#include <math.h>

#include <time.h>

#include <fcntl.h>

#include <sys/types.h>

#include <errno.h>

#include <limits.h>

double calc_swst(unsigned short swst_dn, double pri)
{


     return ((double) swst_dn * 210.94e-09 + 9.0 * pri - 6.6E-6);
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 96: simple
c_src:

int gsl_TouchNear(void)
{
  return 0;
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 97: simple
c_src:

int _link (const char *old_name, const char *new_name)
{
  return -1;
}
-------------

INFO:root:current LLM prompt size: 519
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 98: medium
c_src:

int quant(int n, int m)
{
 int i, neg;

 neg = 0;
 if (n < 0) {
  neg++;
  n = -n;
 }

 i = n / m;
 if (n - m * i > m / 2)
  i += 1;
 i *= m;
 if (neg)
  i = -i;
 return(i);
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 99: simple
c_src:

void fs_scandir(char *dir, char *name)
{
}
-------------

INFO:root:current LLM prompt size: 592
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 100: simple
c_src:

int gcd(int a,int b) {
    int r;

    if(a<0) {
        a=-a;
    }
    if(b<0) {
        b=-b;
    }

    if(b>a) {
        int tmp=a;
        a=b;
        b=tmp;
    }
# 36 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/yigezhe/algorithm-summary/refs/heads/master/math/gcd/gcd_idea2_way2.c"
    while (b != 0) {
        r = a % b;
        a = b;
        b = r;
    }
    return a;
}
-------------

INFO:root:current LLM prompt size: 548
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 101: simple
c_src:





char MungeHexDigit(char* one_hexdigit)
{
 char r = -1;
 char c = *one_hexdigit;
 if (c >= '0' && c <= '9')
 {
  r = c - '0';
 }
 else if (c >= 'A' && c <= 'F')
 {
  r = c - 'A' + 10;
 }
 else if (c >= 'a' && c <= 'F')
 {
  r = c - 'a' + 10;
 }

 return r;
}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 102: simple
c_src:

int mmr_diverse (int q_no, int number_of_preresults, int number_of_results) {


    return 0;
}
-------------

INFO:root:current LLM prompt size: 533
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 103: medium
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <math.h>

int rgb2Int(const int r, const int g, const int b) {
 int tr = (r << 16) & 0x00FF0000;
 int tg = (g << 8) & 0x0000FF00;
 int tb = b & 0x000000FF;

 return 0xFF000000 | tr | tg | tb;
}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 104: simple
c_src:

int min(int valor1, int valor2)
{
 if(valor1 < valor2)
  return valor1;
 else
  return valor2;
}
-------------

INFO:root:current LLM prompt size: 483
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 105: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

#include <stdarg.h>

#include <time.h>

#include <pthread.h>

int spook_log_deinit()
{



    return 0;
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 106: simple
c_src:

int PicoGetHashTableSize( void ){
 return 7919;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 107: simple
c_src:

int f7c(int *p) {

  p = (void*) 0;
  return 1;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 108: complex
c_src:

void game_of_life(int** board, int N, int M, int steps, int** final_board) {
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 109: medium
c_src:

int doubleSize() {
 double doubArray[10];
 double * doubPtr1;
 double * doubPtr2;

 return (long)(doubArray+1)+(~(long)doubArray+1);
}
-------------

INFO:root:current LLM prompt size: 543
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 110: medium
c_src:
#include <stdio.h>

int function(int x, int y)
{
 switch (y) {
  case 2:
   if ((x % 4 == 0 && x % 100 != 0) || x % 400 == 0) {
    return 29;
   } else {
    return 28;
   }
  case 4:
  case 6:
  case 9:
  case 11:
   return 30;
  default:
   return 31;
 }
}
-------------

INFO:root:current LLM prompt size: 449
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 111: simple
c_src:

int g3 () { return 4; }
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 112: simple
c_src:
#include <sys/stat.h>

#include <string.h>

#include <errno.h>

int SER_GetChar (void) {

  return (-1);
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 113: medium
c_src:

long
factorial( int n )
{
 if( n <= 0 )
  return 1;
 else
  return n * factorial( n - 1 );
}
-------------

INFO:root:current LLM prompt size: 549
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 114: medium
c_src:
#include <stdio.h>

#include <time.h>

#include <stdlib.h>

#include <limits.h>

#include <ctype.h>

int isnum(char *c) {
 int i = 0;

 while( *(c + i) != '\0' ) {
  if ( !(*(c + i) >= 48 && *(c + i) <= 57) )
   break;
  else
   i++;
 }
 if ( *(c + i) == '\0' )
  return 1;
 else
  return 0;
}
-------------

INFO:root:current LLM prompt size: 550
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 115: medium
c_src:
#include <stdio.h>

int my_str_cmp (const char s1[], const char s2[])
{
    int i = 0;
    int are_equal = 0;

    while ( s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0' ) {
        ++i;
    }

    if ( s1[i] == '\0' && s2[i] == '\0' ) {
        are_equal = 1;
    }

    return are_equal;
}
-------------

INFO:root:current LLM prompt size: 517
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 116: simple
c_src:




int mini18n_set_log(const char * filename) {
# 172 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/EmulatorArchive/yabause-rr/refs/heads/master/src/windows/mini18n/mini18n.c"
 return 0;
}
-------------

INFO:root:current LLM prompt size: 496
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 117: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <stdbool.h>

#include <time.h>

unsigned int cut( unsigned int length ) {
 if (length % 2 == 0)
  return length/2;
 else
  return length/2 + 1;
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 118: simple
c_src:

int lowbit(int x) {
    return x & (-x);
}
-------------

INFO:root:current LLM prompt size: 557
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 119: complex
c_src:
#include <stdio.h>

#include <stdbool.h>

#include <stdlib.h>

#include <limits.h>

#include <assert.h>

int magic(int a, int b) {

 if (a < 2 || b < 2) return 0;
 int r;
 while (1) {
  if (b > a) {
   r = a;
   a = b;
   b = r;
  }
  r = a%b;
  a /= b;
  if (r) return 0;
  else if (a == 1) return b;
 }
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 120: simple
c_src:

int do_642() { return 642; }
-------------

INFO:root:current LLM prompt size: 604
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 121: medium
c_src:

int color_char_to_attr(char c)
{
 switch (c)
 {
 case 'd':
  return (0);
 case 'w':
  return (1);
 case 's':
  return (2);
 case 'o':
  return (3);
 case 'r':
  return (4);
 case 'g':
  return (5);
 case 'b':
  return (6);
 case 'u':
  return (7);

 case 'D':
  return (8);
 case 'W':
  return (9);
 case 'v':
  return (10);
 case 'y':
  return (11);
 case 'R':
  return (12);
 case 'G':
  return (13);
 case 'B':
  return (14);
 case 'U':
  return (15);
 }

 return ( -1);
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 122: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

void fortranflush_(int* rank){}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 123: simple
c_src:

int do_053() { return 53; }
-------------

INFO:root:current LLM prompt size: 513
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 124: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

int same_coordinate(int* coor1, int* coor2, int d)
{
    int i;
    for(i = 0; i < d; i++)
 if(coor1[i] != coor2[i])
     return 0;
    return 1;
}
-------------

INFO:root:current LLM prompt size: 500
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 125: simple
c_src:
#include <sys/types.h>

#include <sys/param.h>

#include <sys/socket.h>

#include <netinet/in.h>

#include <stdlib.h>

#include <stdio.h>

#include <string.h>

#include <errno.h>

int
oakley_get_defaultlifetime()
{
 return 28800;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 126: complex
c_src:

int buffer_overflow() { int x[10]={0}; return x[100]; }
-------------

INFO:root:current LLM prompt size: 498
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 127: medium
c_src:

int month(int *n)
{int month;
int flag=0;
month=n[2]*10+n[3];
if( (month<12) ||(month>=21 &&month<=32)||(month>=41 && month<=53))
{flag=1;}
return flag;
}
-------------

INFO:root:current LLM prompt size: 824
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 128: complex
c_src:
#include <ctype.h>

#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

int readc_utf8(int fd, int *res)
{
    unsigned int n = 0;
    int expect = 1;

    while (expect--) {
        unsigned char ch;
        int len;

        if ((len = read(fd, &ch, 1)) == 0) {
            *res = EOF;
            return 1;
        }

        if (len == -1)
            return 0;

        if ((ch & 0b11111100) == 0b11111100) {
            n = ch & 0b00000001;
            expect = 5;
        }
        else if ((ch & 0b11111000) == 0b11111000) {
            n = ch & 0b00000011;
            expect = 4;
        }
        else if ((ch & 0b11110000) == 0b11110000) {
            n = ch & 0b00000111;
            expect = 3;
        }
        else if ((ch & 0b11100000) == 0b11100000) {
            n = ch & 0b00001111;
            expect = 2;
        }
        else if ((ch & 0b11000000) == 0b11000000) {
            n = ch & 0b00011111;
            expect = 1;
        }
        else if ((ch & 0b10000000) == 0b10000000) {
            n <<= 6;
            n |= ch & 0b00111111;
        }
        else {
            n = ch;
        }
    }

    *res = (int)n;
    return 1;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 129: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int maximum(int a, int b) {
    if (a < b) {
        return b;
    } else {
        return a;
    }
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 130: simple
c_src:
#include <stdio.h>

int v2(int n){
 return n*(n+1)/2;
}
-------------

INFO:root:current LLM prompt size: 502
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 131: simple
c_src:
#include <sys/cdefs.h>

#include <curses.h>

#include <signal.h>

#include <unistd.h>

int
sign(int n)
{
 if (n < 0)
  return -1;
 else if (n > 0)
  return 1;
 else
  return 0;
}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 132: simple
c_src:

int imm_deref(int *p)
{
  if (p && *p > 4) return 4;
  else return 0;
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 133: simple
c_src:
#include <limits.h>

int f2()
{
  return (int)(float)(2147483647);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 134: simple
c_src:

int do_472() { return 472; }
-------------

INFO:root:current LLM prompt size: 449
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 135: simple
c_src:

int hell1() { return 1; }
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 136: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

void swap5 (int * a, int * b)
{
  int k = a;
  a = b;
  b = k;
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 137: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

unsigned int power(int x, unsigned int k)
{
    return k == 0 ? 1 : x * power(x, k - 1);
}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 138: simple
c_src:
















int is_device_mounted(const char *path)
{
# 331 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/luisbg/befstools/refs/heads/master/src/device_info.c"
    (void) path;
    return 0;
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 139: simple
c_src:

double zeta(double phi) {
  return((1.0)*phi + (2.0)*(1.0-phi));
}
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 140: medium
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

int check_header(char *header, char *firstline) {
    if (*header == *firstline)
        return 1;
    else {
        return 0;
    }
}
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 141: simple
c_src:
#include <math.h>

#include <assert.h>

#include <string.h>

#include <stdlib.h>

int ti_sinh_start(double const *options) { (void)options; return 0; }
-------------

INFO:root:current LLM prompt size: 460
INFO:anthropic._base_client:Retrying request to /v1/messages in 0.770940 seconds
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 142: simple
c_src:

char getChar(){
    char ch;
    ch='m';
    return (ch+1);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 143: simple
c_src:

int do_908() { return 908; }
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 144: simple
c_src:

int
cal (int a, int b)
{

  int sum = a + b;
  int sum1 = a * b;


  return (a + b + sum + sum1);
}
-------------

INFO:root:current LLM prompt size: 599
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 145: complex
c_src:
#include <ctype.h>

#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

int put_len_utf8(int _ch)
{
    unsigned int ch = (unsigned int)_ch;
    int len = 0;

    if (ch <= 0x7F)
        len = 1;
    else if (ch <= 0x07FF)
        len = 2;
    else if (ch <= 0xFFFF)
        len = 3;
    else if (ch <= 0x01FFFFF)
        len = 4;
    else if (ch <= 0x03FFFFFF)
        len = 5;
    else if (ch <= 0x7FFFFFFF)
        len = 6;

    return len;
}
-------------

INFO:root:current LLM prompt size: 447
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 146: simple
c_src:

int b() {return 0;}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 147: simple
c_src:
#include <string.h>

int ft_isdigit(int c)
{
 if (c >= (int)'0' && c <= (int)'9')
  return (1);
 else
  return (0);
}
-------------

INFO:root:current LLM prompt size: 513
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 148: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

int cr_has_byte_in_string(char byte, char *arg) {
  int c;
  c = -1;
  while (0 != c) {
    c = (int)*arg++;
    if ((char)c == byte) {
      return 1;
    }
  }
  return 0;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 149: simple
c_src:
#include <string.h>

#include <stdlib.h>

#include <stddef.h>  /* apparently needed to define size_t */

int mem_setoptions(int options)
{

  options = 0;
  return(options);
}
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 150: simple
c_src:










float evaluation_avg(float new_val, float old_val, int i)
{
    return old_val * i / (i + 1) + new_val / (i + 1);
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 151: simple
c_src:
#include <stdio.h>

int fun(int x, int *p)
{
    return x + *p;
}
-------------

INFO:root:current LLM prompt size: 526
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 152: simple
c_src:
#include <stdlib.h>

#include <errno.h>

int sgsXPC_SetCurrentDirectory( char* path )
{
# 235 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/snake5/sgscript/refs/heads/apidev/src/sgs_xpc.c"
 return chdir( path );


}
-------------

INFO:root:current LLM prompt size: 514
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 153: medium
c_src:
#include <assert.h>

#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <fcntl.h>

#include <unistd.h>

char *fname_last (char *ptr) {
  char *s = ptr;
  while (*ptr) {
    if (*ptr++ == '/') {
      s = ptr;
    }
  }
  return s;
}
-------------

INFO:root:current LLM prompt size: 485
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 154: simple
c_src:
#include <stdio.h>

int do_sum(int n)
{
    int i, sum;
    sum = 0;
    for(i=0;i<n;++i) {
 sum += i;
    }
    return sum;

}
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 155: simple
c_src:
#include <memory.h>

#include <stdlib.h>

#include <string.h>

#include <stdio.h>

int Heap_initialize()
{
 return 0;
}
-------------

INFO:root:current LLM prompt size: 647
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 156: medium
c_src:
#include <assert.h>

#include <stdio.h>

#include <stdlib.h>

int ZopfliGetDistExtraBits(int dist) {
  if (dist < 5) return 0;
  else if (dist < 9) return 1;
  else if (dist < 17) return 2;
  else if (dist < 33) return 3;
  else if (dist < 65) return 4;
  else if (dist < 129) return 5;
  else if (dist < 257) return 6;
  else if (dist < 513) return 7;
  else if (dist < 1025) return 8;
  else if (dist < 2049) return 9;
  else if (dist < 4097) return 10;
  else if (dist < 8193) return 11;
  else if (dist < 16385) return 12;
  else return 13;
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 157: simple
c_src:
#include <assert.h>

int testAll(void){

 return 0;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 158: simple
c_src:





void mpp_recv_double(double* data, int size, int from_pe)
{




}
-------------

INFO:root:current LLM prompt size: 569
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 159: medium
c_src:

int
alaw2linear(
            unsigned char a_val)
{
 int t;
 int seg;

 a_val ^= 0x55;

 t = (a_val & (0xf)) << 4;
 seg = ((unsigned)a_val & (0x70)) >> (4);
 switch (seg) {
        case 0:
            t += 8;
            break;
        case 1:
            t += 0x108;
            break;
        default:
            t += 0x108;
            t <<= seg - 1;
 }
 return ((a_val & (0x80)) ? t : -t);
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 160: simple
c_src:

int BGBDT_MsImaAdpcm_MonoSamplesFromBlockSize(int sz)
{
 return((sz-4)*2);
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 161: medium
c_src:

unsigned int
f89 (unsigned int x, unsigned int y)
{
  return (x << (8 * sizeof (unsigned int) - y)) + (x >> y);
}
-------------

INFO:root:current LLM prompt size: 584
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 162: medium
c_src:
#include <stdio.h>

int months_to_days(int n)
{
    switch(n)
    {
        case 1:
            return 0;
        case 2:
            return 31;
        case 3:
            return 59;
        case 4:
            return 90;
        case 5:
            return 120;
        case 6:
            return 151;
        case 7:
            return 181;
        case 8:
            return 212;
        case 9:
            return 243;
        case 10:
            return 273;
        case 11:
            return 304;
        case 12:
        default:
            return 334;
    }
}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 163: simple
c_src:
#include <stdio.h>

int bic(int x, int m)
{
    return x & ~m;
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 164: simple
c_src:
#include <errno.h>

#include <stdbool.h>

#include <stddef.h>

#include <stdio.h>

int fs_unlink (const char *path)
{
   return 0;
}
-------------

INFO:root:current LLM prompt size: 449
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 165: simple
c_src:

int func() {
    return 1;
}
-------------

INFO:root:current LLM prompt size: 535
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 166: medium
c_src:






int getoct (char *p,int width)
{
  int result = 0;
  char c;

  while (width--)
    {
      c = *p++;
      if (c == 0)
        break;
      if (c == ' ')
        continue;
      if (c < '0' || c > '7')
        return -1;
      result = result * 8 + (c - '0');
    }
  return result;
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 167: simple
c_src:

int qsort_intcmp(const int *a, const int *b) {
  return *a - *b;
}
-------------

INFO:root:current LLM prompt size: 493
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 168: medium
c_src:

int fact(int n)
{
  unsigned factor, total;
  total = 1;
  factor = 2;
  while (factor <= n) {
    total = total * factor;
    factor = factor + 1;
  }
  return total;
}
-------------

INFO:root:current LLM prompt size: 546
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 169: medium
c_src:
#include <assert.h>

#include <errno.h>

#include <netdb.h>

#include <netinet/in.h>

#include <signal.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <strings.h>

#include <sys/select.h>

#include <sys/socket.h>

#include <sys/types.h>

#include <unistd.h>

int parse_motion_command(char *cmd, int *gid, int *pid, int *row, int *col) {
  int outcome = 0;
  return outcome;
}
-------------

INFO:root:current LLM prompt size: 502
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 170: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

#include <assert.h>

#include <time.h>

#include <limits.h>

int heater_position_to_sensor_position(int i)
{
 int k = i/5;
 int ret = 5*i - 24 * k;
 return ret;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 171: simple
c_src:

int Decrement(int a)
{
    return --a;
}
-------------

INFO:root:current LLM prompt size: 520
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 172: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

#include <string.h>

int equal_strings(char *s1, char *s2)
{


 while (*s1 && *s2)
  if (*s1++ != *s2++)
   return (0);

 if (*s1 != *s2)
  return (0);
 else
  return (1);
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 173: simple
c_src:
#include <stdio.h>

int fun_2_in_release_so(int x, int y)
{
 return 20 + x + y;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 174: medium
c_src:
#include <stdio.h>

int factorial(int n){
    int i,f;
    f = 1;
    for(i=2;i<=n;i++){
        f *= i;
    }
    return f;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 175: simple
c_src:

int truncate(double x) {
  int y = (int)x;
  return y;
}
-------------

INFO:root:current LLM prompt size: 516
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 176: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int base2int(char b){
  switch(b){
    case 'A':
      return(0);
    case 'C':
      return(1);
    case 'G':
      return(2);
    case 'T':
      return(3);
    default:
      return(4);
  }
}
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 177: simple
c_src:
#include <sys/types.h>

#include <stdio.h>

#include <string.h>

#include <stdint.h>

double sub_double(double arg1, double arg2) { return arg1 - arg2; }
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 178: simple
c_src:

int weak (void)
{
  return 30;
}
-------------

INFO:root:current LLM prompt size: 466
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 179: simple
c_src:
#include <stdio.h>

#include <assert.h>

int bic(int x, int m) {
    return x & (~m);
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 180: medium
c_src:

int fact (int n) {
  if (n < 1) {
    return 1;
  } else {
    return n * fact(n-1);
  }
}
-------------

INFO:root:current LLM prompt size: 475
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 181: simple
c_src:

int f(int x) {
  const int i = x;
  if (x > 0) {
    x = x + i;
  }
  return x;
}
-------------

INFO:root:current LLM prompt size: 542
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 182: complex
c_src:

__attribute__((noinline, noclone)) short foo4 (short arg){ short ret = 1; if (arg + 1 < 12 || arg + 1 > ((!0) ? ((1 << (sizeof (short) * 8 - 1)) - 1) : ((1 << (sizeof (short) * 8)) - 1)) + 1) return ret; arg = arg + 1; ret = (char)arg; return arg; }
-------------

INFO:root:current LLM prompt size: 500
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 183: medium
c_src:

int my_get_el(char c, char *base)
{
  int lp;

  lp = 0;
  while (base[lp] != '\0')
    {
      if (c == base[lp])
        return (lp);
      ++lp;
    }
  return (-1);
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 184: simple
c_src:
#include <stddef.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int proc_false(void)
{
  return 0;
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 185: simple
c_src:
#include <stdarg.h>

double double_plus(double x, double y, int index) {
    return x + y;
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 186: simple
c_src:

int half (int x) {
 return x / 2;
}
-------------

INFO:root:current LLM prompt size: 617
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 187: medium
c_src:
#include <stdio.h>	//FILE*

#include <time.h>	//clock_t, clock()

double TLAString_toDouble(const char* string){
 const char sign= (*string);
 double value = 0;
 if(sign=='-' || sign=='+') string++;

 while((*string)!='\0' && (*string)!='.'){
  value = (value * 10.0f) + ((*string) - 48.0f);
  string++;
 }

 if((*string)=='.'){
  float factorDivisor = 10.0f;
  string++;
  while((*string)!='\0'){
   value += (((*string) - 48.0f) / factorDivisor);
   factorDivisor *= 10.0f;
   string++;
  }
 }

 if(sign=='-') value = -value;

 return value;
}
-------------

INFO:root:current LLM prompt size: 506
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 188: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <string.h>

#include <stdarg.h>

#include <syslog.h>

#include <ctype.h>

#include <iconv.h>

#include <errno.h>

char prch(char ch) {
    if ((unsigned char) ch >= ' ')
        return ch;
    return '.';
}
-------------

INFO:root:current LLM prompt size: 487
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 189: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

int mul8bit(int a, int b)
{
   int t = a * b + 128;
   return((t + (t >> 8)) >> 8);
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 190: simple
c_src:

int owHasOverDrive(int portnum)
{
   portnum = 0;
   return 1;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 191: simple
c_src:
































int dns_v_abi(void) {
 return 0x20160608;
}
-------------

INFO:root:current LLM prompt size: 496
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 192: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <stdbool.h>

#include <assert.h>

bool have_north_neighbor (unsigned int ypos)
{
    if (ypos == 0)
        return false;
    else
        return true;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 193: simple
c_src:

int add(int a, int b)
{
 return a + b + 2;
}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 194: medium
c_src:
#include <stdio.h>

#include <assert.h>

int get_mod(char *p)
{
 int mul=1;
 while (*p != '\0')
  mul *= ((*p++) - 'A' + 1);

 return mul % 47;
}
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 195: simple
c_src:
#include <stdio.h>

#include <stddef.h>

#include <string.h>

char* aleph_Name(void) {
 return "ALEPH16";
}
-------------

INFO:root:current LLM prompt size: 510
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 196: medium
c_src:
#include <time.h>

#include <stdlib.h>

int isInTable(int nombre, int * tab, int nb)
{
    int i=0;
    int retour =0;
    while (i < nb && !retour)
    {
        if(tab[i] == nombre) retour=1;
        i++;
    }
    return retour;
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 197: simple
c_src:

void updateSeriesTitle(unsigned int seriesID, char *title)
{


 return;
}
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 198: medium
c_src:

int fibonacci(int n) {
  int a = 1;
  int b = 1;

  while (n-- > 1) {
    int t = a;
    a = b;
    b += t;
  }

  return b;
}
-------------

INFO:root:current LLM prompt size: 590
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 199: medium
c_src:

int apply_binary_operation_on_byte(int tbit, int kbit, int operation)
{
 if (operation == 0x00) {
  return ((tbit == '1') || (kbit == '1')) ? '1' : '0';
 }
 else
 if (operation == 0x01) {
  return ((tbit == '1') && (kbit == '1')) ? '1' : '0';
 }
 else
 if (operation == 0x02) {
  return (((tbit == '0') && (kbit == '1'))
    || ((tbit == '1') && (kbit == '0'))) ? '1' : '0';
 }

 return '?';
}
-------------

INFO:root:current LLM prompt size: 491
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 200: simple
c_src:
#include <stdio.h>

#include <stdarg.h>

#include <stdint.h>

#include <stdlib.h>

#include <unistd.h>

#include <errno.h>

#include <string.h>

#include <time.h>

int cb_dev_sched_default() {


 return 1;
}
-------------

INFO:root:current LLM prompt size: 506
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 201: simple
c_src:

int checkdccs()
{
# 496 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/gandaro/piebnc/refs/heads/master/src/p_dcc.c"
    return 0x0;
}
-------------

INFO:root:current LLM prompt size: 1060
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 202: complex
c_src:
#include <errno.h>

#include <sys/ioctl.h>

#include <fcntl.h>

#include <unistd.h>

#include <stdlib.h>

#include <time.h>

#include <string.h>

#include <stdio.h>

#include <ncurses.h>

char lcd_hwchr(char *str, int pos)
{
 int i ;
 unsigned long int c=0 ;

 if (str==NULL) return '\0' ;

 for (i=0; str[i]!='\0' && i<pos; ) {
  if ((str[i]&'\x80')==0) i++ ;
  else {
   i++ ;
   while ((str[i]&'\xC0')=='\x80') i++ ;
  }
 }

 if ((str[i]&'\x80')==0) return str[i] ;

 if ((str[i]&'\xE0')=='\xC0') {
  c|=(str[i]&'\x1F') ;
  if (str[i+1]!='\0') { c<<=5 ; c|=str[i+1]&'\x3F' ; }
 }

 if ((str[i]&'\xF0')=='\xE0') {
  c|=(str[i]&'\x0F') ;
  if (str[i+1]!='\0') { c<<=4 ; c|=str[i+1]&'\x3F' ; }
  if (str[i+2]!='\0') { c<<=6 ; c|=str[i+2]&'\x3F' ; }
 }

 if ((str[i]&'\xF8')=='\xF0') {
  c|=(str[i]&'\x07') ;
  if (str[i+1]!='\0') { c<<=3 ; c|=str[i+1]&'\x3F' ; }
  if (str[i+2]!='\0') { c<<=6 ; c|=str[i+2]&'\x3F' ; }
  if (str[i+3]!='\0') { c<<=6 ; c|=str[i+3]&'\x3F' ; }
 }

 switch(c) {
 case 0xE000: return 'E' ;
 case 0xE001: return 'N' ;
 case 0xE002: return 'D' ;
 case 0xE003: return 'E' ;
 case 0xE004: return 'N' ;
 case 0xE005: return 'D' ;
 case 0xE006: return 'V' ;
 case 0xE007: return 'v' ;
 case 0xE008: return '<' ;
 case 0xE009: return '>' ;
 case 0xE00A: return 'p' ;
 case 0xE00B: return 'b' ;
 case 0xE00C: return 'f' ;
 case 0xE00D: return 'r' ;
 case 0xE00E: return 's' ;
 case 0xE00F: return 'x' ;
 default: return '?' ;
 }
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 203: simple
c_src:

unsigned int lv_rec_deinit()
{
    return 0;
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 204: simple
c_src:

int hello_add(int a, int b)
{
    return a + b;
}
-------------

INFO:root:current LLM prompt size: 1086
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 205: complex
c_src:

int
rsock_ip_level_to_int(const char *str, long len, int *valp)
{
    switch (len) {
      case 2:
# 5182 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 3:
# 5221 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 4:
# 5236 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 5:



        return -1;

      case 6:






        return -1;

      case 7:
# 5263 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 8:



        return -1;

      case 10:
# 5287 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 11:
# 5326 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 12:
# 5341 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 13:



        return -1;

      case 14:



        return -1;

      case 15:
# 5365 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 16:



        return -1;

      default:
        if (!str || !valp) { }
        return -1;
    }
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 206: simple
c_src:

int calculate(int a, int b)
{
    return a + b;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 207: simple
c_src:
#include <limits.h>

int f1()
{
  return (int)2147483648.0f;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 208: simple
c_src:
#include <stdint.h>

#include <stdlib.h>

#include <stdbool.h>

float Function1Float(float x) { return x + 42.0f; }
-------------

INFO:root:current LLM prompt size: 569
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 209: complex
c_src:
#include <math.h>

#include <stdlib.h> 

int deriv1(int x, int init)
 {
 static int derBuff[2], derI = 0 ;
 int y ;
 if(init != 0)
  {
  for(derI = 0; derI < 2; ++derI)
   derBuff[derI] = 0 ;
  derI = 0 ;
  return(0) ;
  }
 y = x - derBuff[derI] ;
 derBuff[derI] = x ;
 if(++derI == 2)
  derI = 0 ;
 return(y) ;
 }
-------------

INFO:root:current LLM prompt size: 447
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 210: simple
c_src:

int t2(int b)
{
}
-------------

INFO:root:current LLM prompt size: 525
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 211: simple
c_src:










int sync_merge(const char *name, int fd1, int fd2)
{
# 64 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/wabbit01/odroid-xu-support/refs/heads/master/temp-exynos5-hwcomposer-changed-files/sync.c"
    return 0;

}
-------------

INFO:root:current LLM prompt size: 494
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 212: medium
c_src:
#include <string.h>

#include <stdlib.h>

#include <iconv.h>

int is_utf_special_byte(unsigned char c){
 unsigned special_byte = 0X02;
 if(c>>6==special_byte)
  return 1;
 else
  return 0;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 213: simple
c_src:

int do_451() { return 451; }
-------------

INFO:root:current LLM prompt size: 503
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 214: complex
c_src:
#include <stdio.h>

int collatz(long int n){
 int iter = 0;
 while(1){
  if(n%2==0) {n/=2; iter++;}
 else{
  if(n==1) return iter;
  else {n=3*n+1; iter++;}
 }}
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 215: simple
c_src:
#include <stdio.h>

int regina(int x)
{
 return x+23;
}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 216: simple
c_src:

void arrayAbs(int array[], int size) {
    for ( int i = 0; i < size; i++ ) {
        if ( array[i] < 0 ) {
            array[i] *= -1;
        }
    }
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 217: simple
c_src:

double test2(double a) { return __builtin_fabs(a); }
-------------

INFO:root:current LLM prompt size: 519
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 218: medium
c_src:
#include <stdio.h>

int multiply(int a, int b){
    if (b == 0)
        return 0;

    if (b == 1)
        return a;

    if (b % 2 == 0)
        return 2 * multiply(a, b/2);
    else
        return 2 * multiply(a, b/2) + a;
}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 219: medium
c_src:
#include <string.h>

#include <stdio.h>

#include <stdlib.h>

unsigned int hash(char *s){
  unsigned int h=0;
  for(;*s;s++)
    h=*s+h*31;
  return h%101;
}
-------------

INFO:root:current LLM prompt size: 579
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 220: complex
c_src:
#include <errno.h>

#include <stddef.h>

#include <limits.h>

#include <stdlib.h>

#include <stdarg.h>

#include <string.h>

#include <stdio.h>

int eslib_string_is_sane(char *buf, const unsigned int len)
{
 unsigned int idx;
 if (len == 0)
  return -1;
 for (idx = 0; idx < len; ++idx)
 {
  char c = buf[idx];

  if (c < 32 || c >= 127) {
   if (!( c == ' ' || c == '\n' || c == '\t' )) {
    return 0;
   }
  }
 }
 return 1;
}
-------------

INFO:root:current LLM prompt size: 447
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 221: simple
c_src:

int foo() { return 12;}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 222: simple
c_src:
#include <stdio.h>

float biggest(float a, float b, float c)
{
 if(a > b && a > c)
 {
  return a;
 }
 if(b > a && b > c)
 {
  return b;
 }
 return c;
}
-------------

INFO:root:current LLM prompt size: 445
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 223: simple
c_src:

int step(int steps){

}
-------------

INFO:root:current LLM prompt size: 475
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 224: medium
c_src:

unsigned short int
f37 (unsigned short int x, int y)
{
  return (x >> y) | (x << (8 * 2 - y));
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 225: simple
c_src:
#include <stdio.h>

int rodrigo(int a)
{
 return a+6;
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 226: simple
c_src:
#include <string.h>

int fchar_cmp(const char a, const char b) { return (int)a - (int)b; }
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 227: simple
c_src:

int
test_01 (int a)
{

  return a <= 0 ? a : 0;
}
-------------

INFO:root:current LLM prompt size: 568
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 228: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

int isoperator (char c)
{
  return ( c==','|| c=='|' || c=='6'|| c=='^' || c=='='|| c== '!'|| c=='<'
    || c== '>' || c== '+' || c== '-' || c=='%' || c=='/'
    || c=='*' || c== '~' || c=='(' || c==')' || c=='[' || c== ']'
    || c=='.' || ';' || c=='\'' || c=='"');
}
-------------

INFO:root:current LLM prompt size: 451
INFO:anthropic._base_client:Retrying request to /v1/messages in 0.997460 seconds
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 229: simple
c_src:

int add(int number)
{
 number++;

 return number;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 230: simple
c_src:

int ft_isdigit(int c)
{
 if (c >= '0' && c <= '9')
 {
  return (1);
 }
 return (0);
}
-------------

INFO:root:current LLM prompt size: 484
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 231: simple
c_src:

unsigned int Multiply(unsigned int a, unsigned int b)
{
 unsigned int i;
 unsigned int result = 0;
 for (i=0; i<b; i++) {
  result += a;
 }
 return result;
}
-------------

INFO:root:current LLM prompt size: 494
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 232: simple
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <math.h>

double
ho_recognize_font_1_nine (const double *array_in)
{
  double return_value = 0.0;

  return return_value;
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 233: simple
c_src:
#include <stdio.h>

int separateur(char c) {
  return (c == ' ' || c == '\t' || c == '\n');
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 234: medium
c_src:

int foo(int n){
    if(n==1){
        return (1);
    }
    return (n*foo(n-1));
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 235: simple
c_src:

int foo(int X) {



  return X <= 0 ? -X : X;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 236: simple
c_src:





void label_free(const char *label) {







}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 237: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int max(int a, int b) {
    if (a>b) return a;
    return b;
}
-------------

INFO:root:current LLM prompt size: 489
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 238: simple
c_src:
#include <stdlib.h>

#include <string.h>

void* MQTTPacket_header_only(unsigned char aHeader, char* data, int datalen)
{
 static unsigned char header = 0;
 header = aHeader;
 return &header;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 239: medium
c_src:

unsigned int
f73 (unsigned int x, unsigned int y)
{
  return (x << y) + (x >> (8 * sizeof (unsigned int) - y));
}
-------------

INFO:root:current LLM prompt size: 537
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 240: medium
c_src:
#include <stdio.h>

#include <string.h>

char rot13c(char c)
{
 char u[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 char l[] = "abcdefghijklmnopqrstuvwxyz";
 char *p;

 if ((p = strchr(u, c)) != NULL)
  return u[((p-u) + 13) % 26];
 else if ((p = strchr(l, c)) != NULL)
  return l[((p-l) + 13) % 26];
 else
  return c;
}
-------------

INFO:root:current LLM prompt size: 577
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 241: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

char *
escape_char(char e)
{
    switch (e) {
        case 'a':
            return "\a";
        case 'b':
            return "\b";
        case 't':
            return "\t";
        case 'n':
            return "\n";
        case 'v':
            return "\v";
        case 'f':
            return "\f";
        case 'r':
            return "\r";
        case '\"':
            return "\"";
        case '\'':
            return "\'";
        case '\\':
            return "\\";
        default:
            return "\?";
    }
}
-------------

INFO:root:current LLM prompt size: 449
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 242: simple
c_src:

int xxx(void) { return 23; }
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 243: simple
c_src:

void logistic_map(double r, double* x) {

}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 244: simple
c_src:

int do_099() { return 99; }
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 245: simple
c_src:
#include <math.h>

double surface_gravity(double mass, double radius)
{
 return 6.67408E-11 * (mass / (radius * radius));
}
-------------

INFO:root:current LLM prompt size: 489
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 246: medium
c_src:
#include <stdio.h>

long hash(char* word)
{
 int counter=0;
 long hashed = 42;

 while(word[counter] != '\0')
 {
  hashed += word[counter]*(counter+1);
  counter ++;
 }

 return hashed;
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 247: simple
c_src:

char *ptr_fn(char *s) {
  return s;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 248: simple
c_src:










int check_break (void)
{
    return 0;
}
-------------

INFO:root:current LLM prompt size: 537
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 249: medium
c_src:
#include <stdio.h>

#include <string.h>

char symbolToDraw(char condition, float avgTemp){

   char symbolFunction5;

    if (condition == 's')
        symbolFunction5 = '@';

    else if (condition == 'c')
        symbolFunction5 = '~';

    else if (condition == 'p' && avgTemp <= 0)
        symbolFunction5 = '*';

    else
        symbolFunction5 = ';';


    return symbolFunction5;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 250: medium
c_src:

int ezFiveEighths(int x) {
  int y = (x << 2) + x;
  return (y + ((y >> 31) & 7)) >> 3;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 251: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

void find_track_regex(char pattern[])
{

}
-------------

INFO:root:current LLM prompt size: 466
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 252: simple
c_src:

int fact(int x)
{
 if(x > 1)
  return x*fact(x-1);
 else return 1;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 253: simple
c_src:
#include <stdio.h>

int f(void)
{
  return 5;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 254: simple
c_src:
#include <stdio.h>

int numA(int x) { return x + 1; }
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 255: simple
c_src:
#include <stdio.h>

int c021(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 256: simple
c_src:

unsigned int fuzz(unsigned int bizz[][10]) {
    return bizz[1][1];
}
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 257: simple
c_src:

int end_farm()
{
    return 1;
}
-------------

INFO:root:current LLM prompt size: 564
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 258: medium
c_src:
#include <stdlib.h>

#include <math.h> /* for math stuff like cos, log, etc. */

int int_distance2 (int (*atom1_ptr), int (*atom2_ptr)) {

    return ((atom1_ptr[0]-atom2_ptr[0])*(atom1_ptr[0]-atom2_ptr[0]) +
            (atom1_ptr[1]-atom2_ptr[1])*(atom1_ptr[1]-atom2_ptr[1]) +
            (atom1_ptr[2]-atom2_ptr[2])*(atom1_ptr[2]-atom2_ptr[2]));

}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 259: simple
c_src:

int do_432() { return 432; }
-------------

INFO:root:current LLM prompt size: 603
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 260: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

int isvalid_id(const char *input_str) {
 char tmp_charset[15] = { 0 };
 int total = 0, magic_array[] = { 2, 3, 4, 5, 6, 7, 0, 8, 9, 2, 3, 4, 5 };
 for (int i = 0; i<13; i++) if (input_str[i] >= 0) {
  tmp_charset[i] = input_str[i]*magic_array[i];
  total += tmp_charset[i];
 }
 if (11 - (total % 11) == input_str[13]) return 1;
 return 0;
}
-------------

INFO:root:current LLM prompt size: 507
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 261: medium
c_src:
#include <stdlib.h>

#include <math.h>

double binomial(int n, int k) {
  int i;
  double x = 1;

  for (i = 0; i < k; ++i) {
    x *= n - i;
    x /= k -i;
  }

  return x;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 262: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

double RECT(double a)
{
  return( a>0.0 ? a : 0.0);
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 263: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int TransStste(int x, int y, int size) {
    return x * size + y;
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 264: simple
c_src:
#include <stdio.h>

int int_sub(int a, int b) { return a - b; }
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 265: simple
c_src:

int fun(int a)
{
    return a;
}
-------------

INFO:root:current LLM prompt size: 484
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 266: medium
c_src:

char* skip_char_match_replace(char ch, char* str,char replace){
    while(*str != '\0' && *str == ch){
        *str = replace;
        str++;
    }
    return str;
}
-------------

INFO:root:current LLM prompt size: 513
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 267: complex
c_src:
#include <stdio.h>

#include <string.h>

#include <math.h>

#include <stdlib.h>

int getNextDiff(char s[], int index) {
    int ret = index + 1;

    while (s[ret]) {
        if (s[ret] != s[index]) {
            break;
        }

        ret ++;
    }

    return ret;
}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 268: simple
c_src:
#include <stdio.h>

int add_numbers(int a, int b) {
  int sum;
  sum = a + b;
  return sum;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 269: simple
c_src:






int material_lookup (const char *name)
{
    return 0;
}
-------------

INFO:root:current LLM prompt size: 517
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 270: complex
c_src:

float grad2( int hash, float x, float y ) {
    int h = hash & 7;
    float u = h<4 ? x : y;
    float v = h<4 ? y : x;
    return ((h&1)? -u : u) + ((h&2)? -2.0*v : 2.0*v);
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 271: simple
c_src:

__attribute__((intel_ocl_bicc)) int add_inteloclbicc(int a, int b) {
  return a+b;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 272: simple
c_src:

int ft_isdigit(int c)
{
 if (c > 47 && c < 58)
  return (1);
 else
  return (0);
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 273: simple
c_src:

int sum(int n, int m) {
    if (n == 0) {
      return m;
    } else {
      return sum(n - 1, m + 1);
    }
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 274: complex
c_src:

int greatestBitPos(int x) {
 x |= x >> 1;
 x |= x >> 2;
 x |= x >> 4;
 x |= x >> 8;
 x |= x >> 16;
 return ((~x >> 1) | (1 << 31)) & x;
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 275: simple
c_src:
#include <math.h>

#include <assert.h>

#include <string.h>

#include <stdlib.h>

int ti_sqrt_start(double const *options) { (void)options; return 0; }
-------------

INFO:root:current LLM prompt size: 485
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 276: simple
c_src:
#include <stdio.h>

int are_prime(int num1,int num2){
  if(num1 - num2 == 2 || num2 - num1 == 2)
      return 1;
  return 0;
}
-------------

INFO:root:current LLM prompt size: 622
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 277: complex
c_src:
#include <stdio.h>

int ParseInt(const char* str, int len) {
 const char* cursor = str;
 int val = 0;
 int sign = 1;
 int isHex = 0;

 if (*cursor == '-') {
  cursor++;
  sign = -1;
 }
 else if (*cursor == '0' && cursor[1] == 'x') {
  cursor += 2;
  isHex = 1;
 }

 const int base = (isHex ? 16 : 10);
 while (*cursor && (cursor - str) < len) {
  int digit = (*cursor - '0');

  if (isHex && *cursor >= 'A' && *cursor <= 'F') {
   digit = (*cursor - 'A') + 10;
  }

  val *= base;
  val += digit;
  cursor++;
 }

 return val * sign;
}
-------------

INFO:root:current LLM prompt size: 640
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 278: complex
c_src:
#include <stdlib.h>

#include <stdio.h>

int triple_is_okay(char row1, char row2, char row3, int even) {
   if(even) {





      return ((row1 == 0x03) && (row2 == 0x0B) && ((row3 & 0x1C) == 0x0C)) ||
            ((row1 == 0x01) && (row2 == 0x05) && (row3 == 0x06)) ||
            ((row1 == 0x19) && (row2 == 0x11)) ||
            ((row1 == 0x15) && (row2 == 0x11));
   } else {





      return ((row1 == 0x13) && (row2 == 0x11)) ||
            ((row1 == 0x15) && (row2 == 0x11));
   }
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 279: simple
c_src:

unsigned long int unsignedlongint_ignoring_unsignedshort(unsigned long int x, unsigned short y){return x;}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 280: simple
c_src:
#include <errno.h>

#include <stdio.h>

void Sys_mkdir ( const char *path ) {
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 281: simple
c_src:
#include <stdio.h>

double add_precise(double x, double y)
{
    return (x + y);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 282: simple
c_src:

int do_125() { return 125; }
-------------

INFO:root:current LLM prompt size: 513
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 283: medium
c_src:
#include <stdio.h>

int is_contain_star_or_sharp(const char *str)
{
 int flag =0;
 char *p = (char *)str;
 while(*p != '\0')
 {
  if(*p=='*' || *p =='#')
  {
   flag = 1;
   break;
  }
  p++;
 }
 return flag;
}
-------------

INFO:root:current LLM prompt size: 542
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 284: complex
c_src:
#include <stdlib.h>

#include <string.h>

#include <ctype.h>

#include <math.h>

char get_char_comp(char c) {
  int i = c - 65;
  if (i < 0 || i > 57) {
    return c;
  } else {
    return "TVGHEFCDIJMLKNOPQYWAABSXRZ[\\]^_`tvghefcdijmlknopqywaabsxrz"[i];
  }
}
-------------

INFO:root:current LLM prompt size: 521
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 285: complex
c_src:

static inline int close(int fd) { long __res; __asm__ volatile ("int $0x80" : "=a" (__res) : "0" (6),"b" ((long)(fd))); do { if ((unsigned long)(__res) >= (unsigned long)(-125)) { __res = -1; } return (int) (__res); } while (0); }
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 286: simple
c_src:
#include <stdio.h>

int renan(int x)
{
 return x+21;
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 287: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <errno.h>

#include <string.h>

#include <ctype.h>

#include <math.h>

#include <time.h>

double rad2deg(double ang)
{
    return ang * 180.0 / 3.141592653589793;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 288: medium
c_src:

int diff(char a, int b) {
    putchar(98);
    if (a > b) return a - b;
    else return 1 + diff(b, a);
}
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 289: simple
c_src:
#include <stdio.h>

int pai(int N) {
 return ((N-1)/2);
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 290: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

int factorial(int number) {
 return number * ((number > 1) ? factorial(number - 1) : 1);
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 291: simple
c_src:
#include <stdio.h>

#include <string.h>

int params__is_list_delim_char(char c)
{
 return (c == ',');
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 292: simple
c_src:

int do_669() { return 669; }
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 293: medium
c_src:
#include <stdio.h>

int is_in_bound(int *arr, int size, int *ptr)
{
 if(arr > ptr || (arr+size-1) < ptr)
 {
  return 0;
 }
 else
 {
  return 1;
 }
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 294: simple
c_src:

int symbolic_index(int a) {
  int x[2] = {1, 2};
  if (a == 2) {
    return x[a];
  }
  return 0;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 295: medium
c_src:

long decode(long x, long y, long z) {
  long tmp = y - z;
  return (tmp * x) ^ (tmp << 63 >> 63);
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 296: simple
c_src:
#include <math.h>

float linearInterpolationf(float p)
{
 return p;
}
-------------

INFO:root:current LLM prompt size: 512
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 297: medium
c_src:

int
foo (int *p, int *q)
{
  int i;
  int accum = 0;

  for (i = 0 ; i < 1024; i++)
    {
      accum += ((*p--) * (*q++));
      accum += 4096;
      accum >>= 13 ;
    }

  return accum;
}
-------------

INFO:root:current LLM prompt size: 502
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 298: medium
c_src:

int fibo(int n){
  int result;
 int a = 0;
 int b = 1;
 int i = 1;
  while( i < n )
  {
      result = a + b;
      a = b;
      b = result;
      i++;
  }
 return result;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 299: simple
c_src:

int ft_tolower(int c)
{
 if ((unsigned char)c >= 'A' && (unsigned char)c <= 'Z')
  return (c - ('M' - 'm'));
 return (c);
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 300: simple
c_src:

float obdConvert_21 (unsigned int A, unsigned int B, unsigned int C, unsigned int D) {
 return (float)A*256.0f+(float)B;
}
-------------

INFO:root:current LLM prompt size: 550
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 301: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <math.h>

#include <ctype.h>

#include <sys/time.h>

double bayes(double probBA, double probA, double probBnotA){

 double probNotA, probB, probAB;

 probNotA = 1.0-probA;

 probB = ( probBA * probA ) + ( probBnotA * probNotA);
 probAB = ( probBA * probA ) / probB;

 return probAB;
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 302: simple
c_src:

int addtwo(int a)
{
    int x = 2;
    return a + x;
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 303: simple
c_src:
#include <stdio.h>

int is_start_with_number(const char *str)
{
 if(*str>='0' && *str <= '9')
  return 1;
 return 0;
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 304: simple
c_src:

int func1(int var, __attribute__((unused))int test)
{
 int t;

 t = sizeof(var);
 return (t);
}
-------------

INFO:root:current LLM prompt size: 586
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 305: medium
c_src:
#include <stdio.h>

int start_div(int n)
{
    if (n > 999999999) return 1000000000;
    if (n > 99999999) return 100000000;
    if (n > 9999999) return 10000000;
    if (n > 999999) return 1000000;
    if (n > 99999) return 100000;
    if (n > 9999) return 10000;
    if (n > 999) return 1000;
    if (n > 99) return 100;
    if (n > 9) return 10;
    return 1;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 306: simple
c_src:
#include <string.h>

int verify_benchmark(int r)
{
  int exp = 122;
  if (r != exp)
    return 0;
  return 1;
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 307: simple
c_src:

long sun_time2timeofday(int hour, int min, int sec) {
 return ((long) hour)*3600 + ((long) min)*60 + ((long) sec);
}
-------------

INFO:root:current LLM prompt size: 541
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 308: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int fa_bits_sideinfo_est(int chn_num)
{
    int bits;
# 283 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/jassam/falab/refs/heads/master/src/project/falabaac/libfalabaac/fa_aacstream.c"
    bits = 64/chn_num;

    return bits;
}
-------------

INFO:root:current LLM prompt size: 493
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 309: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

float minimoDiDueNumeri( float numero1, float numero2 )
{

    if( numero1 > numero2 ){
        return numero1;
    }
    else{
        return numero2;
    }
}
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 310: simple
c_src:

int id(int x) {
  if (x == 0) return 0; else return 1 + id(x - 1);
}
-------------

INFO:root:current LLM prompt size: 651
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 311: complex
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <time.h>

#include <stdarg.h>

#include <ctype.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <utime.h>

#include <fcntl.h>

#include <unistd.h>

#include <errno.h>

#include <regex.h>

int t2uprot (unsigned int prot)
{
    register unsigned tprot, uprot;
    register int tshift;
# 634 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/brouhaha/tapeutils/refs/heads/master/read20.c"
    {
 for (tshift=12, uprot=0; tshift >= 0; tshift -= 6) {
     tprot = prot >> tshift;
     uprot <<= 3;
     uprot |= (tprot >> 3) & 07;
 }
    }
    return uprot;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 312: simple
c_src:
#include <stdio.h>

int c055(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 313: simple
c_src:

int verify_benchmark(int unused)
{
    return -1;
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 314: simple
c_src:

int lsmErrorBkpt(int rc){

  return rc;
}
-------------

INFO:root:current LLM prompt size: 500
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 315: medium
c_src:
#include <stdio.h>

int char_count(char* haystack, char needle) {
  int count = 0;







  for(char* str = haystack; *str != '\0'; str++) {



    if(*str == needle) {
      count++;
    }
  }

  return count;
}
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 316: simple
c_src:

unsigned int Mod(unsigned int Dividend, unsigned int Divisor) {
 unsigned int Temp;
 Temp=Dividend;
 while(Temp>=Divisor) {
  Temp-=Divisor;
 }
 return Temp;
}
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 317: simple
c_src:
#include <stdio.h>

#include <stdarg.h>

#include <sys/types.h>

#include <sys/stat.h>

extern int _isatty(int file)
{
 ( void ) file;
 return 1;
}
-------------

INFO:root:current LLM prompt size: 500
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 318: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

int invers(int n){
    int invN = 0;
    while (n>0){
        invN = invN*10 + n%10;
        n/=10;
    }
    return invN;
}
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 319: medium
c_src:
#include <err.h>

#include <setjmp.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int hasarg(const char *buf) {
 return buf[1] == ' ' && buf[1] != '\0';
}
-------------

INFO:root:current LLM prompt size: 555
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 320: medium
c_src:

int case_starts(const char *s,const char *t)
{
  unsigned char x;
  unsigned char y;

  for (;;) {
    x = *s++ - 'A';
    if (x <= 'Z' - 'A') x += 'a'; else x += 'A';
    y = *t++ - 'A';
    if (y <= 'Z' - 'A') y += 'a'; else y += 'A';
    if (!y) return 1;
    if (x != y) return 0;
  }
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 321: simple
c_src:

int nand_support_two_plane(void)
{
    return 1 ? 1 : 0;
}
-------------

INFO:root:current LLM prompt size: 546
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 322: medium
c_src:
#include <stdio.h>

#include <errno.h>

int BIO_fd_non_fatal_error(int err)
{
    switch (err) {
# 323 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/Orav/kbengine/refs/heads/master/kbe/src/lib/dependencies/openssl/crypto/bio/bss_fd.c"
        return (1);

    default:
        break;
    }
    return (0);
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 323: simple
c_src:
#include <stdio.h>

int is_num( char c )
{
 return ( c >= '0' && c <= '9' ) ? 1 : 0;
}
-------------

INFO:root:current LLM prompt size: 480
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 324: medium
c_src:

unsigned short int
f30 (unsigned short int x, unsigned long int y)
{
  return (x >> (8 * sizeof (unsigned short) - y)) ^ (x << y);
}
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 325: simple
c_src:

float square(float n)
{
    return n*n;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 326: simple
c_src:
#include <stdio.h>

int inc(int a) {
  return a + 1;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 327: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <stdarg.h>

#include <math.h>

int SNDDummyReset()
{
   return 0;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 328: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <time.h>

void quickSort(int *vet, int left, int right){
  if(left == right) return;

  int pivot = left;
}
-------------

INFO:root:current LLM prompt size: 624
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 329: medium
c_src:

int _poids_caractere(char c)
{
    int poids;
    switch(c)
    {
        case 'a': case 'e': case 'i': case 'l': case 'n': case 'o': case 'r': case 's': case 't': case 'u':
            poids = 1;
            break;
        case 'd': case 'g': case 'm': poids = 2;break;
        case 'b': case 'c': case 'p': poids = 3;break;
        case 'f': case 'h': case 'v': poids = 4;break;
        case 'j': case 'q': poids = 8;break;
        case 'k': case 'w': case 'x': case 'y': case 'z': poids = 10;break;
        default : poids = 0;
    }
    return poids;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 330: simple
c_src:

int
SCOTCH_memMax ()
{
  return ((int) -1);
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 331: medium
c_src:
#include <math.h>

#include <assert.h>

#include <string.h>

#include <stdlib.h>

int ti_dx_start(double const *options) {
    return (int)options[0]-1;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 332: simple
c_src:

int f(int x) {

  if (x == 0) {
    return x;
  } else {
    int a[3];
    a[0] = -x;
    return a[0];
  }
}
-------------

INFO:root:current LLM prompt size: 545
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 333: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int extended_gcd(int a,int b){

long long unsigned int y,lasty,quotient,temp1,temp2;

y = 1;
lasty = 0;

while(b != 0){

quotient = a / b;
temp1 = a%b;
a = b;
b = temp1;

temp2 = y;
y = lasty - (quotient*y);
lasty = temp2;

}

return(lasty);
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 334: simple
c_src:

int
f(int b, int c)
{
  int a = (b >> 16) * (c >> 16);
  if (!a)
    return 10;
  return a;
}
-------------

INFO:root:current LLM prompt size: 525
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 335: simple
c_src:

int associatedConnectivity(int connectivity)
{
  switch(connectivity)
    {
    case 1:
      return 2;
      break;
    case 2:
      return 1;
      break;
    case 3:
      return 4;
      break;
    case 4:
      return 3;
      break;
    default:
      return 2;
      break;
    }
  return 0;
}
-------------

INFO:root:current LLM prompt size: 521
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 336: medium
c_src:
#include <stdlib.h>

#include <stdio.h>

char first_empty_cell(char *cell, char minimum) {
   char first_empty = minimum;
   while(first_empty == cell[0] || first_empty == cell[1] ||
         first_empty == cell[2] || first_empty == cell[3] ||
         first_empty == cell[4])
      first_empty++;
   return first_empty;
}
-------------

INFO:root:current LLM prompt size: 475
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 337: simple
c_src:
#include <stdio.h>

int maxof(int x, int y)
{
  if (x > y )
   return (x);
  else
   return (y);
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 338: simple
c_src:
#include <string.h>

char* langEnumControlsJoyMouse() { return "Mouse"; }
-------------

INFO:root:current LLM prompt size: 483
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 339: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

#include <fcntl.h>

#include <sys/ioctl.h>

#include <assert.h>

int
av_reset(void)
{
 return 0;
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 340: simple
c_src:

int int_max(int a, int b)
{
        return a > b ? a : b;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 341: simple
c_src:

int do_348() { return 348; }
-------------

INFO:root:current LLM prompt size: 448
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 342: simple
c_src:

int do_e() {return 1;}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 343: simple
c_src:

int
f(int a, int b, int c)
{
  a -= (short)b * (c >> 16);
  return a;
}
-------------

INFO:root:current LLM prompt size: 545
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 344: medium
c_src:
#include <stdio.h>

int _binary_search(int nums[], int l, int r, int x)
{
 if (r >= l)
 {
  int mid = (l + r) / 2;

  if (nums[mid] == x)
   return mid;
  else if (nums[mid] > x)
   return _binary_search(nums, l, mid - 1, x);
  else
   return _binary_search(nums, mid + 1, r, x);
 }
 return -1;
}
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 345: simple
c_src:

unsigned int get_length_of_text(char *text)
{
    int i = 0;
    while (text[i] != '\0') {
        i++;
    }
    return i;
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 346: simple
c_src:
#include <stdio.h>

__attribute__ ((noinline))
int order(int x, int y)
{
  return x < y ? 2 : 4;
}
-------------

INFO:root:current LLM prompt size: 877
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 347: medium
c_src:




int sqlite3Fts3IsIdChar(char c){
  static const char isFtsIdChar[] = {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
  };
  return (c&0x80 || isFtsIdChar[(int)(c)]);
}
-------------

INFO:root:current LLM prompt size: 695
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 348: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

int name_t(char * help,char *bb,char *ab,char * fp,char*pb)
{
    int i= 6;
    int b;



    if(help[i]== 57 && help[i+1]== 51&& help[i+2]== 51 && help[i+3]== 51 &&help[i+4]== 52 &&help[i+5]== 54 && help[i+6] == '-')
    {
        return b= 1 ;
    }
    if(help[i]== 53 &&help[i+1]== 53 && help[i+2]== 53 && help[i+3]== 56 && help[i+4] == 51 && help[i+5] == '-')
    {

        return b = 2 ;
    }
    if(help[i]== 52 &&help[i+1]== 50 && help[i+2]== 49 && help[i+3]== 48 && help[i+4] == '-')
    {
        return b = 3 ;
    }
    if(help[i]== 48 &&help[i+1]== 49 && help[i+2] == '-')
    {
        return b = 4;
    }
    return 0;
}
-------------

INFO:root:current LLM prompt size: 1048
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 349: complex
c_src:

unsigned char ConvertVIC_To_VM_Index(unsigned char VIC, unsigned char _3D_Struct)
{
    unsigned char ConvertedVIC;
    const unsigned char VIC2Index[] = {
                                0, 0, 1, 1, 2, 3, 4, 4, 5, 5,
                                7, 7, 8, 8, 10, 10, 11, 12, 12, 13,
                               14, 15, 15, 16, 16, 19, 19, 20, 20, 23,
                               23, 24, 25, 26, 27, 28, 28, 29, 29, 30,
                               31, 32, 33, 33, 34, 34, 35, 36, 37, 37,
                               38, 38, 39, 39, 40, 40, 41, 41, 42, 42
                            };

    VIC &= 0x7F;

    if (VIC < 60)
 {
        ConvertedVIC = VIC2Index[VIC];

  if (_3D_Struct != 0x0F)
  {
   switch (VIC)
   {
    case 4:
     switch(_3D_Struct)
     {
      case 0x00:
       ConvertedVIC = 43;
       break;

      case 0x03:
       ConvertedVIC = 44;
       break;

      case 0x04:
       ConvertedVIC = 45;
       break;
     }

     break;

    case 5:
     switch(_3D_Struct)
     {
      case 0x00:
       ConvertedVIC = 46;
       break;

      case 0x08:
       ConvertedVIC = 47;
       break;
     }

     break;

    case 19:
     switch(_3D_Struct)
     {
      case 0x00:
       ConvertedVIC = 48;
       break;

      case 0x03:
       ConvertedVIC = 49;
       break;

      case 0x04:
       ConvertedVIC = 50;
       break;
     }

     break;

    case 20:
     switch(_3D_Struct)
     {
      case 0x00:
       ConvertedVIC = 51;
       break;

      case 0x08:
       ConvertedVIC = 52;
       break;
     }

     break;

    case 32:
     switch(_3D_Struct)
     {
      case 0x00:
       ConvertedVIC = 53;
       break;

      case 0x03:
       ConvertedVIC = 54;
       break;

      case 0x04:
       ConvertedVIC = 55;
       break;
     }

     break;
   }
  }
 }


    else
        ConvertedVIC = VIC;

    return ConvertedVIC;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 350: simple
c_src:
#include <stdio.h>

int c048(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 351: simple
c_src:
#include <stdio.h>

char node_name(int n) { return ('A' + n); }
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 352: medium
c_src:

int setbit(int n) {
 return ( n>0 ? 1+ setbit(n/2): 0);
}
-------------

INFO:root:current LLM prompt size: 580
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 353: medium
c_src:
#include <stdio.h>

int busquedaBin1(double m[], int n, double v)
{



  int mitad, inf = 0, sup = n - 1;
  if (n == 0) return -1;

  do
  {
    mitad = (inf + sup) / 2;
    if (v > m[mitad])
      inf = mitad + 1;
    else
      sup = mitad - 1;
  }
  while( m[mitad] != v && inf <= sup);

  if (m[mitad] == v)
    return mitad;
  else
    return -1;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 354: simple
c_src:




int _isfmt(char c)
{
 switch (c) {
 case 's':
 case 'd':
 case 'x':
 case 'o':
 case 'c':
  return 1;
 default:
  return 0;
 }
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 355: simple
c_src:
#include <stdio.h>

int heap_max(int array[]){
 return array[0];
}
-------------

INFO:root:current LLM prompt size: 497
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 356: medium
c_src:

unsigned int
hashup(char *s)
{
  unsigned int hashval;
  hashval = 0;


  while(*s != '\0'){
    hashval = *s + 31 * hashval;
    s++;
  }


  return(hashval % 101);

}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 357: simple
c_src:

int imin(int l, int r)
{
 if (l < r)
  return (l);
 return (r);
}
-------------

INFO:root:current LLM prompt size: 484
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 358: medium
c_src:
#include <stdio.h>

double power(double n, int p)
{
 double pow = 1;
 int i;

 for (i = 1; i <= p; i++)
  pow *= n;

 return pow;
}
-------------

INFO:root:current LLM prompt size: 512
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 359: medium
c_src:
#include <stdio.h>

int function(int x)
{
 if (x % 400 == 0) {
  return 29;
 } else if (x % 100 == 0) {
  return 28;
 } else if (x % 4 == 0) {
  return 29;
 } else {
  return 28;
 }
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 360: simple
c_src:

int some_helper() {
  return 1;
}
-------------

INFO:root:current LLM prompt size: 447
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 361: simple
c_src:

void f(int a[9]) {}
-------------

INFO:root:current LLM prompt size: 485
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 362: medium
c_src:
#include <stdio.h>

#include <math.h>

double fact(int n) {
    double sum = 1;
    for (; n > 1; n--) {
        sum *= n;
    }
    return sum;
}
-------------

INFO:root:current LLM prompt size: 529
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 363: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

#include <limits.h>

#include <stdbool.h>

#include <errno.h>

#include <math.h>

double sd2eps(unsigned int sigdig)
{
  double eps = 1;

  while (sigdig > 0)
  {
    eps *= 0.1;
    sigdig -= 1;
  }

  return eps;
}
-------------

INFO:root:current LLM prompt size: 532
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 364: medium
c_src:

int my_square_root(int nb)
{
  int i;

  i = 2;
  if (nb <= 0)
    return (0);
  else if (nb == 1)
    return (1);
  else
    while (1 == 1)
      {
 if ((i * i) == nb)
   return (i);
 else if (i >= nb)
   return (0);
 else
   ++i;
      }
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 365: simple
c_src:

float test1f(float a) { return -a; }
-------------

INFO:root:current LLM prompt size: 500
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 366: simple
c_src:

int ft_sisnum(const char *str)
{
 if (!str)
  return (0);
 while (*str != '\0')
 {
  if (*str >= '0' && *str <= '9')
   ++str;
  else
   return (0);
 }
 return (1);
}
-------------

INFO:root:current LLM prompt size: 496
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 367: medium
c_src:

double interp_4(double phim1, double phi, double phip1, double phip2){
    return (7.0/12.0)*(phi + phip1 ) -(1.0/12.0)*(phim1 + phip2);
}
-------------

INFO:root:current LLM prompt size: 1697
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 368: complex
c_src:

char* DVBGenreCode( unsigned char code )
{
 char *p="";
 switch ( code ) {

 case 0x00: p="";break;
 case 0x10: p="Movie/drama"; break;
  case 0x11: p="Detective/thriller"; break;
  case 0x12: p="Adventure/western/war"; break;
  case 0x13: p="Sci-Fi/fantasy/horror"; break;
  case 0x14: p="Comedy"; break;
  case 0x15: p="Soap/melodrama/folkloric"; break;
  case 0x16: p="Romance"; break;
  case 0x17: p="Serious/classical/religious/historical movie/drama"; break;
  case 0x18: p="adult movie"; break;


  case 0x20: p="New"; break;
  case 0x21: p="weather"; break;
  case 0x22: p="magazine"; break;
  case 0x23: p="magazine"; break;
  case 0x24: p="discussion/interview/debate"; break;


  case 0x30: p="Show"; break;
  case 0x31: p="Game/quiz/contest"; break;
  case 0x32: p="variety"; break;
  case 0x33: p="talk show"; break;


  case 0x40: p="Sports"; break;
  case 0x41: p="Sports special events"; break;
  case 0x42: p="sports magazines"; break;
  case 0x43: p="Football/soccer"; break;
  case 0x44: p="Tennis/squash"; break;
  case 0x45: p="team sports"; break;
  case 0x46: p="Athletics"; break;
  case 0x47: p="Motorcycle Racing"; break;
  case 0x48: p="Water sport"; break;
  case 0x49: p="Winter sports"; break;
  case 0x4A: p="Equestrian"; break;
  case 0x4B: p="Martial sports"; break;


  case 0x50: p="Children"; break;
  case 0x51: p="Pre-school children's programmes"; break;
  case 0x52: p="Kids 6-14"; break;
  case 0x53: p="Kids 10-16"; break;
  case 0x54: p="Informational/educational/school programmes"; break;
  case 0x55: p="Cartoons/puppets"; break;


  case 0x60: p="Music"; break;
  case 0x61: p="Rock/Pop"; break;
  case 0x62: p="classical music"; break;
  case 0x63: p="folk/traditional music"; break;
  case 0x64: p="Jazz"; break;
  case 0x65: p="Opera/Musical"; break;
  case 0x66: p="Ballet"; break;


  case 0x70: p="Art"; break;
  case 0x71: p="Performing"; break;
  case 0x72: p="Fine arts"; break;
  case 0x73: p="Religion"; break;
  case 0x74: p="Popular culture/traditional arts"; break;
  case 0x75: p="Literature"; break;
  case 0x76: p="Film/Cinema"; break;
  case 0x77: p="Experimental film/video"; break;
  case 0x78: p="Broadcasting/press"; break;
  case 0x79: p="New media"; break;
  case 0x7A: p="Arts/Culture magazines"; break;
  case 0x7B: p="fashion"; break;

  case 0x80: p="Social/political issues/Economics"; break;
  case 0x81: p="Magazines/reports/documentary"; break;
  case 0x82: p="Economics/Social advisory "; break;
  case 0x83: p="Remarkable people"; break;


  case 0x90: p="Education/Science/Factual"; break;
  case 0x91: p="Nature/animals/environment"; break;
  case 0x92: p="Technology/Natural sciences"; break;
  case 0x93: p="Medicine/physiology/psychology"; break;
  case 0x94: p="Foreign countries/expeditions"; break;
  case 0x95: p="Social/spiritual sciences"; break;
  case 0x96: p="Further education"; break;
  case 0x97: p="Languages"; break;


  case 0xa0: p="Leisure Hobbies"; break;
  case 0xa1: p="Travel"; break;
  case 0xa2: p="Handicraft"; break;
  case 0xa3: p="Motoring"; break;
  case 0xa4: p="Fitness"; break;
  case 0xa5: p="Cooking"; break;
  case 0xa6: p="Advertisement/shopping"; break;
  case 0xa7: p="gardening"; break;


  case 0xb0: p="Original language"; break;
  case 0xb1: p="Black and white"; break;
  case 0xb2: p="Unpublished"; break;
  case 0xb3: p="Live broadcast"; break;
 default: p=""; break;
 }
 return p;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 369: simple
c_src:

int do_330() { return 330; }
-------------

INFO:root:current LLM prompt size: 459
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 370: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

float f(float x){

 return x*x;
}
-------------

INFO:root:current LLM prompt size: 458
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 371: simple
c_src:
#include <assert.h>

int w1 () { int w; return wait(&w); }
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 372: simple
c_src:

int do_457() { return 457; }
-------------

INFO:root:current LLM prompt size: 517
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 373: complex
c_src:
#include <sys/time.h>

#include <stdlib.h>

#include <string.h>

#include <strings.h>

#include <time.h>

extern int
IsAlpha(char c) {
 if (c >= 'A' && c <= 'Z') return c;
 if (c >= 'a' && c <= 'Z') return c - ('a'-'A');
 return 0;
}
-------------

INFO:root:current LLM prompt size: 534
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 374: simple
c_src:
#include <string.h>

#include <sys/stat.h>

#include <sys/time.h>

#include <time.h> 

#include <time.h>

#include <unistd.h>

#include <errno.h>

#include <stdio.h>

#include <stdlib.h>

#include <stdarg.h>

int EndianTest(void)
{
  unsigned long int CT = 0L;
  ((char*)(&CT))[0] = 1;
  return ((CT==1)?0:1);
}
-------------

INFO:root:current LLM prompt size: 739
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 375: complex
c_src:

double InterpCubeLagrange(double xdiff, double ydiff, double zdiff,
        double vval000, double vval001, double vval010, double vval011,
        double vval100, double vval101, double vval110, double vval111) {

    double value;
    double oneMinusXdiff;
    double oneMinusYdiff;
    double oneMinusZdiff;

    oneMinusXdiff = 1.0 - xdiff;
    oneMinusYdiff = 1.0 - ydiff;
    oneMinusZdiff = 1.0 - zdiff;

    value = vval000 * (oneMinusXdiff) * (oneMinusYdiff) * (oneMinusZdiff)
            + vval001 * (oneMinusXdiff) * (oneMinusYdiff) * zdiff
            + vval010 * (oneMinusXdiff) * ydiff * (oneMinusZdiff)
            + vval011 * (oneMinusXdiff) * ydiff * zdiff
            + vval100 * xdiff * (oneMinusYdiff) * (oneMinusZdiff)
            + vval101 * xdiff * (oneMinusYdiff) * zdiff
            + vval110 * xdiff * ydiff * (oneMinusZdiff)
            + vval111 * xdiff * ydiff * zdiff;

    return (value);

}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 376: simple
c_src:

char lowerCaseFromNumber( int n ) {
  return (char)( n + 'a' );
}
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 377: simple
c_src:

int getDelay(int level)
{
        switch (level){
        case 2:
                return 10;
        case 3:
                return 7;
        case 4:
                return 5;
        default:
                return 2;
        }

}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 378: simple
c_src:

int test_nested3(int FOObar)


{
  return FOObar;
}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 379: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

#include <errno.h>

float calculate_actual_distance(float virt_dist, float calories, float estimated_calories) {
  return virt_dist * (calories / estimated_calories);
}
-------------

INFO:root:current LLM prompt size: 556
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 380: complex
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <math.h>

int is_leaf(int m, int t) {
  static int leaf[6] = {7, 5, 4, 4, 3, 3};
  if (m < 6)
    return (t <= 32);
  else if (m > 16)
    return (t <= 1);
  else if (m > 11)
    return (t <= 2);
  else
    return (leaf[m - 6] >= t);
}
-------------

INFO:root:current LLM prompt size: 687
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 381: complex
c_src:

int compareVersion(char* version1, char* version2) {

    int value1=0;
    int value2=0;

    while(1){
        value1=0;
        value2=0;
        while((*version1) != '\0' && (*version1) != '.'){
            value1 = (value1 * 10) + (*version1) - '0';
            version1++;
        }

        while((*version2) != '\0' && (*version2) != '.'){
            value2 = (value2 * 10) + (*version2) - '0';
            version2++;
        }

        if(value1 != value2){
            return value1 > value2 ? 1 : -1;
        }

        if((*version1) == '\0' && (*version2) != '\0'){
            version2++;
        }else if((*version2) == '\0' && (*version1) != '\0'){
            version1++;
        }else if((*version1) == '\0' && (*version2) == '\0'){
            return 0;
        }else{
            version1++;
            version2++;
        }

    }


}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 382: medium
c_src:
#include <stdio.h>

#include <sys/types.h>

#include <sys/socket.h>

#include <netinet/in.h>

#include <string.h>

#include <stdlib.h>

int
game_over (int figures[])
{
  if (figures[0] > 49 && figures[1] > 49)
    {
      return 1;
    }
  return 0;
}
-------------

INFO:root:current LLM prompt size: 540
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 383: medium
c_src:
#include <sys/types.h>

#include <sys/socket.h>

#include <sys/time.h>

#include <unistd.h>

#include <netdb.h>

#include <string.h>

int tsend(int targetfd, char* bytes, int bytes_size)
{
 int bytes_sent = 0;
 do
 {
  bytes_sent = send(targetfd, bytes, bytes_size, 0);
  if(bytes_sent == -1) return -1;
 }while(bytes_sent < bytes_size);
 return 0;
}
-------------

INFO:root:current LLM prompt size: 548
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 384: complex
c_src:
#include <stdlib.h>

#include <string.h>

#include <assert.h>

int get_subtree_array_size (int u, int v, int left_subtree_size_threshold) {
  if (v - u < left_subtree_size_threshold) {
    return 0;
  }
  int m = (u + v) >> 1;
  return 1 + get_subtree_array_size (u, m, left_subtree_size_threshold) + get_subtree_array_size (m, v, left_subtree_size_threshold);
}
-------------

INFO:root:current LLM prompt size: 478
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 385: simple
c_src:

int
fnear (float x, float y)
{
  float t = x - y;
  return t == 0 || x / t > 1000000.0;
}
-------------

INFO:root:current LLM prompt size: 607
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 386: medium
c_src:

int util_hex_to_nib(char ch)
{
 int val;
 switch (ch)
 {
 case 'a':
 case 'A':
  val = 10;
  break;
 case 'b':
 case 'B':
  val = 11;
  break;
 case 'c':
 case 'C':
  val = 12;
  break;
 case 'd':
 case 'D':
  val = 13;
  break;
 case 'e':
 case 'E':
  val = 14;
  break;
 case 'f':
 case 'F':
  val = 15;
  break;
 default:
  val = (int)ch - (int)'0';
  if ((val < 0) || (val > 9))
  {
   val = -1;
  }
  break;
 }
 return val;
}
-------------

INFO:root:current LLM prompt size: 508
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 387: medium
c_src:

int ft_multi_strchr(char *s, char *src)
{
 char *bufs;

 bufs = s;
 while (*src)
 {
  while (*s)
  {
   if (*s == *src)
    return (1);
   s++;
  }
  s = bufs;
  src++;
 }
 return (0);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 388: simple
c_src:

int do_865() { return 865; }
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 389: simple
c_src:

int stress_thrash_start(void)
{
 return 0;
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 390: simple
c_src:
#include <sys/stat.h>

#include <stdlib.h>

#include <alloca.h>

int ts_warn_break(void)
{
  return 0;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 391: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <stdint.h>

#include <inttypes.h>

#include <math.h>

double fpu_fchs(double a)
{
 double b;
 b = -a;




 return b;
}
-------------

INFO:root:current LLM prompt size: 460
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 392: simple
c_src:

int _open(const char *name, int flags, int mode)
{
    return -1;
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 393: medium
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <ctype.h>

#include <math.h>

int is_bracket(char c) {
 switch(c) {
 case '(':
  return 1;
 case ')':
  return 2;
 default:
  return 0;
 }
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 394: simple
c_src:
#include <stdio.h>

#include <stddef.h>

#include <stdlib.h>

void nrerror(char error_text[])
{
}
-------------

INFO:root:current LLM prompt size: 508
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 395: medium
c_src:
#include <stdio.h>

#include <math.h>

#include <string.h>

double geom_dot4d(const double a[4], const double b[4]){
 return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3];
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 396: simple
c_src:
#include <stdint.h>

#include <stdlib.h>

#include <stdio.h>

int _close(int fd)
{
    return -1;
}
-------------

INFO:root:current LLM prompt size: 494
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 397: medium
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <math.h>

float findhigh(float x, float y, float z) {
    if (y > x) x = y;
    if (z > x) x = z;
    return x;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 398: simple
c_src:

int do_068() { return 68; }
-------------

INFO:root:current LLM prompt size: 559
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 399: medium
c_src:
#include <unistd.h>

#include <stdio.h>

#include <stdlib.h>

#include <stdbool.h>

#include <termios.h>

int c2dir(char c){
  switch(c){
  case 'w': case 'k': case 'A':
    return 0;
  case 's': case 'j': case 'B':
    return 1;
  case 'd': case 'l': case 'C':
    return 2;
  case 'a': case 'h': case 'D':
    return 3;
  default:
    return -1;
  }
}
-------------

INFO:root:current LLM prompt size: 448
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 400: simple
c_src:

void destroy_half(int* i)


{

}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 401: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <string.h>

void f2(int *arr){}
-------------

INFO:root:current LLM prompt size: 508
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 402: simple
c_src:

int bcd_adjust(int value)
{
 if ((value & 0xf) >= 0xa)
  value = value + 0x10 - 0xa;
 if ((value & 0xf0) >= 0xa0)
  value = value - 0xa0 + 0x100;
 return value;
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 403: simple
c_src:

int g(int a) {
  return a + 1;
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 404: simple
c_src:

int ft_pow(int a, unsigned int n)
{
 int res;

 res = 1;
 while (n--)
  res *= a;
 return (res);
}
-------------

INFO:root:current LLM prompt size: 453
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 405: simple
c_src:

int func6_in_obj(void) {
    return 0;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 406: simple
c_src:

int generate_dh_params(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 466
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 407: simple
c_src:

double
normal_fma (double b, double c, double d)
{
  return (b * c) + d;
}
-------------

INFO:root:current LLM prompt size: 495
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 408: simple
c_src:
#include <stdlib.h>

#include <stdio.h>

#include <string.h>

int OTF_fileExists( const char* filename ) {

 if ( 0 == access( filename, 00 ) ) {

  return 1;

 } else {

  return 0;
 }
}
-------------

INFO:root:current LLM prompt size: 475
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 409: simple
c_src:

int ft_tolower(int c)
{
 if (c >= 'A' && c <= 'Z')
  c -= 'A' + 'a';
 return (c);
}
-------------

INFO:root:current LLM prompt size: 522
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 410: complex
c_src:

long nCr(long n, long r)
{
    if (n < r) return 0;


    if (r > n/2)
        return nCr(n, n-r);

    long out = 1;


    for(long k = 1; k <= r; ++k)
    {
        out *= n-k+1;
        out /= k;
    }

    return out;
}
-------------

INFO:root:current LLM prompt size: 463
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 411: simple
c_src:
#include <pthread.h>

#include <stdio.h>

#include <stdlib.h>

int function_c() {return 3;}
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 412: simple
c_src:

int funcion(unsigned int valor)
{
 if (valor < 0) {
  return 0;
 }
 else {
  return 1;
 }
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 413: simple
c_src:































int dns_v_api(void) {
 return 0x20120806;
}
-------------

INFO:root:current LLM prompt size: 1056
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 414: complex
c_src:

int
rsock_family_to_int(const char *str, long len, int *valp)
{
    switch (len) {
      case 2:



        return -1;

      case 3:
# 4517 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 4:
# 4550 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 5:
# 4574 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 6:
# 4676 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 7:
# 4748 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 8:
# 4784 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 9:
# 4814 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 10:
# 4835 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/pmq20/ruby-compiler/refs/heads/master/ruby/ext/socket/constdefs.c"
        return -1;

      case 11:






        return -1;

      case 12:






        return -1;

      default:
        if (!str || !valp) { }
        return -1;
    }
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 415: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int get_parent(int child_id){
    return child_id/2;
}
-------------

INFO:root:current LLM prompt size: 467
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 416: simple
c_src:
#include <stdio.h>

int func(int *array, int *other) {
  return array[7] + other[5];
}
-------------

INFO:root:current LLM prompt size: 512
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 417: medium
c_src:

int seq(int i) {
  int count;
  count = 0;
  while (i != 1) {
    count = count + 1;
    if (i % 2 == 0)
      i = i / 2;
    else
      i = i * 3 + 1;
  }
  return count;
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 418: simple
c_src:
#include <stdio.h>

int c024(void) { return 0; }
-------------

INFO:root:current LLM prompt size: 548
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 419: medium
c_src:
#include <assert.h>

#include <stdio.h>

#include <stdlib.h>

#include <sys/types.h>

#include <sys/ipc.h>

#include <sys/sem.h>

int init_sync( void )
{
# 186 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/VisualIdeation/vis5d--1.3.1/refs/heads/master/src/sync.c"
   ;;
   return 1;
}
-------------

INFO:root:current LLM prompt size: 456
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 420: simple
c_src:

long shift_right(long v, char n) {
    return v << n;
}
-------------

INFO:root:current LLM prompt size: 558
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 421: complex
c_src:















int nulls(char *buffer, int bufsize)
{
 int i;

 char c = buffer[bufsize - 1];

 for (i = 16 * 4; i > 0; i--)
  if (buffer[bufsize - i] != c)
   return 0;
# 202 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/scs/uclinux/refs/heads/master/user/dagrab/dagrab.c"
 return 1;
}
-------------

INFO:root:current LLM prompt size: 475
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 422: simple
c_src:
#include <stdio.h>

int volesfera(int r){
 int vol;

 vol=4/3*3.141592654*(r*r*r);
 return vol;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 423: complex
c_src:

int factorial2(int i)
{
  if(i==0) return 1;


  int tmp_result;
  tmp_result=factorial2(0);
  return tmp_result;
}
-------------

INFO:root:current LLM prompt size: 526
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 424: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <X11/Xlib.h>

#include <X11/keysym.h>

#include <X11/Xutil.h>

#include <assert.h>

#include <sys/time.h>

#include <sys/types.h>

void InitGraph (short int *GraphDriver, short int *GraphModus, char *PathToDriver)
{
}
-------------

INFO:root:current LLM prompt size: 533
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 425: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

int VerifSomaLados (int *dados){
  int bolean=0;
  if(dados[0]+dados[5]!=7)
    bolean=1;
  else if(dados[1]+dados[3]!=7)
    bolean=1;
  else if(dados[2]+dados[4]!=7)
    bolean=1;
  return bolean;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 426: simple
c_src:

char charFunc(void){
    return 'A';
}
-------------

INFO:root:current LLM prompt size: 481
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 427: simple
c_src:
#include <stdio.h>

double update_ratio(double new_ratio)
{
    static double ratio = 1.0;
    double old_ratio = ratio;
    ratio = new_ratio;

    return old_ratio;
}
-------------

INFO:root:current LLM prompt size: 469
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 428: medium
c_src:
#include <stdio.h>

int factorial(int n)
{
 if(n==1) return 1;
 return n*factorial(n-1);
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 429: medium
c_src:

unsigned short int
f62 (unsigned short int x, unsigned long int y)
{
  return (x << ((-y) & (8 * sizeof (unsigned short) - 1))) ^ (x >> y);
}
-------------

INFO:root:current LLM prompt size: 476
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 430: medium
c_src:

unsigned int
f89 (unsigned int x, int y)
{
  return (x << (8 * sizeof (unsigned int) - y)) + (x >> y);
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 431: medium
c_src:

unsigned short int
f94 (unsigned short int x, unsigned long int y)
{
  return (x << ((-y) & (8 * sizeof (unsigned short) - 1))) + (x >> y);
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 432: simple
c_src:
#include <stdio.h>

int absolute(int x) {
   if (x < 0)
   return -x;
   return x;
}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 433: simple
c_src:

int fact(int n){
 if(n <= 1){
  return 1;
 }
 else{
  return n * fact(n - 1);
 }
}
-------------

INFO:root:current LLM prompt size: 509
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 434: medium
c_src:

unsigned short getushort(unsigned short x)
{
    char *p1, *p2; unsigned short y;
    p1 = (char *)(&x); p2 = (char *)(&y);
    p2[1] = p1[0]; p2[0] = p1[1];
    return(y);
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 435: simple
c_src:

int do_198() { return 198; }
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 436: simple
c_src:



























int rtems_init_network( void )
{
   return(0);
}
-------------

INFO:root:current LLM prompt size: 454
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 437: simple
c_src:



















int cf_pipe_close(int fd)
{
    return close(fd);
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 438: simple
c_src:

void kernel_so_lputs( const char *s )
{

}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 439: simple
c_src:
#include <string.h>

char* langRomTypeObsonet() { return "Obsonet"; }
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 440: simple
c_src:
#include <stdio.h>

int fallthrough(){return 42;}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 441: simple
c_src:
#include <stdio.h>

float toCelsius(float fahrenheit) {
 return ( 5.0 / 9.0) * (fahrenheit - 32);
}
-------------

INFO:root:current LLM prompt size: 489
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 442: medium
c_src:

int next_pow_2(int n) {

 if(n&(n-1) == 0) {
  return n;
 }
 int p = 1;
 while(p<n) {
  p = p << 1;
 }
 return p;
}
-------------

INFO:root:current LLM prompt size: 513
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 443: medium
c_src:
#include <stdio.h>

double berechne_jahres_durchschnittskosten (double jahres_fahrleistung, double kosten_pro_einheit)
{
  double jahres_durchschnittskosten = jahres_fahrleistung * kosten_pro_einheit;

 return jahres_durchschnittskosten;
}
-------------

INFO:root:current LLM prompt size: 517
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 444: medium
c_src:
#include <stdio.h>

int c_sensitive(char *a, char *b)
{
 int x;

 for(x=0; a[x] != '\0' && b[x] != '\0'; x++)
 {
  if(a[x] > b[x])
  return 1;
  else if(a[x] < b[x])
   return -1;
 }

 return 0;
}
-------------

INFO:root:current LLM prompt size: 477
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 445: simple
c_src:

int is_in_bound(int *arr,int size,int *ptr)
{
 if(ptr<arr+size)
 {
  return 1;
 }
 else
 {
  return 0;
 }
}
-------------

INFO:root:current LLM prompt size: 473
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 446: simple
c_src:





















int ISORegexp__white_space(int c) {
 if ((c == ' ') || (c == '\t')) return 1;
 return 0;
}
-------------

INFO:root:current LLM prompt size: 537
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 447: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <stdarg.h>

#include <assert.h>

#include <stdbool.h>

#include <limits.h>

bool isBinChar(char c) {
  switch(c) {
  case 1 ... 8:
  case 11:
  case 12:
  case 14 ... 26:
  case 28 ... 31:
  case 127:
    return true;
  }
  return false;
}
-------------

INFO:root:current LLM prompt size: 465
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 448: simple
c_src:

int check_year(int year)
{
 if(year>=1 && year<=10)
  return 1;
 return 0;
}
-------------

INFO:root:current LLM prompt size: 501
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 449: simple
c_src:

int f()
{
  int x;
  int y;
  x = 0;
  y = 1;
  {
    x = x + y;
    {
      x = x + y;
      {
        x = x + y;
      }
    }
  }
  return x;
}
-------------

INFO:root:current LLM prompt size: 490
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 450: simple
c_src:

int fn_35 (int v)
{
    int res = 28;

    if (v == 2)
    {
        res = 27;
    } else
    {
        res = 18;
    }
    return res;
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 451: simple
c_src:
#include <math.h>

#include <stdlib.h>

#include <stdio.h>

void resetA(double* a) {






}
-------------

INFO:root:current LLM prompt size: 497
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 452: medium
c_src:

int num_digits(int val)
{
 int m = 10;
 int d = 1;

 if (val < 0) {
  d++;
  val = -val;
 }

 while (val >= m) {
  m *= 10;
  d++;
 }
 return d;
}
-------------

INFO:root:current LLM prompt size: 464
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 453: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int zero(long x) {
    return x == 0L;
}
-------------

INFO:root:current LLM prompt size: 534
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 454: medium
c_src:
#include <sys/param.h>

#include <sys/time.h>

#include <sys/resource.h>

#include <err.h>

#include <errno.h>

#include <grp.h>

#include <paths.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <syslog.h>

#include <unistd.h>

char *groupNameForTask(int taskNum)
{
    if (taskNum == 0)
        return "admin";

    return "admin";
}
-------------

INFO:root:current LLM prompt size: 542
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 455: medium
c_src:























int ILibIsDelimiter (const char* buffer, int offset, int buffersize, const char* Delimiter, int DelimiterLength)
{



 int i=0;
 int RetVal = 1;
 if (DelimiterLength>buffersize)
 {




  return(0);
 }

 for(i=0;i<DelimiterLength;++i)
 {
  if (buffer[offset+i]!=Delimiter[i])
  {



   RetVal = 0;
   break;
  }
 }
 return(RetVal);
}
-------------

INFO:root:current LLM prompt size: 1416
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 456: complex
c_src:

double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3){

    const double p0 = (-1.0/4.0)*phim3 + (13.0/12.0) * phim2 + (-23.0/12.0) * phim1 + (25.0/12.0)*phi;
    const double p1 = (1.0/12.0)*phim2 + (-5.0/12.0)*phim1 + (13.0/12.0)*phi + (1.0/4.0)*phip1;
    const double p2 = (-1.0/12.0)*phim1 + (7.0/12.0)*phi + (7.0/12.0)*phip1 + (-1.0/12.0)*phip2;
    const double p3 = (1.0/4.0)*phi + (13.0/12.0)*phip1 + (-5.0/12.0)*phip2 + (1.0/12.0)*phip3;


    const double beta0 = (phim3*(547.0*phim3 - 3882.0*phim2 + 4642.0*phim1 - 1854.0*phi)
                         + phim2*(7043.0*phim2 - 17246.0*phim1 + 7042.0*phi)
                         + phim1*(11003.0*phim1 - 9402.0*phi)
                         + 2107.0*phi*phi);
    const double beta1 =(phim2*(267.0*phim2 - 1642.0*phim1 + 1602.0*phi - 494.0*phip1)
                        + phim1*(2843.0*phim1 - 5966.0*phi + 1922.0*phip1)
                        + phi*(3443.0*phi - 2522.0*phip1)
                        + 547.0*phip1*phip1);
    const double beta2 = (phim1*(547.0*phim1 - 2522.0*phi + 1922.0*phip1 - 494.0*phip2)
                         + phi*(3443.0*phi -5966.0*phip1 + 1602.0*phip2)
                         + phip1*(2843.0*phip1 - 1642.0*phip2)
                         + 267.0*phip2* phip2);
    const double beta3 = (phi*(2107.0*phi - 9402.0*phip1 + 7042.0*phip2 - 1854.0*phip3)
                         + phip1*(11003.0*phip1 - 17246.0*phip2 + 4642.0*phip3)
                         + phip2*(7043.0*phip2 - 3882.0*phip3)
                         + 547.0*phip3*phip3);

    const double alpha0 = (1.0/35.0)/((beta0 + 1e-10) * (beta0 + 1e-10));
    const double alpha1 = (12.0/35.0)/((beta1 + 1e-10) * (beta1 + 1e-10));
    const double alpha2 = (18.0/35.0)/((beta2 + 1e-10) * (beta2 + 1e-10));
    const double alpha3 = (4.0/35.0)/((beta3 + 1e-10) * (beta3 + 1e-10));

    const double alpha_sum_inv = 1.0/(alpha0 + alpha1 + alpha2 + alpha3);

    const double w0 = alpha0 * alpha_sum_inv;
    const double w1 = alpha1 * alpha_sum_inv;
    const double w2 = alpha2 * alpha_sum_inv;
    const double w3 = alpha3 * alpha_sum_inv;


    return w0 * p0 + w1 * p1 + w2 * p2 + w3 * p3;
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 457: simple
c_src:
#include <stdio.h>

int valid_piece_or_empty(const int pce)
{
    return (pce >= 0 && pce <= 12);
}
-------------

INFO:root:current LLM prompt size: 506
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 458: medium
c_src:
#include <stdio.h>

int compare(int array1[], int array2[],int col)
{
int result=1;
int c;
for(c=0; c<col; c++)
 {
  if(array1[c]!=array2[c])
  {
   result=0;
   return result;
  }
 }
return result;
}
-------------

INFO:root:current LLM prompt size: 1061
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 459: complex
c_src:





















int Characters__combine_accent(int accent, int letter) {
 switch(accent) {
  case 0x0300:
   switch(letter) {
    case 'a': return 0xE0; case 'e': return 0xE8; case 'i': return 0xEC;
    case 'o': return 0xF2; case 'u': return 0xF9;
    case 'A': return 0xC0; case 'E': return 0xC8; case 'I': return 0xCC;
    case 'O': return 0xD2; case 'U': return 0xD9;
   }
   break;
  case 0x0301:
   switch(letter) {
    case 'a': return 0xE1; case 'e': return 0xE9; case 'i': return 0xED;
    case 'o': return 0xF3; case 'u': return 0xFA; case 'y': return 0xFF;
    case 'A': return 0xC1; case 'E': return 0xC9; case 'I': return 0xCD;
    case 'O': return 0xD3; case 'U': return 0xDA;
   }
   break;
  case 0x0302:
   switch(letter) {
    case 'a': return 0xE2; case 'e': return 0xEA; case 'i': return 0xEE;
    case 'o': return 0xF4; case 'u': return 0xFB;
    case 'A': return 0xC2; case 'E': return 0xCA; case 'I': return 0xCE;
    case 'O': return 0xD4; case 'U': return 0xDB;
   }
   break;
  case 0x0303:
   switch(letter) {
    case 'a': return 0xE3; case 'n': return 0xF1; case 'o': return 0xF5;
    case 'A': return 0xC3; case 'N': return 0xD1; case 'O': return 0xD5;
   }
   break;
  case 0x0308:
   switch(letter) {
    case 'a': return 0xE4; case 'e': return 0xEB; case 'u': return 0xFC;
    case 'o': return 0xF6; case 'i': return 0xEF;
    case 'A': return 0xC4; case 'E': return 0xCB; case 'U': return 0xDC;
    case 'O': return 0xD6; case 'I': return 0xCF;
   }
   break;
  case 0x0327:
   switch(letter) {
    case 'c': return 0xE7; case 'C': return 0xC7;
   }
   break;
 }
 return '?';
}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 460: simple
c_src:
#include <stdio.h>

float get_biggest_of_three(float a, float b, float c)
{
    if ((a > b) && (a > c))
    {
        return a;
    }
    else if ((b > a) && (b > c))
    {
        return b;
    }
    else
    {
        return c;
    }
}
-------------

INFO:root:current LLM prompt size: 555
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 461: medium
c_src:

int lengthOfLongestSubstring(char* s) {
    int max = 0;
    int hashtable[127] = {0};
    int i = 0;
    int j = 0;
    while (s[j] != '\0') {
        if (hashtable[s[j]] >= i + 1)
            i = hashtable[s[j]];
        hashtable[s[j]] = j + 1;
        max = max < j - i + 1 ? j - i + 1: max;
        j++;
    }
    return max;
}
-------------

INFO:root:current LLM prompt size: 479
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 462: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

double dmax(double a, double b)
{
  if(a > b) return a;
  else return b;
}
-------------

INFO:root:current LLM prompt size: 618
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 463: complex
c_src:
#include <stdio.h>

#include <unistd.h>

#include <signal.h>

#include <time.h>

#include <stdlib.h>

#include <syslog.h>

#include <stdarg.h>

#include <string.h>

#include <sys/types.h>

#include <netinet/in.h>

#include <arpa/inet.h>

#include <sys/socket.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <pthread.h>

#include <signal.h>

char *logger_get_level_name(int level)
{
    switch( level ) {
       case 0:
          return "NOTICE";
       case 1:
          return "WARNIN";
       case 2:
          return "DEBUGG";
       case 3:
          return "ERRORR";
       case 4:
          return "VERBOS";
       default:
          return "UNKNOW";
    }
    return "UNKNOW";
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 464: medium
c_src:

int fib(int n) {
 return (n>2)? fib(n-1)+n: 1;
}
-------------

INFO:root:current LLM prompt size: 471
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 465: simple
c_src:

__attribute__((noinline))
int bar(int a, int b) {
   int c;
   c = a % b;
   return c;
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 466: simple
c_src:

char *fb_hGetExePath( char *dst, int maxlen )
{

 dst[0] = '\0';
 return dst;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 467: simple
c_src:

int do_560() { return 560; }
-------------

INFO:root:current LLM prompt size: 882
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 468: complex
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <assert.h>

int dayOfWeek (int doomsday, int leapYear, int month, int day) {
 int dayOfWeek = 0;
 int dateOfDoomsday = 0;

 if (month == 1 && leapYear == 1) {
   dateOfDoomsday=4;
 }else if (month == 1 && leapYear == 0) {
   dateOfDoomsday=3;
 }else if (month == 2 && leapYear == 1) {
   dateOfDoomsday=29;
 }else if (month == 2 && leapYear == 0) {
   dateOfDoomsday=28;
 }else if (month == 3) {
   dateOfDoomsday=7;
 }else if (month == 4) {
   dateOfDoomsday=4;
 }else if (month == 5) {
   dateOfDoomsday=2;
 }else if (month == 6) {
   dateOfDoomsday=6;
 }else if (month == 7) {
   dateOfDoomsday=4;
 }else if (month == 8) {
   dateOfDoomsday=8;
 }else if (month == 9) {
   dateOfDoomsday=5;
 }else if (month == 10) {
   dateOfDoomsday=3;
 }else if (month == 11) {
   dateOfDoomsday=7;
 }else if (month == 12) {
   dateOfDoomsday=5;
 }
 dayOfWeek = doomsday;
 if (day <dateOfDoomsday) {
  dayOfWeek = (((doomsday - (dateOfDoomsday-day))+42)% 7);
 } else if (day > dateOfDoomsday) {
   dayOfWeek = (((doomsday + (day-dateOfDoomsday))+42)% 7);
 }
   return (dayOfWeek);
}
-------------

INFO:root:current LLM prompt size: 485
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 469: simple
c_src:
#include <stdbool.h>

bool isLittleEndian() {
    union {
        int theInteger;
        char singleByte;
    } endianTest;
    endianTest.theInteger = 1;
    return endianTest.singleByte;
}
-------------

INFO:root:current LLM prompt size: 485
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 470: medium
c_src:

int f(long* v, long n, long c) {
    for (long i=0; i<n; i++)
        if (v[i]>n/c*i) return 0;
    return 1;
}
-------------

INFO:root:current LLM prompt size: 486
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 471: medium
c_src:
#include <stdio.h>

int pot(int a, int b)
{
 int co = 0, ac = 1;
 while (co < b)
 {
  co++;
  ac = ac * a;
 }
 return ac;
}
-------------

INFO:root:current LLM prompt size: 450
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 472: simple
c_src:

int do_542() { return 542; }
-------------

INFO:root:current LLM prompt size: 517
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 473: medium
c_src:
#include <stdio.h>

#include <ctype.h>

#include <stdlib.h>

#include <stdbool.h>

int min(int num_seq[5]) {

  int min = num_seq[0];

  for (int i = 1; i < 5; i++) {
    if (num_seq[i] < min) min = num_seq[i];
  }
  return(min);
}
-------------

INFO:root:current LLM prompt size: 549
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 474: medium
c_src:
#include <stdio.h>

#include <stdbool.h>

bool is_bouncy(int n) {
    bool up = false, down = false;
    int lasti = n % 10;
    n = n/10;
    while(n) {
 int i = n % 10;
 n = n/10;
 if (i > lasti)
     up = true;
 if (i < lasti)
     down = true;
 if (up && down)
     return true;
 lasti = i;
    }
    return false;
}
-------------

INFO:root:current LLM prompt size: 507
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 475: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

int eval_op(int n1,int n2,char op){
 switch(op){
  case '+':
   return n1 + n2;
  case '*':
   return n1 * n2;
  case '/':
   return n1 / n2;
 }
}
-------------

INFO:root:current LLM prompt size: 455
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 476: simple
c_src:

int http_trace(int connection,const char *host){

  return 0;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 477: simple
c_src:

unsigned int even(unsigned int target){
 return target/2;
}
-------------

INFO:root:current LLM prompt size: 461
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 478: simple
c_src:

signed char explicit_unsigned_int_to_signed_char(unsigned int src) {
  return (signed char)src;
}
-------------

INFO:root:current LLM prompt size: 482
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 479: simple
c_src:
#include <stdio.h>

int my_str_length(const char *p)
{
    int count=0;
    while(*p)
    {
        count +=1;
        p++;
    }
    return count;
}
-------------

INFO:root:current LLM prompt size: 492
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 480: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <math.h>

#include <time.h>

#include <string.h>

int GCD(long x, long y) {
 return y == 0 ? x : GCD(y, x % y) ;
}
-------------

INFO:root:current LLM prompt size: 466
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 481: simple
c_src:
#include <stdio.h>

#include <stdlib.h>

int summator(int i, float f){
 return i+(int)(f);
}
-------------

INFO:root:current LLM prompt size: 515
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 482: simple
c_src:
#include <fcntl.h>

#include <stdio.h>

#include <sys/mman.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/stat.h>

void trunc2ascii (char *str) {
  while (*str != 0) {
    *str = *str & 0x7f;
    str++;
  }
}
-------------

INFO:root:current LLM prompt size: 520
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 483: medium
c_src:
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

int basic_sanitize(char *str)
{
 if (!str)
  return -1;


 while (*str) {

  switch (*str) {
  case '\\':
  case '\'':
  case '`':
  case '"':
  case '%':
   *str = ' ';
  }
  str++;
 }

 return 0;
}
-------------

INFO:root:current LLM prompt size: 507
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 484: simple
c_src:
#include <math.h>

double pp_sqrt(double n)
{
# 91 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/wanborj/PSEFM/refs/heads/master/benchmark/sw/lib/c/math.c"
}
-------------

INFO:root:current LLM prompt size: 472
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 485: simple
c_src:
#include <stdio.h>

#include <string.h>

#include <ctype.h>

char codeToLetter(char code) {
 return (char) code + 'A';
}
-------------

INFO:root:current LLM prompt size: 462
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 486: simple
c_src:

unsigned int explicit_signed_char_to_unsigned_int(signed char src) {
  return (unsigned int)src;
}
-------------

INFO:root:current LLM prompt size: 452
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 487: simple
c_src:

int foo(int a){
  return a + 1;
}
-------------

INFO:root:current LLM prompt size: 451
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 488: simple
c_src:

int HelpItem25( void )
{

return 0;}
-------------

INFO:root:current LLM prompt size: 470
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 489: simple
c_src:

















int ILibBase64EncodeLength(const int inputLen)
{
 return ((inputLen * 4) / 3) + 5;
}
-------------

INFO:root:current LLM prompt size: 487
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 490: simple
c_src:

unsigned short RdFwVr( void )
{
 unsigned short UsVerVal ;

 UsVerVal = (unsigned short)((0x0A << 8) | 0x03 ) ;
 return( UsVerVal ) ;
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 491: simple
c_src:
#include <stdio.h>

double celsius(double fahrenheit) {
 return (fahrenheit - 32.0) * (5.0 / 9.0);
}
-------------

INFO:root:current LLM prompt size: 474
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 492: medium
c_src:
#include <stdio.h>

int factorial(int n)
{
 if (n <= 1)
  return n;
 else
  return n * factorial(n - 1);
}
-------------

INFO:root:current LLM prompt size: 516
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 493: medium
c_src:
#include <stdio.h>

double EstimatePi(int iterations)
{
    double pi = 1;

    for(int i = 3; i < iterations * 2; i = i + 4)
    {
        pi = pi - (1.0/i) + (1.0/(i + 2.0));
    }

    return pi * 4;
}
-------------

INFO:root:current LLM prompt size: 457
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 494: simple
c_src:
#include <stdio.h>

int square(int y )
{
   return y * y;
}
-------------

INFO:root:current LLM prompt size: 617
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 495: complex
c_src:
#include <stdio.h>	//FILE*

#include <time.h>	//clock_t, clock()

float TLAString_toFloat(const char* string){
 const char sign= (*string);
 float value = 0;
 if(sign=='-' || sign=='+') string++;

 while((*string)!='\0' && (*string)!='.'){
  value = (value * 10.0f) + ((*string) - 48.0f);
  string++;
 }

 if((*string)=='.'){
  float factorDivisor = 10.0f;
  string++;
  while((*string)!='\0'){
   value += (((*string) - 48.0f) / factorDivisor);
   factorDivisor *= 10.0f;
   string++;
  }
 }

 if(sign=='-') value = -value;

 return value;
}
-------------

INFO:root:current LLM prompt size: 545
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 496: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <math.h>

#include <ctype.h>

unsigned char toint(char c)
{
    if ( c >= '0' && c <= '9' ) return(c-'0');
    else if ( c >= 'a' && c <= 'f' ) return(c-'a'+10);
    else if ( c >= 'A' && c <= 'F' ) return(c-'A'+10);
    else return(0);
}
-------------

INFO:root:current LLM prompt size: 533
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 497: medium
c_src:
#include <stdio.h>

#include <stdlib.h>

long magnitude(double x) {
    double ref = 1.0;
    long xmag = 0;
    long refmag = 0;

    while (ref != 0) {
 ref = ref/10.0;
 refmag++;
    }

    while (x != 0) {
 x = x/10.0;
 xmag++;
    }
    return xmag - refmag;
}
-------------

INFO:root:current LLM prompt size: 468
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 498: simple
c_src:

int roundNo(float num)
{
    return num < 0 ? num - 0.5 : num + 0.5;
}
-------------

INFO:root:current LLM prompt size: 473
INFO:httpx:HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
INFO:root:Case 499: medium
c_src:
#include <stdio.h>

#include <math.h>

int pantagon(int i) {
    return i * (3 * i - 1) / 2;
}
-------------

INFO:root:Simple list: [0, 1, 2, 7, 8, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 111, 112, 116, 118, 120, 122, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 157, 158, 160, 163, 164, 165, 167, 171, 173, 175, 177, 178, 179, 181, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 197, 200, 201, 203, 204, 206, 207, 208, 210, 211, 213, 215, 216, 217, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 268, 269, 271, 272, 273, 275, 276, 279, 280, 281, 282, 286, 287, 289, 291, 292, 294, 296, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 321, 323, 325, 326, 327, 330, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 354, 355, 357, 360, 361, 365, 366, 369, 370, 371, 372, 374, 376, 377, 378, 385, 388, 389, 390, 391, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 420, 422, 424, 426, 427, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 450, 451, 453, 457, 460, 462, 465, 466, 467, 469, 472, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 498]
INFO:root:Medium list: [4, 5, 16, 19, 23, 26, 30, 32, 34, 40, 45, 46, 49, 50, 53, 55, 56, 67, 74, 78, 84, 86, 87, 98, 103, 109, 110, 113, 114, 115, 117, 121, 124, 127, 140, 148, 153, 156, 159, 161, 162, 166, 168, 169, 170, 172, 174, 176, 180, 183, 187, 194, 196, 198, 199, 212, 218, 219, 224, 228, 234, 239, 240, 241, 246, 249, 250, 258, 261, 266, 283, 288, 290, 293, 295, 297, 298, 305, 315, 318, 319, 320, 322, 324, 328, 329, 331, 336, 344, 347, 352, 353, 356, 358, 359, 362, 364, 367, 379, 382, 383, 386, 387, 393, 395, 397, 399, 417, 419, 425, 428, 429, 430, 431, 434, 442, 443, 444, 452, 454, 455, 458, 461, 464, 470, 471, 473, 474, 475, 480, 483, 492, 493, 496, 497, 499]
INFO:root:Complex list: [3, 6, 9, 10, 47, 60, 73, 76, 88, 95, 108, 119, 126, 128, 145, 182, 202, 205, 209, 214, 220, 260, 267, 270, 274, 277, 278, 284, 285, 301, 311, 333, 348, 349, 363, 368, 373, 375, 380, 381, 384, 410, 414, 421, 423, 447, 456, 459, 463, 468, 495]
INFO:root:End time: 2024-09-17 22:05:01.090678
