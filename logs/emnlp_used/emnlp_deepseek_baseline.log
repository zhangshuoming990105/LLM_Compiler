INFO:root:log file created!
INFO:root:Start time: 2024-08-17 23:48:55.210110
INFO:root:LLM default prompt size: 274
INFO:root:C code :



double linear_interp(double x,double lx,double ux,double ly,double uy) {
  return((x-lx)/(ux-lx)*(uy-ly)+ly);
}
INFO:root:x86 code: 

	.text
	.globl	linear_interp
	.type	linear_interp, @function
linear_interp:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	%xmm2, -24(%rbp)
	movsd	%xmm3, -32(%rbp)
	movsd	%xmm4, -40(%rbp)
	movsd	-8(%rbp), %xmm0
	movsd	-16(%rbp), %xmm1
	subsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1
	movsd	-32(%rbp), %xmm2
	subsd	%xmm2, %xmm1
	movaps	%xmm0, %xmm2
	mulsd	%xmm2, %xmm1
	movsd	-40(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	movaps	%xmm1, %xmm0
	leave
	ret
.LFE0:
	.size	linear_interp, .-linear_interp

INFO:root:Local error rate: 100.0%
INFO:root:CASE 0 failed
INFO:root:C code :

double QuinticEaseIn(double p)
{
    return p * p * p * p * p;
}
INFO:root:x86 code: 

	.text
	.globl	QuinticEaseIn
	.type	QuinticEaseIn, @function
QuinticEaseIn:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	-8(%rbp), %xmm0
	movapd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm0
	popq	%rbp
	ret

INFO:root:Local error rate: 100.0%
INFO:root:CASE 1 failed
INFO:root:C code :
#include <stdio.h>

int dec_lv(char x, char c, int lv)
{
 if (x == c)
  --lv;

 return lv;
}
INFO:root:x86 code: 

	.text
	.globl	dec_lv
	.type	dec_lv, @function
dec_lv:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	movb	%sil, -2(%rbp)
	movl	%edx, -8(%rbp)
	movb	-1(%rbp), %al
	cmpb	-2(%rbp), %al
	jne	.L2
	subl	$1, -8(%rbp)
.L2:
	movl	-8(%rbp), %eax
	popq	%rbp
	ret
.LFE0:
	.size	dec_lv, .-dec_lv
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 2 succeeded
INFO:root:C code :
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <unistd.h>

#include <limits.h>

#include <errno.h>

#include <stdarg.h>

#include <fcntl.h>

#include <time.h>

#include <signal.h>

#include <dirent.h>

#include <pwd.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <sys/wait.h>

int
prefix_of(char *special, char *s)
{
 for (; *special != '\0'; ++special)
  if (*special != *s++)
   return 0;
 return (*s == '=' || *s == '\0');
}
INFO:root:x86 code: 

	.text
	.globl	prefix_of
	.type	prefix_of, @function
prefix_of:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	jmp	.L2
.L3:
	addq	$1, -32(%rbp)
.L2:
	movzbl	(%rax), %edx
	movzbl	(%rax), %ecx
	cmpb	%cl, %dl
	je	.L4
	movl	$0, %eax
	popq	%rbp
	ret
.L4:
	addq	$1, -24(%rbp)
	addq	$1, %rax
	cmpb	$0, (%rax)
	jne	.L3
	movzbl	(%rax), %edx
	movzbl	(%rax), %ecx
	cmpb	%cl, %dl
	je	.L5
	movl	$0, %eax
	popq	%rbp
	ret
.L5:
	movl	$1, %eax
	popq	%rbp
	ret
	.size	prefix_of, .-prefix_of
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 100.0%
INFO:root:CASE 3 failed
INFO:root:C code :
#include <stdio.h>

#include <stdlib.h>

#include <memory.h>

int* sub(int* a, int sizeA, int* b, int sizeB, int* resultSize){

}
INFO:root:x86 code: 

	.text
	.globl	sub
	.type	sub, @function
sub:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movq	%r8, -32(%rbp)
	leave
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 4 succeeded
INFO:root:C code :

void vec_mpy(int y[], const short x[], short scaler)
{
 int i;

 for (i = 0; i < 150; i++)
   y[i] += ((scaler * x[i]) >> 31);
}
INFO:root:x86 code: 

	.text
	.globl	vec_mpy
	.type	vec_mpy, @function
vec_mpy:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L2
.L3:
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imull	-20(%rbp), %edx
	sarl	$31, %edx
	addq	%rdx, %rax
	sarq	$31, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edx
	movq	-8(%rbp), %rax
	movl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	addl	$1, -4(%rbp)
.L2:
	cmpl	$149, -4(%rbp)
	jle	.L3
	nop
	leave
	ret
.LFE0:
	.size	vec_mpy, .-vec_mpy

WARNING:root:WARNING: code failed to execute for input 0 in case 5
WARNING:root:WARNING: code failed to execute for input 1 in case 5
WARNING:root:WARNING: code failed to execute for input 2 in case 5
WARNING:root:WARNING: code failed to execute for input 3 in case 5
WARNING:root:WARNING: code failed to execute for input 4 in case 5
WARNING:root:WARNING: code failed to execute for input 5 in case 5
WARNING:root:WARNING: code failed to execute for input 6 in case 5
WARNING:root:WARNING: code failed to execute for input 7 in case 5
WARNING:root:WARNING: code failed to execute for input 8 in case 5
WARNING:root:WARNING: code failed to execute for input 9 in case 5
INFO:root:Local error rate: 100.0%
INFO:root:CASE 5 failed
INFO:root:C code :

int sign_int(int num)
{
  return (( ((((num))) <= (((0)))) ? ( ((((num))) < (((0)))) ? ((-1)) : ((0)) ) : ((1)) ));
}
INFO:root:x86 code: 

	.text
	.globl	sign_int
	.type	sign_int, @function
sign_int:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	jle	.L2
	movl	$1, %eax
	jmp	.L3
.L2:
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	jge	.L4
	movl	$-1, %eax
	jmp	.L3
.L4:
	movl	$0, %eax
.L3:
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 6 succeeded
INFO:root:C code :

int big_endian(
    void)
{
    union {
        long l;
        char c[sizeof(long)];
    } u;

    u.l = 1;

    return (u.c[sizeof(long) - 1] == 1);
}
INFO:root:x86 code: 

	.text
	.globl	big_endian
	.type	big_endian, @function
big_endian:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$1, -4(%rbp)
	movq	-4(%rbp), %rax
	movb	%al, -5(%rbp)
	movb	-5(%rbp), %al
	cmpb	$1, %al
	sete	%al
	popq	%rbp
	ret
.LFE0:

INFO:root:Local error rate: 100.0%
INFO:root:CASE 7 failed
INFO:root:C code :

int _isatty(int fd)
{
  (void)fd;
  return (1);
}
INFO:root:x86 code: 

	.text
	.globl	_isatty
	.type	_isatty, @function
_isatty:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	$1, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 8 succeeded
INFO:root:C code :

extern inline int
JKMarray_idx (const int J, const int K, const int M)
{
  return (((4 * J * J + 5) * J) / 3 + 2 * J * J + K * (2 * J + 1) + M);
}
INFO:root:x86 code: 

	.text
	.globl	JKMarray_idx
	.type	JKMarray_idx, @function
JKMarray_idx:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)  # J
	movl	%esi, -24(%rbp)  # K
	movl	%edx, -28(%rbp)  # M

	movl	-20(%rbp), %eax  # eax = J
	imull	%eax, %eax       # eax = J * J
	leal	4(%rax,%rax,2), %ecx  # ecx = 4 * J * J + 4
	movl	%ecx, %eax        # eax = 4 * J * J + 4
	leal	5(%rax), %edx     # edx = 4 * J * J + 5 + 5
	movl	%edx, %eax        # eax = 4 * J * J + 5
	imull	-20(%rbp), %eax   # eax = J * (4 * J * J + 5)
	movl	%eax, %ecx        # ecx = J * (4 * J * J + 5)
	leal	2(%ecx), %edx     # edx = J * (4 * J * J + 5) + 2
	movl	%edx, %eax        # eax = J * (4 * J * J + 5) + 2

	movl	-20(%rbp), %ecx   # ecx = J
	imull	%ecx, %ecx       # ecx = J * J
	leal	2(%ecx,%ecx,2), %ecx  # ecx = 2 * J * J + 2
	addl	%ecx, %eax        # eax = J * (4 * J * J + 5) + 2 + 2 * J * J + 2

	movl	-24(%rbp), %ecx   # ecx = K
	movl	-20(%rbp), %edx   # edx = J
	addl	%edx, %edx        # edx = 2 * J
	addl	%edx, %edx        # edx = 2 * J + 1
	imull	%ecx, %edx       # edx = K * (2 * J + 1)
	addl	%edx, %eax        # eax = J * (4 * J * J + 5) + 2 + 2 * J * J + K * (2 * J + 1)

	movl	-28(%rbp), %ecx   # ecx = M
	addl	%ecx, %eax        # eax = J * (4 * J * J + 5) + 2 + 2 * J * J + K * (2 * J + 1) + M

	popq	%rbp
	ret

INFO:root:Local error rate: 100.0%
INFO:root:CASE 9 failed
INFO:root:C code :

long sign_long(long num)
{
  return (( ((((num))) <= (((0)))) ? ( ((((num))) < (((0)))) ? ((-1)) : ((0)) ) : ((1)) ));
}
INFO:root:x86 code: 

	.text
	.globl	sign_long
	.type	sign_long, @function
sign_long:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, %rax
	jle	.L2
	movl	$1, %eax
	jmp	.L3
.L2:
	movq	-8(%rbp), %rax
	cmpq	$0, %rax
	jge	.L4
	movl	$-1, %eax
	jmp	.L3
.L4:
	movl	$0, %eax
.L3:
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 10 succeeded
INFO:root:C code :

int dmp_cm_edit_config(void)
{
 return 0;
}
INFO:root:x86 code: 

	.text
	.globl	dmp_cm_edit_config
	.type	dmp_cm_edit_config, @function
dmp_cm_edit_config:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 11 succeeded
INFO:root:C code :

int _cmp (int _a, int _b) {
 int a = _a;
 int b = _b;
 return (a > b ? (-1) : (1));
}
INFO:root:x86 code: 

	.text
	.globl	_cmp
	.type	_cmp, @function
_cmp:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jle	.L2
	movl	$-1, %eax
	jmp	.L3
.L2:
	cmpl	$0, -4(%rbp)
	jne	.L4
	cmpl	$0, -8(%rbp)
	jne	.L4
	movl	$0, %eax
	jmp	.L3
.L4:
	movl	$1, %eax
.L3:
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 12 succeeded
INFO:root:C code :

int safe(void) {
    extern int q;
    int lp;
    return 0;
}
INFO:root:x86 code: 

	.text
	.globl	safe
	.type	safe, @function
safe:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 13 succeeded
INFO:root:C code :

int HelpItem146( void )
{

 return 0;
}
INFO:root:x86 code: 

	.text
	.globl	HelpItem146
	.type	HelpItem146, @function
HelpItem146:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 14 succeeded
INFO:root:C code :

int update_program_status(int aggregated_dump) {}
INFO:root:x86 code: 

	.text
	.globl	update_program_status
	.type	update_program_status, @function
update_program_status:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	nop
	popq	%rbp
	ret
.LFE0:
	.size	update_program_status, .-update_program_status

INFO:root:Local error rate: 0.0%
INFO:root:CASE 15 succeeded
INFO:root:C code :
#include <stdlib.h>

int printArray(int arr[], int n)
{
    int i=1;
    while(arr[i]==arr[0])
    {
        i++;
    }
    return i;
}
INFO:root:x86 code: 

	.text
	.globl	printArray
	.type	printArray, @function
printArray:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$1, -4(%rbp)
	jmp	.L2
.L3:
	movl	-4(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %edx
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jne	.L4
	addl	$1, -4(%rbp)
.L2:
	movl	-4(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	jl	.L3
.L4:
	movl	-4(%rbp), %eax
	leave
	ret
	.size	printArray, .-printArray
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

WARNING:root:WARNING: code failed to execute for input 0 in case 16
WARNING:root:WARNING: code failed to execute for input 1 in case 16
WARNING:root:WARNING: code failed to execute for input 2 in case 16
WARNING:root:WARNING: code failed to execute for input 3 in case 16
WARNING:root:WARNING: code failed to execute for input 4 in case 16
WARNING:root:WARNING: code failed to execute for input 5 in case 16
WARNING:root:WARNING: code failed to execute for input 6 in case 16
WARNING:root:WARNING: code failed to execute for input 7 in case 16
WARNING:root:WARNING: code failed to execute for input 8 in case 16
WARNING:root:WARNING: code failed to execute for input 9 in case 16
INFO:root:Local error rate: 100.0%
INFO:root:CASE 16 failed
INFO:root:C code :

int
COLORS()
{

    return 256;
}
INFO:root:x86 code: 

	.text
	.globl	COLORS
	.type	COLORS, @function
COLORS:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$256, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 17 succeeded
INFO:root:C code :

int bar( int x )
{
   return x+1;
}
INFO:root:x86 code: 

	.text
	.globl	bar
	.type	bar, @function
bar:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 18 succeeded
INFO:root:C code :
#include <stdio.h>

#include <time.h>

#include <string.h>

#include <stdlib.h>

#include <assert.h>

char *skipSpaces(char *pc)
{
 while((*pc == ' ' || *pc == '\n' || *pc == '\t' || *pc == '\r') &&
   *pc != '\0')
  pc++;

 return pc;
}
INFO:root:x86 code: 

	.text
	.globl	skipSpaces
	.type	skipSpaces, @function
skipSpaces:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	jmp	.L2
.L3:
	addq	$1, -8(%rbp)
.L2:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$32, %al
	je	.L3
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	je	.L3
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$9, %al
	je	.L3
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$13, %al
	je	.L3
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L4
.L3:
	movq	-8(%rbp), %rax
	popq	%rbp
	ret
.L4:
	nop
	popq	%rbp
	ret
.LFE0:
	.size	skipSpaces, .-skipSpaces
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

WARNING:root:CASE 19 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s:35: Error: symbol `.L3' is already defined

WARNING:root:ret.stdout: 
INFO:root:C code :

char *init_buffer(char *buffer)
{
 int i;

 i = 0;
 while (buffer[i])
  buffer[i++] = 0;
 return (buffer);
}
INFO:root:x86 code: 

	.text
	.globl	init_buffer
	.type	init_buffer, @function
init_buffer:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L2
.L3:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movb	$0, (%rax,%rdx)
	addl	$1, -4(%rbp)
.L2:
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rdx
	cmpb	$0, (%rax,%rdx)
	jne	.L3
	movq	-24(%rbp), %rax
	popq	%rbp
	ret
.LFE0:
	.size	init_buffer, .-init_buffer

INFO:root:Local error rate: 0.0%
INFO:root:CASE 20 succeeded
INFO:root:C code :

int GetAnswer() {
  return 42;
}
INFO:root:x86 code: 

	.text
	.globl	GetAnswer
	.type	GetAnswer, @function
GetAnswer:
.LFB0:
	endbr64
	movl	$42, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 21 succeeded
INFO:root:C code :

unsigned char padding(void)
{
  return 0xff;
}
INFO:root:x86 code: 

	.text
	.globl	padding
	.type	padding, @function
padding:
.LFB0:
	endbr64
	movl	$255, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 22 succeeded
INFO:root:C code :
#include <stdio.h>

#include <stdlib.h>

int getPrec(char op) {

    switch(op) {
        case '+':
        case '-':
        return 1;

        case '*':
        case '/':
        return 2;


        case '(':
        case ')':
        return 3;

        default:
        return 0;
    }
}
INFO:root:x86 code: 

	.text
	.globl	getPrec
	.type	getPrec, @function
getPrec:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	movb	-1(%rbp), %al
	cmpb	$43, %al
	je	.L2
	cmpb	$45, %al
	je	.L2
	cmpb	$42, %al
	je	.L4
	cmpb	$47, %al
	je	.L4
	cmpb	$40, %al
	je	.L6
	cmpb	$41, %al
	je	.L6
	movl	$0, %eax
	jmp	.L7
.L2:
	movl	$1, %eax
	jmp	.L7
.L4:
	movl	$2, %eax
	jmp	.L7
.L6:
	movl	$3, %eax
.L7:
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 23 succeeded
INFO:root:C code :
#include <sys/stat.h>

#include <errno.h>

#include <sys/times.h>

int _isatty(int file)
{
  return 0;
}
INFO:root:x86 code: 

	.file	"isatty.c"
	.text
	.globl	_isatty
	.type	_isatty, @function
_isatty:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	$0, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	_isatty, .-_isatty
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 24 succeeded
INFO:root:C code :
#include <stdlib.h>

#include <stdio.h>

#include <string.h>

#include <errno.h>

char flip_bit (char bit_character) {
 if ('0' == bit_character)
  return '1';
 else
  return '0';
}
INFO:root:x86 code: 

	.text
	.globl	flip_bit
	.type	flip_bit, @function
flip_bit:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	cmpb	$48, -1(%rbp)
	jne	.L2
	movb	$49, -1(%rbp)
	jmp	.L3
.L2:
	movb	$48, -1(%rbp)
.L3:
	movzbl	-1(%rbp), %eax
	popq	%rbp
	ret
.LFE0:
	.size	flip_bit, .-flip_bit
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 25 succeeded
INFO:root:C code :

int
foo (int a, int b)
{
  int t;

  if (b)
    {
      if (a)
 t = 3;
      else
 t = 5;

      a = 0;
    }
  else
    t = 7;

  return t;
}
INFO:root:x86 code: 

	.text
	.globl	foo
	.type	foo, @function
foo:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$0, -8(%rbp)
	je	.L2
	cmpl	$0, -4(%rbp)
	jne	.L3
	movl	$5, -12(%rbp)
	jmp	.L4
.L3:
	movl	$3, -12(%rbp)
.L4:
	movl	$0, -4(%rbp)
	jmp	.L2
.L5:
	movl	$7, -12(%rbp)
.L2:
	movl	-12(%rbp), %eax
	leave
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 26 succeeded
INFO:root:C code :
#include <math.h>

#include <stddef.h>

double opTimes(double lhs, double rhs) { return lhs * rhs; }
INFO:root:x86 code: 

	.text
	.globl	opTimes
	.type	opTimes, @function
opTimes:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	mulsd	-8(%rbp), -16(%rbp)
	movsd	-16(%rbp), %xmm0
	popq	%rbp
	ret

WARNING:root:CASE 27 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s:12: Error: operand size mismatch for `mulsd'

WARNING:root:ret.stdout: 
INFO:root:C code :

float raw_linear_derivative_at( float y ) {
  return 1.0;
}
INFO:root:x86 code: 

	.text
	.globl	raw_linear_derivative_at
	.type	raw_linear_derivative_at, @function
raw_linear_derivative_at:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movss	%xmm0, -4(%rbp)
	movss	.LC0(%rip), %xmm0
	popq	%rbp
	ret
.LC0:
	.align 4
	.word	0
	.word	1077936128

INFO:root:Local error rate: 100.0%
INFO:root:CASE 28 failed
INFO:root:C code :

int bitCount(int x) {
  return 2;
}
INFO:root:x86 code: 

	.text
	.globl	bitCount
	.type	bitCount, @function
bitCount:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$2, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 29 succeeded
INFO:root:C code :



















int xtoi(char *p)
{
 int curr;
 int res = 0;

 while (*p)
 {
  curr = ((*p) >= '0' && (*p) <= '9' ? (*p) - '0' : (*p) >= 'A' && (*p) <= 'F' ? (*p) - 'A' + 10 : (*p) >= 'a' && (*p) <= 'f' ? (*p) - 'a' + 10 : -1);
  if (curr == -1) break;
  res = res * 0x10 + curr;
  p++;
 }

 return res;
}
INFO:root:x86 code: 

	.text
	.globl	xtoi
	.type	xtoi, @function
xtoi:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L2
.L5:
	movzbl	(%rax), %edx
	movl	$0, %ecx
	cmpl	%ecx, %edx
	je	.L3
	movl	$48, %ecx
	cmpl	%ecx, %edx
	jge	.L4
	movl	$65, %ecx
	cmpl	%ecx, %edx
	jge	.L6
	movl	$97, %ecx
	cmpl	%ecx, %edx
	jge	.L7
	movl	$-1, %edx
	jmp	.L8
.L4:
	movl	$57, %ecx
	cmpl	%ecx, %edx
	jg	.L9
	movl	%edx, %ecx
	subl	$48, %ecx
	jmp	.L10
.L6:
	movl	$70, %ecx
	cmpl	%ecx, %edx
	jg	.L11
	movl	%edx, %ecx
	subl	$55, %ecx
	jmp	.L10
.L7:
	movl	$102, %ecx
	cmpl	%ecx, %edx
	jg	.L12
	movl	%edx, %ecx
	subl	$87, %ecx
	jmp	.L10
.L9:
	movl	$65, %ecx
	cmpl	%ecx, %edx
	jge	.L13
	movl	$97, %ecx
	cmpl	%ecx, %edx
	jge	.L14
	movl	$-1, %edx
	jmp	.L8
.L11:
	movl	$70, %ecx
	cmpl	%ecx, %edx
	jg	.L15
	movl	$-1, %edx
	jmp	.L8
.L12:
	movl	$102, %ecx
	cmpl	%ecx, %edx
	jg	.L16
	movl	$-1, %edx
	jmp	.L8
.L13:
	movl	$-1, %edx
	jmp	.L8
.L14:
	movl	$-1, %edx
	jmp	.L8
.L15:
	movl	$-1, %edx
	jmp	.L8
.L16:
	movl	$-1, %edx
	jmp	.L8
.L10:
	movl	%edx, %esi
	movl	-8(%rbp), %eax
	imull	$16, %eax
	addl	%esi, %eax
	movl	%eax, -8(%rbp)
	addq	$1, -24(%rbp)
.L2:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L5
	movl	-8(%rbp), %eax
	popq	%rbp
	ret
.LFE0:
	.size	xtoi, .-xtoi

WARNING:root:CASE 30 failed to assemble the code to executable!
WARNING:root:ret.stderr: /usr/bin/ld: warning: /tmp/ccrQcCdQ.o: missing .note.GNU-stack section implies executable stack
/usr/bin/ld: NOTE: This behaviour is deprecated and will be removed in a future version of the linker
/usr/bin/ld: /tmp/ccrQcCdQ.o: in function `xtoi':
(.text+0x2b): undefined reference to `.L3'
/usr/bin/ld: (.text+0x50): undefined reference to `.L8'
/usr/bin/ld: (.text+0x9f): undefined reference to `.L8'
/usr/bin/ld: (.text+0xb2): undefined reference to `.L8'
/usr/bin/ld: (.text+0xc5): undefined reference to `.L8'
/usr/bin/ld: (.text+0xcf): undefined reference to `.L8'
/usr/bin/ld: /tmp/ccrQcCdQ.o:(.text+0xd9): more undefined references to `.L8' follow
collect2: error: ld returned 1 exit status

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <string.h>

#include <stdlib.h>

#include <assert.h>

int DummyCDInit(__attribute ((unused)) const char *cdrom_name)
{



 return 0;
}
INFO:root:x86 code: 

	.text
	.globl	DummyCDInit
	.type	DummyCDInit, @function
DummyCDInit:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret
.LFE0:
	.size	DummyCDInit, .-DummyCDInit
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 31 succeeded
INFO:root:C code :
#include <stdio.h>

#include <time.h>

#include <stdlib.h>

#include <ctype.h>

int retPosVector(char letra, char alfabeto[]) {
 int i;

 for( i = 0; alfabeto[i]; i++) {
  if(alfabeto[i] == letra) {
   return i;
  }
 }
}
INFO:root:x86 code: 

	.text
	.globl	retPosVector
	.type	retPosVector, @function
retPosVector:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L2
.L3:
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	-4(%rbp), %al
	je	.L4
.L2:
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	testb	%al, %al
	jne	.L3
	movl	$-1, %eax
	jmp	.L5
.L4:
	movl	-8(%rbp), %eax
.L5:
	popq	%rbp
	ret
	.size	retPosVector, .-retPosVector
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

WARNING:root:WARNING: code execute timeout for input 0 in case 32
WARNING:root:WARNING: code execute timeout for input 1 in case 32
WARNING:root:WARNING: code execute timeout for input 2 in case 32
WARNING:root:WARNING: code execute timeout for input 3 in case 32
WARNING:root:WARNING: code execute timeout for input 4 in case 32
WARNING:root:WARNING: code execute timeout for input 5 in case 32
WARNING:root:WARNING: code execute timeout for input 6 in case 32
WARNING:root:WARNING: code execute timeout for input 7 in case 32
WARNING:root:WARNING: code execute timeout for input 8 in case 32
WARNING:root:WARNING: code execute timeout for input 9 in case 32
INFO:root:Local error rate: 100.0%
INFO:root:CASE 32 failed
INFO:root:C code :

unsigned int CgosStrLen(const char *s)
  {
  const char *ss=s;
  if (!s) return 0;
  while (*s++);
  return s-ss-1;
  }
INFO:root:x86 code: 

	.text
	.globl	CgosStrLen
	.type	CgosStrLen, @function
CgosStrLen:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	jmp	.L2
.L3:
	addq	$1, -8(%rbp)
.L2:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L3
	movq	-8(%rbp), %rax
	leaq	-1(%rax), %rdx
	movq	-8(%rbp), %rax
	subq	%rdi, %rax
	subq	$1, %rax
	cmpq	%rax, %rdx
	je	.L4
	movq	-8(%rbp), %rax
	subq	-8(%rbp), %rax
	subq	$1, %rax
.L4:
	popq	%rbp
	ret

INFO:root:Local error rate: 100.0%
INFO:root:CASE 33 failed
INFO:root:C code :
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <math.h>

#include <time.h>

#include <omp.h>

#include <unistd.h>

int checkExpDesignator(char *str, int len)
{
 int i,n=0;

 for (i=0; i<len; i++)
 {
  if (str[i]=='D')
  {
   n++;
   str[i] = 'E';
  }
 }

 return(n);
}
INFO:root:x86 code: 

	.text
	.globl	checkExpDesignator
	.type	checkExpDesignator, @function
checkExpDesignator:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcc, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	rand_r@PLT
	movl	$0, %eax
	call	omp_get_thread_num@PLT
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	cltq
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rd
WARNING:root:CASE 34 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s: Warning: end of file not at end of a line; newline inserted
tmp.s:88: Error: bad register name `%rcc'
tmp.s:198: Error: bad register name `%rd'

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <stddef.h>

#include <stdint.h>

int oc_storage_config(const char *store) {
    return -1;
}
INFO:root:x86 code: 

	.text
	.globl	oc_storage_config
	.type	oc_storage_config, @function
oc_storage_config:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$-1, %eax
	popq	%rbp
	ret
.LFE0:
	.size	oc_storage_config, .-oc_storage_config
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 35 succeeded
INFO:root:C code :
#include <stdio.h>

#include <stdlib.h>

int inter_mercenary_sql_init(void)
{
 return 0;
}
INFO:root:x86 code: 

	.text
	.globl	inter_mercenary_sql_init
	.type	inter_mercenary_sql_init, @function
inter_mercenary_sql_init:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret
.LFE0:
	.size	inter_mercenary_sql_init, .-inter_mercenary_sql_init
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 36 succeeded
INFO:root:C code :
#include <stdio.h>

int tester(int num){
 return num;
}
INFO:root:x86 code: 

	.text
	.globl	tester
	.type	tester, @function
tester:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 37 succeeded
INFO:root:C code :
#include <stdio.h>

int logicOr(int x, int y) {
 if (x || y == 1) {
  return 1;
 }
 else {
  return 0;
 }
}
INFO:root:x86 code: 

	.text
	.globl	logicOr
	.type	logicOr, @function
logicOr:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	orl	-8(%rbp), %eax
	cmpl	$1, %eax
	setne	%al
	movzbl	%al, %eax
	popq	%rbp
	ret
.LFE0:
	.size	logicOr, .-logicOr
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 38 succeeded
INFO:root:C code :

int f6(int c, int shamt) {




  return c << shamt;
}
INFO:root:x86 code: 

	.text
	.globl	f6
	.type	f6, @function
f6:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	sal	%cl, %eax
	popq	%rbp
	ret
.LFE0:

INFO:root:Local error rate: 0.0%
INFO:root:CASE 39 succeeded
INFO:root:C code :
#include <stdio.h>

#include <string.h>

char cipher (char c){
 if(c >= 65 && c<= 90){
  c = c - 65;
  c = 90 - c;
 }else if( c >= 97 && c<= 122){
  c = c-97;
  c = 122 - c;
 }
 return c;
}
INFO:root:x86 code: 

	.text
	.globl	cipher
	.type	cipher, @function
cipher:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	movb	-1(%rbp), %al
	cmpb	$64, %al
	jbe	.L2
	cmpb	$90, %al
	ja	.L2
	subb	$65, %al
	negb	%al
	addb	$90, %al
	jmp	.L3
.L2:
	cmpb	$96, %al
	jbe	.L4
	cmpb	$122, %al
	ja	.L4
	subb	$97, %al
	negb	%al
	addb	$122, %al
.L3:
	movb	%al, -1(%rbp)
	movb	-1(%rbp), %al
	popq	%rbp
	ret
.L4:
	movb	%al, -1(%rbp)
	movb	-1(%rbp), %al
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 40 succeeded
INFO:root:C code :

int
g(int a)
{
 return a;
}
INFO:root:x86 code: 

	.text
	.globl	g
	.type	g, @function
g:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 41 succeeded
INFO:root:C code :

float obdConvert_44 (unsigned int A, unsigned int B, unsigned int C, unsigned int D) {
 return ((float)A*256.0f+(float)B)*0.0000305f;
}
INFO:root:x86 code: 

	.text
	.globl	obdConvert_44
	.type	obdConvert_44, @function
obdConvert_44:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	-4(%rbp), %eax
	pxor	%xmm0, %xmm0
	cvtsi2ss	%eax, %xmm0
	movl	$256, %eax
	cvtsi2ss	%eax, %xmm1
	mulss	%xmm1, %xmm0
	movl	-8(%rbp), %eax
	pxor	%xmm1, %xmm1
	cvtsi2ss	%eax, %xmm1
	addss	%xmm1, %xmm0
	movss	.LC0(%rip), %xmm1
	mulss	%xmm1, %xmm0
	popq	%rbp
	ret
.LC0:
	.align 4
	.word	1191182336

INFO:root:Local error rate: 100.0%
INFO:root:CASE 42 failed
INFO:root:C code :

double check_double() { return 0; }
INFO:root:x86 code: 

	.text
	.globl	check_double
	.type	check_double, @function
check_double:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 43 succeeded
INFO:root:C code :

int ft_tolower(int c)
{
 if (c <= 90 && c >= 65)
  return (c + 32);
 return (c);
}
INFO:root:x86 code: 

	.text
	.globl	ft_tolower
	.type	ft_tolower, @function
ft_tolower:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	$90, %eax
	jg	.L2
	movl	-4(%rbp), %eax
	cmpl	$65, %eax
	jl	.L2
	movl	-4(%rbp), %eax
	addl	$32, %eax
	jmp	.L3
.L2:
	movl	-4(%rbp), %eax
.L3:
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 44 succeeded
INFO:root:C code :







int SwapLong(int num)
{
 return (((num >> 0) & 0xFF) << 24) + (((num >> 8) & 0xFF) << 16) + (((num >> 16) & 0xFF) << 8) + (((num >> 24) & 0xFF) << 0);
}
INFO:root:x86 code: 

	.text
	.globl	SwapLong
	.type	SwapLong, @function
SwapLong:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$0, %eax
	andl	$255, %eax
	movl	%eax, %edx
	sall	$24, %edx
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movl	%eax, %ecx
	sall	$16, %ecx
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movl	%eax, %esi
	sall	$8, %esi
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movl	%eax, %edi
	sall	$0, %edi
	movl	%edx, %eax
	addl	%ecx, %eax
	addl	%esi, %eax
	addl	%edi, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 45 succeeded
INFO:root:C code :
#include <inttypes.h>

#include <stdlib.h>

#include <limits.h>

#include <stdio.h>

#include <string.h>

#include <sqlite3.h>

int Bank_int_IsValidName(const char *Name)
{
 if( !Name ) return 0;
 while(*Name)
 {
  if( *Name == '\'' ) return 0;
  Name ++;
 }
 return 1;
}
INFO:root:x86 code: 

	.text
	.globl	Bank_int_IsValidName
	.type	Bank_int_IsValidName, @function
Bank_int_IsValidName:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jz	.L2
	jmp	.L3
.L3:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L2
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$39, %al
	jne	.L4
	movl	$0, %eax
	popq	%rbp
	ret
.L4:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.L3
.L2:
	movl	$1, %eax
	popq	%rbp
	ret
	.size	Bank_int_IsValidName, .-Bank_int_IsValidName
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 46 succeeded
INFO:root:C code :
#include <assert.h>

#include <errno.h>

#include <fcntl.h>

#include <poll.h>

#include <signal.h>

#include <stdarg.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <sys/mman.h>

#include <sys/time.h>

#include <sys/types.h>

#include <sys/wait.h>

#include <time.h>

#include <unistd.h>

int RIFSIGNALED(int status)
{
    return (status & 0xff) != 0;
}
INFO:root:x86 code: 

	.text
	.globl	RIFSIGNALED
	.type	RIFSIGNALED, @function
RIFSIGNALED:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	setne	%al
	movzbl	%al, %eax
	popq	%rbp
	ret
.LFE0:
	.size	RIFSIGNALED, .-RIFSIGNALED
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 47 succeeded
INFO:root:C code :











void TextDisplaySetBarText(int barnum, const char *str)
{

}
INFO:root:x86 code: 

	.text
	.globl	TextDisplaySetBarText
	.type	TextDisplaySetBarText, @function
TextDisplaySetBarText:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	nop
	popq	%rbp
	ret
.LFE0:
	.size	TextDisplaySetBarText, .-TextDisplaySetBarText
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 48 succeeded
INFO:root:C code :

char * getTokenTypeName(int type){
 switch(type){
  case 1:
   return "<LParen>";
  case 2:
   return "<RParen>";
  case 3:
   return "<Number>";
  case 8:
   return "<ID>";
  case 6:
   return "<Plus>";
  case 7:
   return "<Minus>";
  case -2:
   return "<EOF>";
  case -1:
   return "<Error!>";
  default:
   return "<Unknown token type!>";
 }
}
INFO:root:x86 code: 

	.text
	.globl	getTokenTypeName
	.type	getTokenTypeName, @function
getTokenTypeName:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	$8, %eax
	je	.L4
	cmpl	$6, %eax
	je	.L5
	cmpl	$7, %eax
	je	.L6
	cmpl	$-2, %eax
	je	.L7
	cmpl	$-1, %eax
	je	.L8
	movl	$0, %eax
	jmp	.L9
.L4:
	leaq	.LC0(%rip), %rax
	jmp	.L9
.L5:
	leaq	.LC1(%rip), %rax
	jmp	.L9
.L6:
	leaq	.LC2(%rip), %rax
	jmp	.L9
.L7:
	leaq	.LC3(%rip), %rax
	jmp	.L9
.L8:
	leaq	.LC4(%rip), %rax
	jmp	.L9
.L9:
	leave
	ret
.LC0:
	.string	"<LParen>"
.LC1:
	.string	"<RParen>"
.LC2:
	.string	"<Number>"
.LC3:
	.string	"<EOF>"
.LC4:
	.string	"<Error!>"
	.section	.rodata
	.align 8
	.type	.LC5, @object
	.size	.LC5, 21
.LC5:
	.string	"<Unknown token type!>"
	.text
	.globl	default_case
default_case:
.LFB1:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.LC5(%rip), %rax
	popq	%rbp
	ret
	.size	default_case, .-default_case

WARNING:root:WARNING: code failed to execute for input 0 in case 49
WARNING:root:WARNING: code failed to execute for input 1 in case 49
WARNING:root:WARNING: code failed to execute for input 2 in case 49
WARNING:root:WARNING: code failed to execute for input 3 in case 49
WARNING:root:WARNING: code failed to execute for input 4 in case 49
WARNING:root:WARNING: code failed to execute for input 5 in case 49
WARNING:root:WARNING: code failed to execute for input 6 in case 49
WARNING:root:WARNING: code failed to execute for input 7 in case 49
WARNING:root:WARNING: code failed to execute for input 8 in case 49
WARNING:root:WARNING: code failed to execute for input 9 in case 49
INFO:root:Local error rate: 100.0%
INFO:root:CASE 49 failed
INFO:root:C code :
#include <math.h>

#include <stdio.h>

#include <errno.h>

#include <stdlib.h>

int mus_iclamp(int lo, int val, int hi)
{
    if (val > hi)
        return(hi);
    else
        if (val < lo)
            return(lo);
        else return(val);
}
INFO:root:x86 code: 

	.text
	.globl	mus_iclamp
	.type	mus_iclamp, @function
mus_iclamp:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jle	.L2
	movl	-28(%rbp), %eax
	jmp	.L3
.L2:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.L4
	movl	-20(%rbp), %eax
	jmp	.L3
.L4:
	movl	-24(%rbp), %eax
.L3:
	popq	%rbp
	ret
.LFE0:
	.size	mus_iclamp, .-mus_iclamp
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 50 succeeded
INFO:root:C code :

float UI_ClampCvar( float min, float max, float value )
{
 if ( value < min ) return min;
 if ( value > max ) return max;
 return value;
}
INFO:root:x86 code: 

	.text
	.globl	UI_ClampCvar
	.type	UI_ClampCvar, @function
UI_ClampCvar:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movss	%xmm0, -4(%rbp)
	movss	%xmm1, -8(%rbp)
	movss	%xmm2, -12(%rbp)
	movss	-12(%rbp), %xmm0        # Move value into xmm0
	comiss	-8(%rbp), %xmm0        # Compare value with max
	jbe	.L2
	movss	-8(%rbp), %xmm0        # Move max into xmm0
	jmp	.L3
.L2:
	movss	-12(%rbp), %xmm0        # Move value into xmm0
	comiss	-4(%rbp), %xmm0        # Compare value with min
	ja	.L4
	movss	-4(%rbp), %xmm0        # Move min into xmm0
	jmp	.L3
.L4:
	movss	-12(%rbp), %xmm0        # Move value into xmm0
.L3:
	leave
	ret
.LFE0:
	.size	UI_ClampCvar, .-UI_ClampCvar
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 10.0%
INFO:root:CASE 51 failed
INFO:root:C code :

short USBSTK5505_GPIO_init()
{
    return 0;
}
INFO:root:x86 code: 

	.text
	.globl	USBSTK5505_GPIO_init
	.type	USBSTK5505_GPIO_init, @function
USBSTK5505_GPIO_init:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 52 succeeded
INFO:root:C code :
#include <stdio.h>

#include <math.h>

#include <stdlib.h>

#include <unistd.h>

#include <stdarg.h>

#include <string.h>

double H (double x) {
   if (x >= 0) return 1.;
   else return 0.;
}
INFO:root:x86 code: 

	.text
	.globl	H
	.type	H, @function
H:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	-8(%rbp), %xmm0
	ucomisd	.LC0(%rip), %xmm0
	jbe	.L2
	movsd	.LC1(%rip), %xmm0
	jmp	.L3
.L2:
	movsd	.LC1(%rip), %xmm0
.L3:
	popq	%rbp
	ret
.LC0:
	.quad	0
	.quad	10863247362048000000
	.LC1:
	.quad	0
	.quad	0
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 100.0%
INFO:root:CASE 53 failed
INFO:root:C code :































int LZ4_versionNumber (void) { return (1 *100*100 + 6 *100 + 0); }
INFO:root:x86 code: 

	.text
	.globl	LZ4_versionNumber
	.type	LZ4_versionNumber, @function
LZ4_versionNumber:
.LFB0:
	endbr64
	movl	$10600, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 54 succeeded
INFO:root:C code :

int foo(int time, int n) {
#pragma omp parallel for default(shared) schedule(dynamic, 1) reduction(+ : time)
  for (int i = 1; i < n; ++i);
  return 0;
}
INFO:root:x86 code: 

	.text
	.globl	foo
	.type	foo, @function
foo:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
#pragma omp parallel for default(shared) schedule(dynamic, 1) reduction(+ : time)
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	leal	1(%rax), %eax
	le
WARNING:root:CASE 55 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s: Warning: end of file not at end of a line; newline inserted
tmp.s:175: Error: no such instruction: `le'

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <stdio.h>

int checkrange(char c1, char c2)
{

 if (('a' <= c1 && c1 <= 'z') && (c1 <= c2 && c2 <= 'z'))
  return 1;

 if (('A' <= c1 && c1 <= 'Z') && (c1 <= c2 && c2 <= 'Z'))
  return 1;

 if (('0' <= c1 && c1 <= '9') && (c1 <= c2 && c2 <= '9'))
  return 1;

 return 0;
}
INFO:root:x86 code: 

	.text
	.globl	checkrange
	.type	checkrange, @function
checkrange:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	movb	%sil, -2(%rbp)
	movb	-1(%rbp), %al
	cmpb	$97, %al
	jb	.L2
	cmpb	$122, %al
	ja	.L2
	movb	-2(%rbp), %al
	cmpb	$97, %al
	jb	.L3
	cmpb	$122, %al
	ja	.L3
	movl	$1, %eax
	jmp	.L4
.L2:
	movb	-1(%rbp), %al
	cmpb	$65, %al
	jb	.L5
	cmpb	$90, %al
	ja	.L5
	movb	-2(%rbp), %al
	cmpb	$65, %al
	jb	.L6
	cmpb	$90, %al
	ja	.L6
	movl	$1, %eax
	jmp	.L4
.L5:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L7
	cmpb	$57, %al
	ja	.L7
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L8
	cmpb	$57, %al
	ja	.L8
	movl	$1, %eax
	jmp	.L4
.L7:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L9
	cmpb	$57, %al
	ja	.L9
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L10
	cmpb	$57, %al
	ja	.L10
	movl	$1, %eax
	jmp	.L4
.L9:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L11
	cmpb	$57, %al
	ja	.L11
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L12
	cmpb	$57, %al
	ja	.L12
	movl	$1, %eax
	jmp	.L4
.L11:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L13
	cmpb	$57, %al
	ja	.L13
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L14
	cmpb	$57, %al
	ja	.L14
	movl	$1, %eax
	jmp	.L4
.L13:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L15
	cmpb	$57, %al
	ja	.L15
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L16
	cmpb	$57, %al
	ja	.L16
	movl	$1, %eax
	jmp	.L4
.L15:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L17
	cmpb	$57, %al
	ja	.L17
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L18
	cmpb	$57, %al
	ja	.L18
	movl	$1, %eax
	jmp	.L4
.L17:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L19
	cmpb	$57, %al
	ja	.L19
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L20
	cmpb	$57, %al
	ja	.L20
	movl	$1, %eax
	jmp	.L4
.L19:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L21
	cmpb	$57, %al
	ja	.L21
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L22
	cmpb	$57, %al
	ja	.L22
	movl	$1, %eax
	jmp	.L4
.L21:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L23
	cmpb	$57, %al
	ja	.L23
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L24
	cmpb	$57, %al
	ja	.L24
	movl	$1, %eax
	jmp	.L4
.L23:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L25
	cmpb	$57, %al
	ja	.L25
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L26
	cmpb	$57, %al
	ja	.L26
	movl	$1, %eax
	jmp	.L4
.L25:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L27
	cmpb	$57, %al
	ja	.L27
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L28
	cmpb	$57, %al
	ja	.L28
	movl	$1, %eax
	jmp	.L4
.L27:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L29
	cmpb	$57, %al
	ja	.L29
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L30
	cmpb	$57, %al
	ja	.L30
	movl	$1, %eax
	jmp	.L4
.L29:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L31
	cmpb	$57, %al
	ja	.L31
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L32
	cmpb	$57, %al
	ja	.L32
	movl	$1, %eax
	jmp	.L4
.L31:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L33
	cmpb	$57, %al
	ja	.L33
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L34
	cmpb	$57, %al
	ja	.L34
	movl	$1, %eax
	jmp	.L4
.L33:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L35
	cmpb	$57, %al
	ja	.L35
	movb	-2(%rbp), %al
	cmpb	$48, %al
	jb	.L36
	cmpb	$57, %al
	ja	.L36
	movl	$1, %eax
	jmp	.L4
.L35:
	movb	-1(%rbp), %al
	cmpb	$48, %al
	jb	.L37
	cmpb	$57, %al
	ja	.L37
WARNING:root:CASE 56 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s: Warning: end of file not at end of a line; newline inserted
/usr/bin/ld: warning: /tmp/ccd3IJXy.o: missing .note.GNU-stack section implies executable stack
/usr/bin/ld: NOTE: This behaviour is deprecated and will be removed in a future version of the linker
/usr/bin/ld: /tmp/ccd3IJXy.o: in function `checkrange':
(.text+0x22): undefined reference to `.L3'
/usr/bin/ld: (.text+0x2a): undefined reference to `.L3'
/usr/bin/ld: (.text+0x34): undefined reference to `.L4'
/usr/bin/ld: (.text+0x4a): undefined reference to `.L6'
/usr/bin/ld: (.text+0x52): undefined reference to `.L6'
/usr/bin/ld: (.text+0x5c): undefined reference to `.L4'
/usr/bin/ld: (.text+0x72): undefined reference to `.L8'
/usr/bin/ld: (.text+0x7a): undefined reference to `.L8'
/usr/bin/ld: (.text+0x84): undefined reference to `.L4'
/usr/bin/ld: (.text+0x9a): undefined reference to `.L10'
/usr/bin/ld: (.text+0xa2): undefined reference to `.L10'
/usr/bin/ld: (.text+0xac): undefined reference to `.L4'
/usr/bin/ld: (.text+0xc2): undefined reference to `.L12'
/usr/bin/ld: (.text+0xca): undefined reference to `.L12'
/usr/bin/ld: (.text+0xd4): undefined reference to `.L4'
/usr/bin/ld: (.text+0xea): undefined reference to `.L14'
/usr/bin/ld: (.text+0xf2): undefined reference to `.L14'
/usr/bin/ld: (.text+0xfc): undefined reference to `.L4'
/usr/bin/ld: (.text+0x112): undefined reference to `.L16'
/usr/bin/ld: (.text+0x11a): undefined reference to `.L16'
/usr/bin/ld: (.text+0x124): undefined reference to `.L4'
/usr/bin/ld: (.text+0x13a): undefined reference to `.L18'
/usr/bin/ld: (.text+0x142): undefined reference to `.L18'
/usr/bin/ld: (.text+0x14c): undefined reference to `.L4'
/usr/bin/ld: (.text+0x162): undefined reference to `.L20'
/usr/bin/ld: (.text+0x16a): undefined reference to `.L20'
/usr/bin/ld: (.text+0x174): undefined reference to `.L4'
/usr/bin/ld: (.text+0x18a): undefined reference to `.L22'
/usr/bin/ld: (.text+0x192): undefined reference to `.L22'
/usr/bin/ld: (.text+0x19c): undefined reference to `.L4'
/usr/bin/ld: (.text+0x1b2): undefined reference to `.L24'
/usr/bin/ld: (.text+0x1ba): undefined reference to `.L24'
/usr/bin/ld: (.text+0x1c4): undefined reference to `.L4'
/usr/bin/ld: (.text+0x1da): undefined reference to `.L26'
/usr/bin/ld: (.text+0x1e2): undefined reference to `.L26'
/usr/bin/ld: (.text+0x1ec): undefined reference to `.L4'
/usr/bin/ld: (.text+0x202): undefined reference to `.L28'
/usr/bin/ld: (.text+0x20a): undefined reference to `.L28'
/usr/bin/ld: (.text+0x214): undefined reference to `.L4'
/usr/bin/ld: (.text+0x22a): undefined reference to `.L30'
/usr/bin/ld: (.text+0x232): undefined reference to `.L30'
/usr/bin/ld: (.text+0x23c): undefined reference to `.L4'
/usr/bin/ld: (.text+0x252): undefined reference to `.L32'
/usr/bin/ld: (.text+0x25a): undefined reference to `.L32'
/usr/bin/ld: (.text+0x264): undefined reference to `.L4'
/usr/bin/ld: (.text+0x27a): undefined reference to `.L34'
/usr/bin/ld: (.text+0x282): undefined reference to `.L34'
/usr/bin/ld: (.text+0x28c): undefined reference to `.L4'
/usr/bin/ld: (.text+0x2a2): undefined reference to `.L36'
/usr/bin/ld: (.text+0x2aa): undefined reference to `.L36'
/usr/bin/ld: (.text+0x2b4): undefined reference to `.L4'
/usr/bin/ld: (.text+0x2bf): undefined reference to `.L37'
/usr/bin/ld: (.text+0x2c7): undefined reference to `.L37'
collect2: error: ld returned 1 exit status

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <math.h>

double
gsl_coerce_double (const double x)
{
  volatile double y;
  y = x;
  return y;
}
INFO:root:x86 code: 

	.text
	.globl	gsl_coerce_double
	.type	gsl_coerce_double, @function
gsl_coerce_double:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	-8(%rbp), %xmm0
	popq	%rbp
	ret
.LFE0:
	.size	gsl_coerce_double, .-gsl_coerce_double
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 57 succeeded
INFO:root:C code :
#include <stdio.h>

int c059(void) { return 0; }
INFO:root:x86 code: 

	.text
	.globl	c059
	.type	c059, @function
c059:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 58 succeeded
INFO:root:C code :
#include <math.h>

#include <stdlib.h>

double mcdrag_rpm(double twist, double velocity)
{
  return (velocity/(twist/60.0)*12.0);
}
INFO:root:x86 code: 

	.text
	.globl	mcdrag_rpm
	.type	mcdrag_rpm, @function
mcdrag_rpm:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	-8(%rbp), %xmm0
	movsd	.LC0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -24(%rbp)
	movsd	-24(%rbp), %xmm0
	movsd	.LC1(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	mov	-24(%rbp), %eax
	movsd	%xmm1, -8(%rbp)
	mov	%eax, %eax
	popq	%rbp
	ret
.LC0:
	.long	0
	.long	1074790400
	.LC1:
	.long	0
	.long	1093664768

INFO:root:Local error rate: 100.0%
INFO:root:CASE 59 failed
INFO:root:C code :
#include    <stdlib.h>  /* Include standard library header */

#include    <math.h>    /* Include math library header */

#include    <string.h>  /* Include string function header */

#include    <ctype.h>   /* Include character function header */

#include    <limits.h>  /* define LONG_MIN and LONG_MAX */

int valid_serial(char *carray)
{
int i, code, num[10], sumo=0, sume=0, sumss=0;

for(i=0;i<10;i++){
  code = carray[i];
  num[i] = code - 0x30;
  if((code<0x30)||(code>0x39)){
    return 0;
  }
}

sumo = num[0]+num[2]+num[4];
sumo = sumo - (sumo/10)*10;

sume = num[1]+num[3]+num[5];
sume = sume - (sume/10)*10;

sumss = num[0]+num[1]+num[2]+num[3]+num[4]+num[5]+sumo+sume;

if((sumo!=num[6])||(sume!=num[7])||(sumss!=(10*num[8]+num[9]))){
  return 0;
}

return 1;
}
INFO:root:x86 code: 

	.text
	.globl	valid_serial
	.type	valid_serial, @function
valid_serial:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -116(%rbp)
	movl	$0, -120(%rbp)
	movl	$0, -124(%rbp)
	movl	$0, -128(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -152(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -188(%rbp)
	movl	$0, -192(%rbp)
	movl	$0, -196(%rbp)
	movl	$0, -200(%rbp)
	movl	$0, -204(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -216(%rbp)
	movl	$0, -220(%rbp)
	movl	$0, -224(%rbp)
	movl	$0, -228(%rbp)
	movl	$0, -232(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -244(%rbp)
	movl	$0, -248(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -268(%rbp)
	movl	$0, -272(%rbp)
	movl	$0, -276(%rbp)
	movl	$0, -280(%rbp)
	movl	$0, -284(%rbp)
	movl	$0, -288(%rbp)
	movl	$0, -292(%rbp)
	movl	$0, -296(%rbp)
	movl	$0, -300(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -324(%rbp)
	movl	$0, -328(%rbp)
	movl	$0, -332(%rbp)
	movl	$0, -336(%rbp)
	movl	$0, -340(%rbp)
	movl	$0, -344(%rbp)
	movl	$0, -348(%rbp)
	movl	$0, -352(%rbp)
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
	movl	$0, -368(%rbp)
	movl	$0, -372(%rbp)
	movl	$0, -376(%rbp)
	movl	$0, -380(%rbp)
	movl	$0, -384(%rbp)
	movl	$0, -388(%rbp)
	movl	$0, -392(%rbp)
	movl	$0, -396(%rbp)
	movl	$0, -400(%rbp)
	movl	$0, -404(%rbp)
	movl	$0, -408(%rbp)
	movl	$0, -412(%rbp)
	movl	$0, -416(%rbp)
	movl	$0, -420(%rbp)
	movl	$0, -424(%rbp)
	movl	$0, -428(%rbp)
	movl	$0, -432(%rbp)
	movl	$0, -436(%rbp)
	movl	$0, -440(%rbp)
	movl	$0, -444(%rbp)
	movl	$0, -448(%rbp)
	movl	$0, -452(%rbp)
	movl	$0, -456(%rbp)
	movl	$0, -460(%rbp)
	movl	$0, -464(%rbp)
	movl	$0, -468(%rbp)
	movl	$0, -472(%rbp)
	movl	$0, -476(%rbp)
	movl	$0, -480(%rbp)
	movl	$0, -484(%rbp)
	movl	$0, -488(%rbp)
	movl	$0, -492(%rbp)
	movl	$0, -496(%rbp)
	movl	$0, -500(%rbp)
	movl	$0, -504(%rbp)
	movl	$0, -508(%rbp)
	movl	$0, -512(%rbp)
	movl	$0, -516(%rbp)
	movl	$0, -520(%rbp)
	movl	$0, -524(%rbp)
	movl	$0, -528(%rbp)
	movl	$0, -532(%rbp)
	movl	$0, -
WARNING:root:CASE 60 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s: Warning: end of file not at end of a line; newline inserted
tmp.s:144: Warning: Unary operator - ignored because bad operand follows
tmp.s:144: Error: missing or invalid displacement expression `-'

WARNING:root:ret.stdout: 
INFO:root:C code :

int f(int x) { return x - 5; }
INFO:root:x86 code: 

	.text
	.globl	f
	.type	f, @function
f:
.LFB0:
	endbr64
	subq	$8, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$5, %eax
	leave
	ret

WARNING:root:WARNING: code failed to execute for input 0 in case 61
WARNING:root:WARNING: code failed to execute for input 1 in case 61
WARNING:root:WARNING: code failed to execute for input 2 in case 61
WARNING:root:WARNING: code failed to execute for input 3 in case 61
WARNING:root:WARNING: code failed to execute for input 4 in case 61
WARNING:root:WARNING: code failed to execute for input 5 in case 61
WARNING:root:WARNING: code failed to execute for input 6 in case 61
WARNING:root:WARNING: code failed to execute for input 7 in case 61
WARNING:root:WARNING: code failed to execute for input 8 in case 61
WARNING:root:WARNING: code failed to execute for input 9 in case 61
INFO:root:Local error rate: 100.0%
INFO:root:CASE 61 failed
INFO:root:C code :
#include <stdbool.h>

bool timeout_reached(void)
{
    return false;
}
INFO:root:x86 code: 

	.text
	.globl	timeout_reached
	.type	timeout_reached, @function
timeout_reached:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 62 succeeded
INFO:root:C code :
#include <string.h>

char* langRomTypeMicrosolFdc() { return "Microsol Disk Controller"; }
INFO:root:x86 code: 

	.text
	.globl	langRomTypeMicrosolFdc
	.type	langRomTypeMicrosolFdc, @function
langRomTypeMicrosolFdc:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.LC0(%rip), %rax
	popq	%rbp
	ret
.LC0:
	.string	"Microsol Disk Controller"


INFO:root:Local error rate: 0.0%
INFO:root:CASE 63 succeeded
INFO:root:C code :

int do_386() { return 386; }
INFO:root:x86 code: 

	.text
	.globl	do_386
	.type	do_386, @function
do_386:
.LFB0:
	endbr64
	movl	$386, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 64 succeeded
INFO:root:C code :

int function(int a, int b) { return a+b; }
INFO:root:x86 code: 

	.text
	.globl	function
	.type	function, @function
function:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	addl	-8(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 65 succeeded
INFO:root:C code :
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

double
UC_11_1_11
(
    double F_g_s_rep,

    double F_g_u_d

)
{
        return (F_g_s_rep / F_g_u_d);
}
INFO:root:x86 code: 

	.text
	.globl	UC_11_1_11
	.type	UC_11_1_11, @function
UC_11_1_11:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	-8(%rbp), %xmm0
	divsd	-16(%rbp), %xmm0
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 66 succeeded
INFO:root:C code :
#include <stdio.h>

#include <string.h>

#include <sys/types.h>

#include <sys/stat.h>

#include <signal.h>

#include <fcntl.h>

#include <unistd.h>

#include <stdlib.h>

#include <sys/wait.h>

int stop_process(int pid)
{
 return kill(pid, 15);
}
INFO:root:x86 code: 

	.file	"stop_process.c"
	.text
	.globl	stop_process
	.type	stop_process, @function
stop_process:
.LFB0:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	movl	$15, %esi
	call	kill@PLT
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	stop_process, .-stop_process
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 67 succeeded
INFO:root:C code :
#include <string.h>

int vout_finish(void)
{
  return 0;
}
INFO:root:x86 code: 

	.text
	.globl	vout_finish
	.type	vout_finish, @function
vout_finish:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 68 succeeded
INFO:root:C code :

int alloc(int *p)
{
  int tmp = 5;



  return 0;
}
INFO:root:x86 code: 

	.text
	.globl	alloc
	.type	alloc, @function
alloc:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$5, -4(%rbp)
	movl	$0, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 69 succeeded
INFO:root:C code :
#include <stdio.h>

#include <stddef.h>

#include <string.h>

char* mote64_Name(void) {
 return "MOTE64";
}
INFO:root:x86 code: 

	.text
	.globl	mote64_Name
	.type	mote64_Name, @function
mote64_Name:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.LC0(%rip), %rax
	popq	%rbp
	ret
.LC0:
	.string	"MOTE64"

INFO:root:Local error rate: 0.0%
INFO:root:CASE 70 succeeded
INFO:root:C code :
#include <stdio.h>

char *hello(void) {
    return "hello";
}
INFO:root:x86 code: 

	.text
	.globl	hello
	.type	hello, @function
hello:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.LC0(%rip), %rax
	popq	%rbp
	ret
.LC0:
	.string	"hello"

INFO:root:Local error rate: 0.0%
INFO:root:CASE 71 succeeded
INFO:root:C code :





int exists(const char *filename)
{
 return (0);
}
INFO:root:x86 code: 

	.text
	.globl	exists
	.type	exists, @function
exists:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$0, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 72 succeeded
INFO:root:C code :
#include <math.h>

float fast_cbrtf(float x)
{
   union {int ix; float x;} v;
   v.x = x;
   v.ix = v.ix/4 + v.ix/16;
   v.ix = v.ix + v.ix/16;
   v.ix = v.ix + v.ix/256;
   v.ix = 0x2a511cd0 + v.ix;
   return v.x;
}
INFO:root:x86 code: 

	.text
	.globl	fast_cbrtf
	.type	fast_cbrtf, @function
fast_cbrtf:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0
	movd	%xmm0, %eax
	shrl	$1, %eax
	movd	%eax, %xmm1
	psrlq	$31, %xmm1
	paddd	%xmm1, %xmm0
	movd	%xmm0, %eax
	shrl	$1, %eax
	movd	%eax, %xmm1
	psrlq	$31, %xmm1
	paddd	%xmm1, %xmm0
	movd	%xmm0, %eax
	shrl	$8, %eax
	movd	%eax, %xmm1
	psrlq	$31, %xmm1
	paddd	%xmm1, %xmm0
	movl	$1797096448, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%eax, %eax
	addl	%e
WARNING:root:CASE 73 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s: Warning: end of file not at end of a line; newline inserted
tmp.s:203: Error: bad register name `%e'

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <stddef.h>

int GO_strcmp (char *d, char *s)
{
 while ('\0' != *d) {
  if (*d != *s)
   return *d - *s;
  d++;
  s++;
 }

 return *d - *s;
}
INFO:root:x86 code: 

	.text
	.globl	GO_strcmp
	.type	GO_strcmp, @function
GO_strcmp:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	jmp	.L2
.L3:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movq	-32(%rbp), %rdx
	movzbl	(%rdx), %edx
	cmpb	%dl, %al
	jne	.L4
	addq	$1, -24(%rbp)
	addq	$1, -32(%rbp)
	jmp	.L2
.L4:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movq	-32(%rbp), %rdx
	movzbl	(%rdx), %edx
	subl	%edx, %eax
	movl	%eax, %eax
	jmp	.L5
.L2:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L3
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movq	-32(%rbp), %rdx
	movzbl	(%rdx), %edx
	subl	%edx, %eax
	movl	%eax, %eax
.L5:
	popq	%rbp
	ret
	.size	GO_strcmp, .-GO_strcmp
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 74 succeeded
INFO:root:C code :

int
test_01 (volatile short* x)
{
  return *x;
}
INFO:root:x86 code: 

	.text
	.globl	test_01
	.type	test_01, @function
test_01:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movzwl	-8(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 100.0%
INFO:root:CASE 75 failed
INFO:root:C code :
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>

int isspec(char c)
{
    return (((c >= '!') && (c <= '/')) || (c >= ':' && c <= '@') || ((c >= '[') && (c <= '`')) || ((c >= '{') && (c <= 'DEL')));
}
INFO:root:x86 code: 

	.text
	.globl	isspec
	.type	isspec, @function
isspec:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movb	%dil, -1(%rbp)
	movzbl	-1(%rbp), %eax
	cmpb	$33, %al
	jl	.L2
	cmpb	$47, %al
	jg	.L2
	jmp	.L3
.L2:
	movzbl	-1(%rbp), %eax
	cmpb	$58, %al
	jl	.L4
	cmpb	$64, %al
	jg	.L4
	jmp	.L3
.L4:
	movzbl	-1(%rbp), %eax
	cmpb	$91, %al
	jl	.L5
	cmpb	$96, %al
	jg	.L5
	jmp	.L3
.L5:
	movzbl	-1(%rbp), %eax
	cmpb	$123, %al
	jl	.L6
	cmpb	$126, %al
	jg	.L6
.L3:
	movl	$1, %eax
	jmp	.L7
.L6:
	movl	$0, %eax
.L7:
	popq	%rbp
	ret
	.size	isspec, .-isspec
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 76 succeeded
INFO:root:C code :

int hash_val (int key)
{
    return key;
}
INFO:root:x86 code: 

	.text
	.globl	hash_val
	.type	hash_val, @function
hash_val:
.LFB0:
	endbr64
	movl	%edi, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 77 succeeded
INFO:root:C code :
#include <stdio.h>

#include <string.h>

#include <stdlib.h>

#include <stdint.h>

#include <math.h>

int cat_nums(char *str_out, char *str){

 int i=0,j=0;
 while(str[i]!='\0'){
  if(str[i] >= '0' && str[i] <= '9'){
   str_out[j++] = str[i];
  }
  i++;
 }
 str_out[j] = '\0';
 return(j);
}
INFO:root:x86 code: 

	.text
	.globl	cat_nums
	.type	cat_nums, @function
cat_nums:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L2
.L3:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$47, %al
	jb	.L4
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$57, %al
	ja	.L4
	movq	-8(%rbp), %rax
	movslq	-20(%rbp), %rdx
	movslq	-4(%rbp), %rcx
	movb	%al, (%rax,%rcx)
	addl	$1, -4(%rbp)
.L4:
	addl	$1, -20(%rbp)
.L2:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	testb	%al, %al
	jne	.L3
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movb	$0, (%rax,%rdx)
	movl	-4(%rbp), %eax
	leave
	ret
.LFE0:
	.size	cat_nums, .-cat_nums
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

WARNING:root:WARNING: code failed to execute for input 0 in case 78
WARNING:root:WARNING: code failed to execute for input 1 in case 78
WARNING:root:WARNING: code failed to execute for input 2 in case 78
WARNING:root:WARNING: code failed to execute for input 3 in case 78
WARNING:root:WARNING: code failed to execute for input 4 in case 78
WARNING:root:WARNING: code failed to execute for input 5 in case 78
WARNING:root:WARNING: code failed to execute for input 6 in case 78
WARNING:root:WARNING: code failed to execute for input 7 in case 78
WARNING:root:WARNING: code failed to execute for input 8 in case 78
WARNING:root:WARNING: code failed to execute for input 9 in case 78
INFO:root:Local error rate: 100.0%
INFO:root:CASE 78 failed
INFO:root:C code :
#include <stdio.h>

#include <stdarg.h>

#include <sys/types.h>

#include <sys/stat.h>

__attribute__ ((used))
int _write(int file, char *ptr, int len)
{
# 103 "/scratch/repos/new/home/jordi_armengol_estape/c-scraper/outputs/2022-01-22/02-19-57/repos/LCRS-UCC/STM32F4Discovery-expansion/refs/heads/Working/OtharSoft/syscalls/syscalls.c"
    return len;
}
INFO:root:x86 code: 

	.text
	.globl	_write
	.type	_write, @function
_write:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	popq	%rbp
	ret
.LFE0:
	.size	_write, .-_write
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 79 succeeded
INFO:root:C code :
#include <stdio.h>

int countVowels(char *str)
{
 int i,count=0;
 for(i=0;str[i]!='\0';++i)
  if('a' == str[i] ||
     'e' == str[i] ||
     'i' == str[i] ||
     'o' == str[i] ||
     'u' == str[i] ||
     'A' == str[i] ||
     'E' == str[i] ||
     'I' == str[i] ||
     'O' == str[i] ||
     'U' == str[i] )
   count++;
 return count;
}
INFO:root:x86 code: 

	.text
	.globl	countVowels
	.type	countVowels, @function
countVowels:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, %eax
	call	.L2
.L2:
	popl	%ecx
	movl	%ecx, %edx
	movl	%edx, %eax
	sarl	$31, %eax
	movl	%edx, %ecx
	sarl	$31, %ecx
	subl	%ecx, %eax
	movl	%eax, -4(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L3
.L5:
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$97, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$101, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$105, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$111, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$117, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$65, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$69, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$73, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$79, %al
	je	.L4
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	cmpb	$85, %al
	je	.L4
	addl	$1, -12(%rbp)
.L4:
	addl	$1, -4(%rbp)
.L3:
	movq	-8(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movzbl	(%rax,%rdx), %eax
	testb	%al, %al
	jne	.L5
	movl	-12(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	countVowels, .-countVowels

WARNING:root:CASE 80 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s:20: Error: invalid instruction suffix for `pop'

WARNING:root:ret.stdout: 
INFO:root:C code :
#include <string.h>

char* langRomTypeMirroredRam1k() { return "1kB Mirrored RAM"; }
INFO:root:x86 code: 

	.section	.rodata
.LC0:
	.string	"1kB Mirrored RAM"

	.text
	.globl	langRomTypeMirroredRam1k
	.type	langRomTypeMirroredRam1k, @function
langRomTypeMirroredRam1k:
.LFB0:
	endbr64
	leaq	.LC0(%rip), %rax
	ret
.LFE0:
	.size	langRomTypeMirroredRam1k, .-langRomTypeMirroredRam1k
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 81 succeeded
INFO:root:C code :

unsigned long unsignedlong_id(unsigned long x){return x;}
INFO:root:x86 code: 

	.text
	.globl	unsignedlong_id
	.type	unsignedlong_id, @function
unsignedlong_id:
.LFB0:
	endbr64
	movq	%rdi, %rax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 82 succeeded
INFO:root:C code :
#include <stdlib.h>

void pointerExample1(int *ptr1, int *ptr2){
 ptr1 = ptr2;
}
INFO:root:x86 code: 

	.text
	.globl	pointerExample1
	.type	pointerExample1, @function
pointerExample1:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	nop
	popq	%rbp
	ret
.LFE0:
	.size	pointerExample1, .-pointerExample1
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits

INFO:root:Local error rate: 0.0%
INFO:root:CASE 83 succeeded
INFO:root:C code :
#include <stdio.h>

int hcf_iterative(int a, int b){
 int q, r;
 if(a > 0 && b > 0){
  if(a < b)
   return hcf_iterative(b, a);

  q = a / b;
  r = a % b;
  while(r != 0 && r != 1){
   a = b;
   b = r;
   q = a / b;
   r = a % b;
  }

  if(r == 0)
   return b;
  else if(r == 1)
   return 1;
 }
 return -1;
}
INFO:root:x86 code: 

	.text
	.globl	hcf_iterative
	.type	hcf_iterative, @function
hcf_iterative:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$0, -4(%rbp)
	jle	.L2
	cmpl	$0, -8(%rbp)
	jle	.L2
	cmpl	-8(%rbp), -4(%rbp)
	jge	.L3
	movl	-8(%rbp), %edx
	movl	-4(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	hcf_iterative
	jmp	.L4
.L3:
	movl	-4(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %edx
	movl	-8(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -12(%rbp)
.L5:
	cmpl	$0, -12(%rbp)
	je	.L6
	cmpl	$1, -12(%rbp)
	je	.L7
	movl	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %edx
	movl	-8(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -12(%rbp)
	jmp	.L5
.L6:
	movl	-8(%rbp), %eax
	jmp	.L4
.L7:
	movl	$1, %eax
.L4:
	leave
	ret
.L2:
	movl	$-1, %eax
	leave
	ret
	.size	hcf_iterative, .-hcf_iterative
	.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"
	.section	.note.GNU-stack,"",@progbits

WARNING:root:CASE 84 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s:17: Error: operand size mismatch for `cmp'

WARNING:root:ret.stdout: 
INFO:root:C code :

int soma3(int a, int b, int c)
{
 return a+b+c;
}
INFO:root:x86 code: 

	.text
	.globl	soma3
	.type	soma3, @function
soma3:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	-4(%rbp), %eax
	addl	-8(%rbp), %eax
	addl	-12(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 85 succeeded
INFO:root:C code :

unsigned long int_sqrt(unsigned long x)
{
        unsigned long b, m, y = 0;

        if (x <= 1)
                return x;

        m = 1UL << ((sizeof(long) * 8) - 2);
        while (m != 0) {
                b = y + m;
                y >>= 1;

                if (x >= b) {
                        x -= b;
                        y += m;
                }
                m >>= 2;
        }

        return y;
}
INFO:root:x86 code: 

	.text
	.globl	int_sqrt
	.type	int_sqrt, @function
int_sqrt:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	cmpl	$1, -8(%rbp)
	jle	.L2
	movl	$1, %eax
	sall	$30, %eax
	movl	%eax, -4(%rbp)
	jmp	.L3
.L3:
	cmpl	$0, -4(%rbp)
	je	.L4
	movq	-16(%rbp), %rax
	addq	-4(%rbp), %rax
	movq	%rax, -32(%rbp)
	sarq	$1, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jge	.L5
	movq	-16(%rbp), %rax
	addq	-4(%rbp), %rax
	movq	%rax, -32(%rbp)
	cmpq	-8(%rbp), %rax
	jl	.L6
.L6:
	movq	-8(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	addq	-4(%rbp), %rax
	movq	%rax, -16(%rbp)
.L5:
	sarq	$2, -4(%rbp)
	jmp	.L3
.L4:
	movq	-16(%rbp), %rax
	popq	%rbp
	ret
.L2:
	movq	-8(%rbp), %rax
	popq	%rbp
	ret
	.size	int_sqrt, .-int_sqrt

WARNING:root:WARNING: code execute timeout for input 0 in case 86
WARNING:root:WARNING: code execute timeout for input 1 in case 86
WARNING:root:WARNING: code execute timeout for input 2 in case 86
WARNING:root:WARNING: code failed to execute for input 3 in case 86
WARNING:root:WARNING: code execute timeout for input 4 in case 86
WARNING:root:WARNING: code execute timeout for input 5 in case 86
WARNING:root:WARNING: code failed to execute for input 6 in case 86
WARNING:root:WARNING: code execute timeout for input 7 in case 86
WARNING:root:WARNING: code failed to execute for input 8 in case 86
WARNING:root:WARNING: code failed to execute for input 9 in case 86
INFO:root:Local error rate: 100.0%
INFO:root:CASE 86 failed
INFO:root:C code :
#include <stdio.h> 

int comp(int num)
{
    int res = 0;
    int cnt = 0;

    while (num) {
        if (!(num & 1)) {
            res = res | (1 << cnt);
        }
        ++cnt;
        num = num >> 1;
    }

    return res;
}
INFO:root:x86 code: 

	.text
	.globl	comp
	.type	comp, @function
comp:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L2
.L3:
	movl	-4(%rbp), %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L4
	jmp	.L5
.L4:
	movl	-12(%rbp), %eax
	movl	$1, %edx
	movl	$1, %ecx
	shll	%cl, %edx
	movl	%edx, %eax
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	orl	%ecx, %eax
	movl	%eax, -8(%rbp)
.L5:
	addl	$1, -12(%rbp)
	shrl	$1, -4(%rbp)
.L2:
	movl	-4(%rbp), %eax
	testl	%eax, %eax
	jne	.L3
	movl	-8(%rbp), %eax
	leave
	ret

INFO:root:Local error rate: 90.0%
INFO:root:CASE 87 failed
INFO:root:C code :

int logicalShift(int x, int n) {
 int a=(x>>31&1)<<32+~n;
 return (x^a<<n)>>n^a;
}
INFO:root:x86 code: 

	.text
	.globl	logicalShift
	.type	logicalShift, @function
logicalShift:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	sarl	$31, %eax
	andl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	negl	%eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-4(%rbp), %eax
	xorl	-12(%rbp), %eax
	sall	-16(%rbp), %eax
	xorl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shrl	%cl, %eax
	sarl	-8(%rbp), %eax
	popq	%rbp
	ret
.LFE0:

WARNING:root:CASE 88 failed to assemble the code to executable!
WARNING:root:ret.stderr: tmp.s: Assembler messages:
tmp.s:22: Error: operand size mismatch for `sal'
tmp.s:26: Error: operand size mismatch for `sar'

WARNING:root:ret.stdout: 
INFO:root:C code :

double light_time(double distance) {
    double t = 0.0;



    return t;
}
INFO:root:x86 code: 

	.text
	.globl	light_time
	.type	light_time, @function
light_time:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	$0, -16(%rbp)
	movq	-16(%rbp), %rax
	popq	%rbp
	ret

INFO:root:Local error rate: 100.0%
INFO:root:CASE 89 failed
INFO:root:C code :

double business_sum(double in, double in2) {
    return in + in2;
}
INFO:root:x86 code: 

	.text
	.globl	business_sum
	.type	business_sum, @function
business_sum:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	-8(%rbp), %xmm0
	addsd	-16(%rbp), %xmm0
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 90 succeeded
INFO:root:C code :

int do_961() { return 961; }
INFO:root:x86 code: 

	.text
	.globl	do_961
	.type	do_961, @function
do_961:
.LFB0:
	endbr64
	movl	$961, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 91 succeeded
INFO:root:C code :





int chroma_sub_implemented(int mode)
{
  switch (mode) {
  case 0:
  case 1:
  case 3:
    return 1;
  case 2:
  case 4:
  case 5:
  case 7:
  case 6:
  default:
    return 0;
  }
}
INFO:root:x86 code: 

	.text
	.globl	chroma_sub_implemented
	.type	chroma_sub_implemented, @function
chroma_sub_implemented:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	$0, %eax
	je	.L4
	cmpl	$1, %eax
	je	.L4
	cmpl	$3, %eax
	je	.L4
	cmpl	$2, %eax
	je	.L6
	cmpl	$4, %eax
	je	.L6
	cmpl	$5, %eax
	je	.L6
	cmpl	$7, %eax
	je	.L6
	cmpl	$6, %eax
	je	.L6
	movl	$0, %eax
	jmp	.L7
.L6:
	movl	$1, %eax
	jmp	.L7
.L4:
	movl	$1, %eax
.L7:
	popq	%rbp
	ret
.LFE0:
	.size	chroma_sub_implemented, .-chroma_sub_implemented

INFO:root:Local error rate: 0.0%
INFO:root:CASE 92 succeeded
INFO:root:C code :
#include <stdio.h>

int leapyear(int year) {
  if (year % 400 == 0)
    return 1;
  else if (year % 4 == 0 && year % 100 != 0)
    return 1;
  else
    return 0;
}
INFO:root:x86 code: 

	.text
	.globl	leapyear
	.type	leapyear, @function
leapyear:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edx
	shrl	$31, %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	sarl	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, %ecx
	sarl	$30, %ecx
	addl	%ecx, %edx
	movl	%edx, %eax
	testl	%eax, %eax
	jne	.L2
	movl	$1, %eax
	jmp	.L3
.L2:
	movl	-4(%rbp), %eax
	movl	%eax, %edx
	shrl	$31, %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	sarl	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, %ecx
	sarl	$30, %ecx
	addl	%ecx, %edx
	movl	%edx, %eax
	testl	%eax, %eax
	je	.L4
	movl	-4(%rbp), %eax
	movl	%eax, %edx
	shrl	$31, %edx
	movl	%edx, %ecx
	movl	%eax, %edx
	sarl	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, %edx
	movl	%eax, %ecx
	sarl	$30, %ecx
	addl	%ecx, %edx
	movl	%edx, %eax
	testl	%eax, %eax
	jne	.L5
	movl	$1, %eax
	jmp	.L3
.L5:
	movl	$0, %eax
	jmp	.L3
.L4:
	movl	$0, %eax
.L3:
	popq	%rbp
	ret

INFO:root:Local error rate: 30.0%
INFO:root:CASE 93 failed
INFO:root:C code :

int subtract(int x, int y) {
    return x - y;
}
INFO:root:x86 code: 

	.text
	.globl	subtract
	.type	subtract, @function
subtract:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 94 succeeded
INFO:root:C code :
#include <ctype.h>

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <stdint.h>

#include <math.h>

#include <time.h>

#include <fcntl.h>

#include <sys/types.h>

#include <errno.h>

#include <limits.h>

double calc_swst(unsigned short swst_dn, double pri)
{


     return ((double) swst_dn * 210.94e-09 + 9.0 * pri - 6.6E-6);
}
INFO:root:x86 code: 

	.text
	.globl	calc_swst
	.type	calc_swst, @function
calc_swst:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movsd	%xmm0, -16(%rbp)
	movl	-4(%rbp), %eax
	pxor	%xmm0, %xmm0
	cvtsi2sd	%eax, %xmm0
	mulsd	.LC0(%rip), %xmm0
	movsd	.LC1(%rip), %xmm1
	mulsd	-16(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	.LC2(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	popq	%rbp
	ret
.LC0:
	.long	1374389535
	.long	1073291771
	.section	.rodata
	.align 8
.LC1:
	.long	0
	.long	1074790400
	.align 8
.LC2:
	.long	0
	.long	1074790399

INFO:root:Local error rate: 100.0%
INFO:root:CASE 95 failed
INFO:root:C code :

int gsl_TouchNear(void)
{
  return 0;
}
INFO:root:x86 code: 

	.text
	.globl	gsl_TouchNear
	.type	gsl_TouchNear, @function
gsl_TouchNear:
.LFB0:
	endbr64
	movl	$0, %eax
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 96 succeeded
INFO:root:C code :

int _link (const char *old_name, const char *new_name)
{
  return -1;
}
INFO:root:x86 code: 

	.text
	.globl	_link
	.type	_link, @function
_link:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$-1, %eax
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 97 succeeded
INFO:root:C code :

int quant(int n, int m)
{
 int i, neg;

 neg = 0;
 if (n < 0) {
  neg++;
  n = -n;
 }

 i = n / m;
 if (n - m * i > m / 2)
  i += 1;
 i *= m;
 if (neg)
  i = -i;
 return(i);
}
INFO:root:x86 code: 

	.text
	.globl	quant
	.type	quant, @function
quant:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$0, -4(%rbp)
	jge	.L2
	addl	$1, -12(%rbp)
	negl	-4(%rbp)
.L2:
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %edx
	movl	%eax, %ecx
	cdq
	idivl	%edx
	movl	%eax, %edx
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	subl	%eax, %edx
	movl	-8(%rbp), %eax
	shrl	$1, %eax
	cmpl	%eax, %edx
	jle	.L3
	addl	$1, %eax
.L3:
	imull	-8(%rbp), %eax
	movl	-12(%rbp), %edx
	testl	%edx, %edx
	je	.L4
	negl	%eax
.L4:
	movl	%eax, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	leave
	ret

WARNING:root:WARNING: code failed to execute for input 0 in case 98
WARNING:root:WARNING: code failed to execute for input 1 in case 98
WARNING:root:WARNING: code failed to execute for input 2 in case 98
WARNING:root:WARNING: code failed to execute for input 3 in case 98
WARNING:root:WARNING: code failed to execute for input 4 in case 98
WARNING:root:WARNING: code failed to execute for input 5 in case 98
WARNING:root:WARNING: code failed to execute for input 6 in case 98
WARNING:root:WARNING: code failed to execute for input 7 in case 98
WARNING:root:WARNING: code failed to execute for input 8 in case 98
WARNING:root:WARNING: code failed to execute for input 9 in case 98
INFO:root:Local error rate: 100.0%
INFO:root:CASE 98 failed
INFO:root:C code :

void fs_scandir(char *dir, char *name)
{
}
INFO:root:x86 code: 

	.text
	.globl	fs_scandir
	.type	fs_scandir, @function
fs_scandir:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	nop
	popq	%rbp
	ret

INFO:root:Local error rate: 0.0%
INFO:root:CASE 99 succeeded
INFO:root:Done
INFO:root:Passed cases: [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 31, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 79, 81, 82, 83, 85, 90, 91, 92, 94, 96, 97, 99]
INFO:root:Failed cases: [0, 1, 3, 5, 7, 9, 16, 19, 27, 28, 30, 32, 33, 34, 42, 49, 51, 53, 55, 56, 59, 60, 61, 73, 75, 78, 80, 84, 86, 87, 88, 89, 93, 95, 98]
INFO:root:Pass rate: 65.0%
INFO:root:End time: 2024-08-18 00:28:32.601796
