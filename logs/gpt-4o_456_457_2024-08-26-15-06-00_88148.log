INFO:root:log file created!
INFO:root:Start time: 2024-08-26 15:06:00.719453
INFO:root:Current run:temp_gpt-4o_456_457_2024-08-26-15-06-00_88148
INFO:root:LLM default prompt size: 274
INFO:root:C code :

double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3){

    const double p0 = (-1.0/4.0)*phim3 + (13.0/12.0) * phim2 + (-23.0/12.0) * phim1 + (25.0/12.0)*phi;
    const double p1 = (1.0/12.0)*phim2 + (-5.0/12.0)*phim1 + (13.0/12.0)*phi + (1.0/4.0)*phip1;
    const double p2 = (-1.0/12.0)*phim1 + (7.0/12.0)*phi + (7.0/12.0)*phip1 + (-1.0/12.0)*phip2;
    const double p3 = (1.0/4.0)*phi + (13.0/12.0)*phip1 + (-5.0/12.0)*phip2 + (1.0/12.0)*phip3;


    const double beta0 = (phim3*(547.0*phim3 - 3882.0*phim2 + 4642.0*phim1 - 1854.0*phi)
                         + phim2*(7043.0*phim2 - 17246.0*phim1 + 7042.0*phi)
                         + phim1*(11003.0*phim1 - 9402.0*phi)
                         + 2107.0*phi*phi);
    const double beta1 =(phim2*(267.0*phim2 - 1642.0*phim1 + 1602.0*phi - 494.0*phip1)
                        + phim1*(2843.0*phim1 - 5966.0*phi + 1922.0*phip1)
                        + phi*(3443.0*phi - 2522.0*phip1)
                        + 547.0*phip1*phip1);
    const double beta2 = (phim1*(547.0*phim1 - 2522.0*phi + 1922.0*phip1 - 494.0*phip2)
                         + phi*(3443.0*phi -5966.0*phip1 + 1602.0*phip2)
                         + phip1*(2843.0*phip1 - 1642.0*phip2)
                         + 267.0*phip2* phip2);
    const double beta3 = (phi*(2107.0*phi - 9402.0*phip1 + 7042.0*phip2 - 1854.0*phip3)
                         + phip1*(11003.0*phip1 - 17246.0*phip2 + 4642.0*phip3)
                         + phip2*(7043.0*phip2 - 3882.0*phip3)
                         + 547.0*phip3*phip3);

    const double alpha0 = (1.0/35.0)/((beta0 + 1e-10) * (beta0 + 1e-10));
    const double alpha1 = (12.0/35.0)/((beta1 + 1e-10) * (beta1 + 1e-10));
    const double alpha2 = (18.0/35.0)/((beta2 + 1e-10) * (beta2 + 1e-10));
    const double alpha3 = (4.0/35.0)/((beta3 + 1e-10) * (beta3 + 1e-10));

    const double alpha_sum_inv = 1.0/(alpha0 + alpha1 + alpha2 + alpha3);

    const double w0 = alpha0 * alpha_sum_inv;
    const double w1 = alpha1 * alpha_sum_inv;
    const double w2 = alpha2 * alpha_sum_inv;
    const double w3 = alpha3 * alpha_sum_inv;


    return w0 * p0 + w1 * p1 + w2 * p2 + w3 * p3;
}
INFO:root:current LLM prompt size: 1269
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:root:x86 code: 

	.text
	.globl	interp_weno7
	.type	interp_weno7, @function
interp_weno7:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$272, %rsp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	%xmm2, -24(%rbp)
	movsd	%xmm3, -32(%rbp)
	movsd	%xmm4, -40(%rbp)
	movsd	%xmm5, -48(%rbp)
	movsd	%xmm6, -56(%rbp)
	movq	%xmm7, -64(%rbp)          # xmm7 not used, just preserving the general idea

	# p0
	movsd	-8(%rbp), %xmm0
	mulsd	.LC0(%rip), %xmm0
	movsd	-16(%rbp), %xmm1
	mulsd	.LC1(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC2(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC3(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -72(%rbp)

	# p1
	movsd	-16(%rbp), %xmm0
	mulsd	.LC4(%rip), %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC6(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC7(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -80(%rbp)

	# p2
	movsd	-24(%rbp), %xmm0
	mulsd	.LC8(%rip), %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC9(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC10(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC11(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -88(%rbp)

	# p3
	movsd	-32(%rbp), %xmm0
	mulsd	.LC12(%rip), %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC13(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC14(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-56(%rbp), %xmm1
	mulsd	.LC15(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -96(%rbp)

	# beta0
	movsd	-8(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC16(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-16(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-24(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-32(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -104(%rbp)

	# beta1
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC17(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-24(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-32(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-40(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -112(%rbp)

	# beta2
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC18(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-32(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-40(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-48(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -120(%rbp)

	# beta3
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC19(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-40(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-48(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-56(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -128(%rbp)

	# alpha0
	movsd	.LC20(%rip), %xmm0
	movsd	-104(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -136(%rbp)

	# alpha1
	movsd	.LC22(%rip), %xmm0
	movsd	-112(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -144(%rbp)

	# alpha2
	movsd	.LC23(%rip), %xmm0
	movsd	-120(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -152(%rbp)

	# alpha3
	movsd	.LC24(%rip), %xmm0
	movsd	-128(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -160(%rbp)

	# alpha_sum_inv
	movsd	-136(%rbp), %xmm0
	addsd	-144(%rbp), %xmm0
	addsd	-152(%rbp), %xmm0
	addsd	-160(%rbp), %xmm0
	divsd	.LC25(%rip), %xmm0
	movsd	%xmm0, -168(%rbp)

	# w0
	movsd	-136(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -176(%rbp)

	# w1
	movsd	-144(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -184(%rbp)

	# w2
	movsd	-152(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -192(%rbp)

	# w3
	movsd	-160(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -200(%rbp)

	# return value
	movsd	-176(%rbp), %xmm0
	mulsd	-72(%rbp), %xmm0
	movsd	-184(%rbp), %xmm1
	mulsd	-80(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-192(%rbp), %xmm1
	mulsd	-88(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-200(%rbp), %xmm1
	mulsd	-96(%rbp), %xmm1
	addsd	%xmm1, %xmm0

	leave
	ret
.LC0:
	.double	-0.25
.LC1:
	.double	1.0833333333333333
.LC2:
	.double	-1.9166666666666667
.LC3:
	.double	2.0833333333333335
.LC4:
	.double	0.08333333333333333
.LC5:
	.double	-0.4166666666666667
.LC6:
	.double	1.0833333333333333
.LC7:
	.double	0.25
.LC8:
	.double	-0.08333333333333333
.LC9:
	.double	0.5833333333333334
.LC10:
	.double	0.5833333333333334
.LC11:
	.double	-0.08333333333333333
.LC12:
	.double	0.25
.LC13:
	.double	1.0833333333333333
.LC14:
	.double	-0.4166666666666667
.LC15:
	.double	0.08333333333333333
.LC16:
	.double	547.0
.LC17:
	.double	267.0
.LC18:
	.double	547.0
.LC19:
	.double	2107.0
.LC20:
	.double	0.02857142857142857
.LC21:
	.double	1.0e-10
.LC22:
	.double	0.34285714285714286
.LC23:
	.double	0.5142857142857142
.LC24:
	.double	0.11428571428571428
.LC25:
	.double	1.0


INFO:root:Local error rate: 100.0%
INFO:root:0th try 0 round in 456 failed
INFO:root:error message: input 0 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 1.50872508277,
    "phim2": 61.093058316,
    "phim1": 8.60525200569,
    "phi": 48.3903983094,
    "phip1": 22.3019540605,
    "phip2": 39.7940818333,
    "phip3": 26.902927803
}
Expected outputs are:
{
    "returnv": 39.399837211689444
}

Actual outputs are:
{
    "returnv": 2.7348141459795292e-21
}

----------
input 1 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 47.8933252429,
    "phim2": 10.2433141568,
    "phim1": 43.8582857765,
    "phi": 20.5272857486,
    "phip1": 85.481094036,
    "phip2": 25.3490270618,
    "phip3": 88.6825517922
}
Expected outputs are:
{
    "returnv": 33.77688897612535
}

Actual outputs are:
{
    "returnv": 1.1804947470733924e-22
}

----------
input 2 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 66.1799303678,
    "phim2": 68.0170920617,
    "phim1": 38.3443908377,
    "phi": 85.2245342049,
    "phip1": 47.5768237157,
    "phip2": 91.6047006919,
    "phip3": 0.242709225308
}
Expected outputs are:
{
    "returnv": 78.68457547408919
}

Actual outputs are:
{
    "returnv": 2.9632589481629553e-25
}

----------
input 3 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 49.4992171206,
    "phim2": 68.512591148,
    "phim1": 57.6213717275,
    "phi": 29.6630461618,
    "phip1": 45.4365411956,
    "phip2": 91.3555861469,
    "phip3": 9.46544866566
}
Expected outputs are:
{
    "returnv": 28.261369285461004
}

Actual outputs are:
{
    "returnv": 1.675904408744596e-25
}

----------
input 4 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 69.8838920564,
    "phim2": 78.6360712996,
    "phim1": 34.3342190434,
    "phi": 16.3274127948,
    "phip1": 30.1598206122,
    "phip2": 83.8168026007,
    "phip3": 79.6292883164
}
Expected outputs are:
{
    "returnv": 17.35695763644479
}

Actual outputs are:
{
    "returnv": 7.569610071391478e-25
}

----------
input 5 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 38.4720261152,
    "phim2": 90.3310988293,
    "phim1": 35.067251868,
    "phi": 76.3581047974,
    "phip1": 74.1058531854,
    "phip2": 82.4721963435,
    "phip3": 24.65078339
}
Expected outputs are:
{
    "returnv": 78.1782054653679
}

Actual outputs are:
{
    "returnv": 1.746352190456053e-25
}

----------
input 6 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 62.8349838576,
    "phim2": 68.8148099426,
    "phim1": 88.3876274741,
    "phi": 28.0879800291,
    "phip1": 42.3021178729,
    "phip2": 91.563246727,
    "phip3": 16.1243697591
}
Expected outputs are:
{
    "returnv": 25.401513970204824
}

Actual outputs are:
{
    "returnv": 3.0722717470518644e-26
}

----------
input 7 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 86.0670088116,
    "phim2": 70.1055257149,
    "phim1": 41.5424734118,
    "phi": 0.789862346597,
    "phip1": 84.5056831336,
    "phip2": 25.6436131178,
    "phip3": 41.1339263646
}
Expected outputs are:
{
    "returnv": -21.3316217781991
}

Actual outputs are:
{
    "returnv": 3.0452638823599984e-22
}

----------
input 8 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 99.2575950935,
    "phim2": 88.3415907127,
    "phim1": 18.4542288076,
    "phi": 26.7064941939,
    "phip1": 7.26726099217,
    "phip2": 78.2494637382,
    "phip3": 38.3296808972
}
Expected outputs are:
{
    "returnv": 21.42830229665105
}

Actual outputs are:
{
    "returnv": 7.248885148649158e-24
}

----------
input 9 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 15.6557980877,
    "phim2": 82.5472467193,
    "phim1": 97.3957957353,
    "phi": 52.2698322139,
    "phip1": 26.8334240669,
    "phip2": 30.3911321213,
    "phip3": 35.7154657471
}
Expected outputs are:
{
    "returnv": 35.260938650372054
}

Actual outputs are:
{
    "returnv": 5.986486946055905e-26
}

----------

INFO:root:current LLM prompt size: 8596
WARNING:root:LLM prompt size exceeds the limit 8192, will truncate the prompt.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:root:current LLM prompt size: 11282
WARNING:root:LLM prompt size exceeds the limit 8192, will truncate the prompt.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:root:x86 code: 

	.text
	.globl	interp_weno7
	.type	interp_weno7, @function
interp_weno7:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$272, %rsp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	%xmm2, -24(%rbp)
	movsd	%xmm3, -32(%rbp)
	movsd	%xmm4, -40(%rbp)
	movsd	%xmm5, -48(%rbp)
	movsd	%xmm6, -56(%rbp)
	movq	%xmm7, -64(%rbp)          # xmm7 not used, just preserving the general idea

	# p0
	movsd	-8(%rbp), %xmm0
	mulsd	.LC0(%rip), %xmm0
	movsd	-16(%rbp), %xmm1
	mulsd	.LC1(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC2(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC3(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -72(%rbp)

	# p1
	movsd	-16(%rbp), %xmm0
	mulsd	.LC4(%rip), %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC6(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC7(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -80(%rbp)

	# p2
	movsd	-24(%rbp), %xmm0
	mulsd	.LC8(%rip), %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC9(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC10(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC11(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -88(%rbp)

	# p3
	movsd	-32(%rbp), %xmm0
	mulsd	.LC12(%rip), %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC13(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC14(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-56(%rbp), %xmm1
	mulsd	.LC15(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -96(%rbp)

	# beta0
	movsd	-8(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC16(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-16(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-24(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-32(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -104(%rbp)

	# beta1
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC17(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-24(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-32(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-40(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -112(%rbp)

	# beta2
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC18(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-32(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-40(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-48(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -120(%rbp)

	# beta3
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC19(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-40(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-48(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-56(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -128(%rbp)

	# alpha0
	movsd	.LC20(%rip), %xmm0
	movsd	-104(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -136(%rbp)

	# alpha1
	movsd	.LC22(%rip), %xmm0
	movsd	-112(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -144(%rbp)

	# alpha2
	movsd	.LC23(%rip), %xmm0
	movsd	-120(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -152(%rbp)

	# alpha3
	movsd	.LC24(%rip), %xmm0
	movsd	-128(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -160(%rbp)

	# alpha_sum_inv
	movsd	-136(%rbp), %xmm0
	addsd	-144(%rbp), %xmm0
	addsd	-152(%rbp), %xmm0
	addsd	-160(%rbp), %xmm0
	movsd	.LC25(%rip), %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -168(%rbp)

	# w0
	movsd	-136(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -176(%rbp)

	# w1
	movsd	-144(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -184(%rbp)

	# w2
	movsd	-152(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -192(%rbp)

	# w3
	movsd	-160(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -200(%rbp)

	# return value
	movsd	-176(%rbp), %xmm0
	mulsd	-72(%rbp), %xmm0
	movsd	-184(%rbp), %xmm1
	mulsd	-80(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-192(%rbp), %xmm1
	mulsd	-88(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-200(%rbp), %xmm1
	mulsd	-96(%rbp), %xmm1
	addsd	%xmm1, %xmm0

	leave
	ret
.LC0:
	.double	-0.25
.LC1:
	.double	1.0833333333333333
.LC2:
	.double	-1.9166666666666667
.LC3:
	.double	2.0833333333333335
.LC4:
	.double	0.08333333333333333
.LC5:
	.double	-0.4166666666666667
.LC6:
	.double	1.0833333333333333
.LC7:
	.double	0.25
.LC8:
	.double	-0.08333333333333333
.LC9:
	.double	0.5833333333333334
.LC10:
	.double	0.5833333333333334
.LC11:
	.double	-0.08333333333333333
.LC12:
	.double	0.25
.LC13:
	.double	1.0833333333333333
.LC14:
	.double	-0.4166666666666667
.LC15:
	.double	0.08333333333333333
.LC16:
	.double	547.0
.LC17:
	.double	267.0
.LC18:
	.double	547.0
.LC19:
	.double	2107.0
.LC20:
	.double	0.02857142857142857
.LC21:
	.double	1.0e-10
.LC22:
	.double	0.34285714285714286
.LC23:
	.double	0.5142857142857142
.LC24:
	.double	0.11428571428571428
.LC25:
	.double	1.0

INFO:root:Local error rate: 100.0%
INFO:root:0th try 1 round in 456 failed
INFO:root:error message: input 0 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 1.50872508277,
    "phim2": 61.093058316,
    "phim1": 8.60525200569,
    "phi": 48.3903983094,
    "phip1": 22.3019540605,
    "phip2": 39.7940818333,
    "phip3": 26.902927803
}
Expected outputs are:
{
    "returnv": 39.399837211689444
}

Actual outputs are:
{
    "returnv": 104.49309602343926
}

----------
input 1 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 47.8933252429,
    "phim2": 10.2433141568,
    "phim1": 43.8582857765,
    "phi": 20.5272857486,
    "phip1": 85.481094036,
    "phip2": 25.3490270618,
    "phip3": 88.6825517922
}
Expected outputs are:
{
    "returnv": 33.77688897612535
}

Actual outputs are:
{
    "returnv": 26.730684843945646
}

----------
input 2 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 66.1799303678,
    "phim2": 68.0170920617,
    "phim1": 38.3443908377,
    "phi": 85.2245342049,
    "phip1": 47.5768237157,
    "phip2": 91.6047006919,
    "phip3": 0.242709225308
}
Expected outputs are:
{
    "returnv": 78.68457547408919
}

Actual outputs are:
{
    "returnv": 83.75804120751975
}

----------
input 3 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 49.4992171206,
    "phim2": 68.512591148,
    "phim1": 57.6213717275,
    "phi": 29.6630461618,
    "phip1": 45.4365411956,
    "phip2": 91.3555861469,
    "phip3": 9.46544866566
}
Expected outputs are:
{
    "returnv": 28.261369285461004
}

Actual outputs are:
{
    "returnv": 26.30441629834479
}

----------
input 4 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 69.8838920564,
    "phim2": 78.6360712996,
    "phim1": 34.3342190434,
    "phi": 16.3274127948,
    "phip1": 30.1598206122,
    "phip2": 83.8168026007,
    "phip3": 79.6292883164
}
Expected outputs are:
{
    "returnv": 17.35695763644479
}

Actual outputs are:
{
    "returnv": 17.383552469824334
}

----------
input 5 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 38.4720261152,
    "phim2": 90.3310988293,
    "phim1": 35.067251868,
    "phi": 76.3581047974,
    "phip1": 74.1058531854,
    "phip2": 82.4721963435,
    "phip3": 24.65078339
}
Expected outputs are:
{
    "returnv": 78.1782054653679
}

Actual outputs are:
{
    "returnv": 87.78663990350404
}

----------
input 6 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 62.8349838576,
    "phim2": 68.8148099426,
    "phim1": 88.3876274741,
    "phi": 28.0879800291,
    "phip1": 42.3021178729,
    "phip2": 91.563246727,
    "phip3": 16.1243697591
}
Expected outputs are:
{
    "returnv": 25.401513970204824
}

Actual outputs are:
{
    "returnv": 11.892741519280984
}

----------
input 7 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 86.0670088116,
    "phim2": 70.1055257149,
    "phim1": 41.5424734118,
    "phi": 0.789862346597,
    "phip1": 84.5056831336,
    "phip2": 25.6436131178,
    "phip3": 41.1339263646
}
Expected outputs are:
{
    "returnv": -21.3316217781991
}

Actual outputs are:
{
    "returnv": 80.44186119092488
}

----------
input 8 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 99.2575950935,
    "phim2": 88.3415907127,
    "phim1": 18.4542288076,
    "phi": 26.7064941939,
    "phip1": 7.26726099217,
    "phip2": 78.2494637382,
    "phip3": 38.3296808972
}
Expected outputs are:
{
    "returnv": 21.42830229665105
}

Actual outputs are:
{
    "returnv": 18.391975373766055
}

----------
input 9 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 15.6557980877,
    "phim2": 82.5472467193,
    "phim1": 97.3957957353,
    "phi": 52.2698322139,
    "phip1": 26.8334240669,
    "phip2": 30.3911321213,
    "phip3": 35.7154657471
}
Expected outputs are:
{
    "returnv": 35.260938650372054
}

Actual outputs are:
{
    "returnv": 28.187737662534655
}

----------

INFO:root:current LLM prompt size: 11258
WARNING:root:LLM prompt size exceeds the limit 8192, will truncate the prompt.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:root:x86 code: 

	.text
	.globl	interp_weno7
	.type	interp_weno7, @function
interp_weno7:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$272, %rsp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	%xmm2, -24(%rbp)
	movsd	%xmm3, -32(%rbp)
	movsd	%xmm4, -40(%rbp)
	movsd	%xmm5, -48(%rbp)
	movsd	%xmm6, -56(%rbp)
	movq	%xmm7, -64(%rbp)          # xmm7 not used, just preserving the general idea

	# p0
	movsd	-8(%rbp), %xmm0
	mulsd	.LC0(%rip), %xmm0
	movsd	-16(%rbp), %xmm1
	mulsd	.LC1(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC2(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC3(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -72(%rbp)

	# p1
	movsd	-16(%rbp), %xmm0
	mulsd	.LC4(%rip), %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC6(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC7(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -80(%rbp)

	# p2
	movsd	-24(%rbp), %xmm0
	mulsd	.LC8(%rip), %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC9(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC10(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC11(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -88(%rbp)

	# p3
	movsd	-32(%rbp), %xmm0
	mulsd	.LC12(%rip), %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC13(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC14(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-56(%rbp), %xmm1
	mulsd	.LC15(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -96(%rbp)

	# beta0
	movsd	-8(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC16(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-16(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-24(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-32(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -104(%rbp)

	# beta1
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC17(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-24(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-32(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-40(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -112(%rbp)

	# beta2
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC18(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-32(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-40(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-48(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -120(%rbp)

	# beta3
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC19(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-40(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-48(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-56(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -128(%rbp)

	# alpha0
	movsd	.LC20(%rip), %xmm0
	movsd	-104(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -136(%rbp)

	# alpha1
	movsd	.LC22(%rip), %xmm0
	movsd	-112(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -144(%rbp)

	# alpha2
	movsd	.LC23(%rip), %xmm0
	movsd	-120(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -152(%rbp)

	# alpha3
	movsd	.LC24(%rip), %xmm0
	movsd	-128(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -160(%rbp)

	# alpha_sum_inv
	movsd	-136(%rbp), %xmm0
	addsd	-144(%rbp), %xmm0
	addsd	-152(%rbp), %xmm0
	addsd	-160(%rbp), %xmm0
	movsd	.LC25(%rip), %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -168(%rbp)

	# w0
	movsd	-136(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -176(%rbp)

	# w1
	movsd	-144(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -184(%rbp)

	# w2
	movsd	-152(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -192(%rbp)

	# w3
	movsd	-160(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -200(%rbp)

	# return value
	movsd	-176(%rbp), %xmm0
	mulsd	-72(%rbp), %xmm0
	movsd	-184(%rbp), %xmm1
	mulsd	-80(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-192(%rbp), %xmm1
	mulsd	-88(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-200(%rbp), %xmm1
	mulsd	-96(%rbp), %xmm1
	addsd	%xmm1, %xmm0

	leave
	ret
.LC0:
	.double	-0.25
.LC1:
	.double	1.0833333333333333
.LC2:
	.double	-1.9166666666666667
.LC3:
	.double	2.0833333333333335
.LC4:
	.double	0.08333333333333333
.LC5:
	.double	-0.4166666666666667
.LC6:
	.double	1.0833333333333333
.LC7:
	.double	0.25
.LC8:
	.double	-0.08333333333333333
.LC9:
	.double	0.5833333333333334
.LC10:
	.double	0.5833333333333334
.LC11:
	.double	-0.08333333333333333
.LC12:
	.double	0.25
.LC13:
	.double	1.0833333333333333
.LC14:
	.double	-0.4166666666666667
.LC15:
	.double	0.08333333333333333
.LC16:
	.double	547.0
.LC17:
	.double	267.0
.LC18:
	.double	547.0
.LC19:
	.double	2107.0
.LC20:
	.double	0.02857142857142857
.LC21:
	.double	1.0e-10
.LC22:
	.double	0.34285714285714286
.LC23:
	.double	0.5142857142857142
.LC24:
	.double	0.11428571428571428
.LC25:
	.double	1.0

INFO:root:Local error rate: 100.0%
INFO:root:0th try 2 round in 456 failed
INFO:root:error message: input 0 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 1.50872508277,
    "phim2": 61.093058316,
    "phim1": 8.60525200569,
    "phi": 48.3903983094,
    "phip1": 22.3019540605,
    "phip2": 39.7940818333,
    "phip3": 26.902927803
}
Expected outputs are:
{
    "returnv": 39.399837211689444
}

Actual outputs are:
{
    "returnv": 104.49309602343926
}

----------
input 1 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 47.8933252429,
    "phim2": 10.2433141568,
    "phim1": 43.8582857765,
    "phi": 20.5272857486,
    "phip1": 85.481094036,
    "phip2": 25.3490270618,
    "phip3": 88.6825517922
}
Expected outputs are:
{
    "returnv": 33.77688897612535
}

Actual outputs are:
{
    "returnv": 26.730684843945646
}

----------
input 2 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 66.1799303678,
    "phim2": 68.0170920617,
    "phim1": 38.3443908377,
    "phi": 85.2245342049,
    "phip1": 47.5768237157,
    "phip2": 91.6047006919,
    "phip3": 0.242709225308
}
Expected outputs are:
{
    "returnv": 78.68457547408919
}

Actual outputs are:
{
    "returnv": 83.75804120751975
}

----------
input 3 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 49.4992171206,
    "phim2": 68.512591148,
    "phim1": 57.6213717275,
    "phi": 29.6630461618,
    "phip1": 45.4365411956,
    "phip2": 91.3555861469,
    "phip3": 9.46544866566
}
Expected outputs are:
{
    "returnv": 28.261369285461004
}

Actual outputs are:
{
    "returnv": 26.30441629834479
}

----------
input 4 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 69.8838920564,
    "phim2": 78.6360712996,
    "phim1": 34.3342190434,
    "phi": 16.3274127948,
    "phip1": 30.1598206122,
    "phip2": 83.8168026007,
    "phip3": 79.6292883164
}
Expected outputs are:
{
    "returnv": 17.35695763644479
}

Actual outputs are:
{
    "returnv": 17.383552469824334
}

----------
input 5 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 38.4720261152,
    "phim2": 90.3310988293,
    "phim1": 35.067251868,
    "phi": 76.3581047974,
    "phip1": 74.1058531854,
    "phip2": 82.4721963435,
    "phip3": 24.65078339
}
Expected outputs are:
{
    "returnv": 78.1782054653679
}

Actual outputs are:
{
    "returnv": 87.78663990350404
}

----------
input 6 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 62.8349838576,
    "phim2": 68.8148099426,
    "phim1": 88.3876274741,
    "phi": 28.0879800291,
    "phip1": 42.3021178729,
    "phip2": 91.563246727,
    "phip3": 16.1243697591
}
Expected outputs are:
{
    "returnv": 25.401513970204824
}

Actual outputs are:
{
    "returnv": 11.892741519280984
}

----------
input 7 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 86.0670088116,
    "phim2": 70.1055257149,
    "phim1": 41.5424734118,
    "phi": 0.789862346597,
    "phip1": 84.5056831336,
    "phip2": 25.6436131178,
    "phip3": 41.1339263646
}
Expected outputs are:
{
    "returnv": -21.3316217781991
}

Actual outputs are:
{
    "returnv": 80.44186119092488
}

----------
input 8 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 99.2575950935,
    "phim2": 88.3415907127,
    "phim1": 18.4542288076,
    "phi": 26.7064941939,
    "phip1": 7.26726099217,
    "phip2": 78.2494637382,
    "phip3": 38.3296808972
}
Expected outputs are:
{
    "returnv": 21.42830229665105
}

Actual outputs are:
{
    "returnv": 18.391975373766055
}

----------
input 9 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 15.6557980877,
    "phim2": 82.5472467193,
    "phim1": 97.3957957353,
    "phi": 52.2698322139,
    "phip1": 26.8334240669,
    "phip2": 30.3911321213,
    "phip3": 35.7154657471
}
Expected outputs are:
{
    "returnv": 35.260938650372054
}

Actual outputs are:
{
    "returnv": 28.187737662534655
}

----------

INFO:root:current LLM prompt size: 11258
WARNING:root:LLM prompt size exceeds the limit 8192, will truncate the prompt.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:root:x86 code: 

	.text
	.globl	interp_weno7
	.type	interp_weno7, @function
interp_weno7:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$272, %rsp
	movsd	%xmm0, -8(%rbp)
	movsd	%xmm1, -16(%rbp)
	movsd	%xmm2, -24(%rbp)
	movsd	%xmm3, -32(%rbp)
	movsd	%xmm4, -40(%rbp)
	movsd	%xmm5, -48(%rbp)
	movsd	%xmm6, -56(%rbp)
	movq	%xmm7, -64(%rbp)          # xmm7 not used, just preserving the general idea

	# p0
	movsd	-8(%rbp), %xmm0
	mulsd	.LC0(%rip), %xmm0
	movsd	-16(%rbp), %xmm1
	mulsd	.LC1(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC2(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC3(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -72(%rbp)

	# p1
	movsd	-16(%rbp), %xmm0
	mulsd	.LC4(%rip), %xmm0
	movsd	-24(%rbp), %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC6(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC7(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -80(%rbp)

	# p2
	movsd	-24(%rbp), %xmm0
	mulsd	.LC8(%rip), %xmm0
	movsd	-32(%rbp), %xmm1
	mulsd	.LC9(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC10(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC11(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -88(%rbp)

	# p3
	movsd	-32(%rbp), %xmm0
	mulsd	.LC12(%rip), %xmm0
	movsd	-40(%rbp), %xmm1
	mulsd	.LC13(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	.LC14(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-56(%rbp), %xmm1
	mulsd	.LC15(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -96(%rbp)

	# beta0
	movsd	-8(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC16(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-16(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-24(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-32(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -104(%rbp)

	# beta1
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC17(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-24(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-32(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-40(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -112(%rbp)

	# beta2
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC18(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-32(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-40(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-48(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -120(%rbp)

	# beta3
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, %xmm1
	mulsd	.LC19(%rip), %xmm0
	movsd	%xmm0, %xmm2
	mulsd	-40(%rbp), %xmm2
	movsd	%xmm0, %xmm3
	mulsd	-48(%rbp), %xmm3
	movsd	%xmm0, %xmm4
	mulsd	-56(%rbp), %xmm4
	addsd	%xmm2, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	movsd	%xmm1, -128(%rbp)

	# alpha0
	movsd	.LC20(%rip), %xmm0
	movsd	-104(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -136(%rbp)

	# alpha1
	movsd	.LC22(%rip), %xmm0
	movsd	-112(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -144(%rbp)

	# alpha2
	movsd	.LC23(%rip), %xmm0
	movsd	-120(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -152(%rbp)

	# alpha3
	movsd	.LC24(%rip), %xmm0
	movsd	-128(%rbp), %xmm1
	addsd	.LC21(%rip), %xmm1
	mulsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -160(%rbp)

	# alpha_sum_inv
	movsd	-136(%rbp), %xmm0
	addsd	-144(%rbp), %xmm0
	addsd	-152(%rbp), %xmm0
	addsd	-160(%rbp), %xmm0
	movsd	.LC25(%rip), %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -168(%rbp)

	# w0
	movsd	-136(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -176(%rbp)

	# w1
	movsd	-144(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -184(%rbp)

	# w2
	movsd	-152(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -192(%rbp)

	# w3
	movsd	-160(%rbp), %xmm0
	mulsd	-168(%rbp), %xmm0
	movsd	%xmm0, -200(%rbp)

	# return value
	movsd	-176(%rbp), %xmm0
	mulsd	-72(%rbp), %xmm0
	movsd	-184(%rbp), %xmm1
	mulsd	-80(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-192(%rbp), %xmm1
	mulsd	-88(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-200(%rbp), %xmm1
	mulsd	-96(%rbp), %xmm1
	addsd	%xmm1, %xmm0

	leave
	ret
.LC0:
	.double	-0.25
.LC1:
	.double	1.0833333333333333
.LC2:
	.double	-1.9166666666666667
.LC3:
	.double	2.0833333333333335
.LC4:
	.double	0.08333333333333333
.LC5:
	.double	-0.4166666666666667
.LC6:
	.double	1.0833333333333333
.LC7:
	.double	0.25
.LC8:
	.double	-0.08333333333333333
.LC9:
	.double	0.5833333333333334
.LC10:
	.double	0.5833333333333334
.LC11:
	.double	-0.08333333333333333
.LC12:
	.double	0.25
.LC13:
	.double	1.0833333333333333
.LC14:
	.double	-0.4166666666666667
.LC15:
	.double	0.08333333333333333
.LC16:
	.double	547.0
.LC17:
	.double	267.0
.LC18:
	.double	547.0
.LC19:
	.double	2107.0
.LC20:
	.double	0.02857142857142857
.LC21:
	.double	1.0e-10
.LC22:
	.double	0.34285714285714286
.LC23:
	.double	0.5142857142857142
.LC24:
	.double	0.11428571428571428
.LC25:
	.double	1.0

INFO:root:Local error rate: 100.0%
INFO:root:0th try 3 round in 456 failed
INFO:root:error message: input 0 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 1.50872508277,
    "phim2": 61.093058316,
    "phim1": 8.60525200569,
    "phi": 48.3903983094,
    "phip1": 22.3019540605,
    "phip2": 39.7940818333,
    "phip3": 26.902927803
}
Expected outputs are:
{
    "returnv": 39.399837211689444
}

Actual outputs are:
{
    "returnv": 104.49309602343926
}

----------
input 1 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 47.8933252429,
    "phim2": 10.2433141568,
    "phim1": 43.8582857765,
    "phi": 20.5272857486,
    "phip1": 85.481094036,
    "phip2": 25.3490270618,
    "phip3": 88.6825517922
}
Expected outputs are:
{
    "returnv": 33.77688897612535
}

Actual outputs are:
{
    "returnv": 26.730684843945646
}

----------
input 2 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 66.1799303678,
    "phim2": 68.0170920617,
    "phim1": 38.3443908377,
    "phi": 85.2245342049,
    "phip1": 47.5768237157,
    "phip2": 91.6047006919,
    "phip3": 0.242709225308
}
Expected outputs are:
{
    "returnv": 78.68457547408919
}

Actual outputs are:
{
    "returnv": 83.75804120751975
}

----------
input 3 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 49.4992171206,
    "phim2": 68.512591148,
    "phim1": 57.6213717275,
    "phi": 29.6630461618,
    "phip1": 45.4365411956,
    "phip2": 91.3555861469,
    "phip3": 9.46544866566
}
Expected outputs are:
{
    "returnv": 28.261369285461004
}

Actual outputs are:
{
    "returnv": 26.30441629834479
}

----------
input 4 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 69.8838920564,
    "phim2": 78.6360712996,
    "phim1": 34.3342190434,
    "phi": 16.3274127948,
    "phip1": 30.1598206122,
    "phip2": 83.8168026007,
    "phip3": 79.6292883164
}
Expected outputs are:
{
    "returnv": 17.35695763644479
}

Actual outputs are:
{
    "returnv": 17.383552469824334
}

----------
input 5 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 38.4720261152,
    "phim2": 90.3310988293,
    "phim1": 35.067251868,
    "phi": 76.3581047974,
    "phip1": 74.1058531854,
    "phip2": 82.4721963435,
    "phip3": 24.65078339
}
Expected outputs are:
{
    "returnv": 78.1782054653679
}

Actual outputs are:
{
    "returnv": 87.78663990350404
}

----------
input 6 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 62.8349838576,
    "phim2": 68.8148099426,
    "phim1": 88.3876274741,
    "phi": 28.0879800291,
    "phip1": 42.3021178729,
    "phip2": 91.563246727,
    "phip3": 16.1243697591
}
Expected outputs are:
{
    "returnv": 25.401513970204824
}

Actual outputs are:
{
    "returnv": 11.892741519280984
}

----------
input 7 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 86.0670088116,
    "phim2": 70.1055257149,
    "phim1": 41.5424734118,
    "phi": 0.789862346597,
    "phip1": 84.5056831336,
    "phip2": 25.6436131178,
    "phip3": 41.1339263646
}
Expected outputs are:
{
    "returnv": -21.3316217781991
}

Actual outputs are:
{
    "returnv": 80.44186119092488
}

----------
input 8 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 99.2575950935,
    "phim2": 88.3415907127,
    "phim1": 18.4542288076,
    "phi": 26.7064941939,
    "phip1": 7.26726099217,
    "phip2": 78.2494637382,
    "phip3": 38.3296808972
}
Expected outputs are:
{
    "returnv": 21.42830229665105
}

Actual outputs are:
{
    "returnv": 18.391975373766055
}

----------
input 9 in case 456 failed because of output mismatch.
Driver Code is:
extern "C" {
double interp_weno7(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3);
}


#include <vector>
#include <nlohmann/json.hpp>
#include <fstream>
#include <iomanip>

#include <time.h>
#include <math.h>
#include <iostream>
char* output_file;
char* pre_accel_dump_file;  // optional dump file.
using json = nlohmann::json;
const char* __asan_default_options() {
  return "detect_leaks=0";
}

clock_t AcceleratorStart;
clock_t AcceleratorTotalNanos = 0;
void StartAcceleratorTimer() {
  AcceleratorStart = clock();
}

void StopAcceleratorTimer() {
  AcceleratorTotalNanos += (clock()) - AcceleratorStart;
}

void write_output(double phim3, double phim2, double phim1, double phi, double phip1, double phip2, double phip3, double returnv) {
  json output_json;

  output_json["returnv"] = returnv;
  std::ofstream out_str(output_file);
  out_str << std::setw(4) << output_json << std::endl;
}
int main(int argc, char** argv) {
  char* inpname = argv[1];
  output_file = argv[2];

  std::ifstream ifs(inpname);
  json input_json = json::parse(ifs);
  double phim3 = input_json["phim3"];
  double phim2 = input_json["phim2"];
  double phim1 = input_json["phim1"];
  double phi = input_json["phi"];
  double phip1 = input_json["phip1"];
  double phip2 = input_json["phip2"];
  double phip3 = input_json["phip3"];
  clock_t begin = clock();
  double returnv = interp_weno7(phim3, phim2, phim1, phi, phip1, phip2, phip3);
  clock_t end = clock();
  std::cout << "Time: " << (double)(end - begin) / CLOCKS_PER_SEC << std::endl;
  std::cout << "AccTime: " << (double)AcceleratorTotalNanos / CLOCKS_PER_SEC << std::endl;
  write_output(phim3, phim2, phim1, phi, phip1, phip2, phip3, returnv);
}
Inputs are: 
{
    "phim3": 15.6557980877,
    "phim2": 82.5472467193,
    "phim1": 97.3957957353,
    "phi": 52.2698322139,
    "phip1": 26.8334240669,
    "phip2": 30.3911321213,
    "phip3": 35.7154657471
}
Expected outputs are:
{
    "returnv": 35.260938650372054
}

Actual outputs are:
{
    "returnv": 28.187737662534655
}

----------

INFO:root:CASE 456 fail
INFO:root:Done
INFO:root:Passed cases: []
INFO:root:First pass cases: []
INFO:root:Failed cases: [456]
INFO:root:First pass rate: 0.0%
INFO:root:Pass rate: 0.0%
INFO:root:End time: 2024-08-26 15:08:22.638376
